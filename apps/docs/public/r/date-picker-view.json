{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "date-picker-view",
  "type": "registry:component",
  "title": "Example date-picker-view",
  "author": "@gabimoncha",
  "description": "Displays a button which is always red.",
  "registryDependencies": [
    "http://localhost:3000/r/hooks.json",
    "http://localhost:3000/r/picker-view.json",
    "http://localhost:3000/r/helpers.json"
  ],
  "files": [
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/date-picker-view/date-picker-view.tsx",
      "content": "import React, { useEffect } from 'react';\nimport type { DatePickerViewProps } from './interface';\nimport useDatePicker from './useDatePicker';\nimport { useControllableValue } from '../../hooks';\nimport PickerView from '../picker-view';\n\nconst DatePickerView: React.FC<DatePickerViewProps> = ({\n  mode = 'Y-m',\n  min,\n  max,\n  renderLabel,\n  loading,\n\n  testID,\n  ...restProps\n}) => {\n  const isControlled = 'value' in restProps;\n  const isNoDefaultValue = 'defaultValue' in restProps;\n  const [value, onChange] = useControllableValue(restProps, {\n    defaultValue: new Date(),\n  });\n  const [values, columns, onChangePicker, minDate, maxDate] = useDatePicker({\n    mode,\n    value,\n    onChange,\n    min,\n    max,\n    renderLabel,\n  });\n\n  const minDateTimestamp = minDate.getTime();\n  const maxDateTimestamp = maxDate.getTime();\n\n  useEffect(() => {\n    // 非受控的情况、并且没有默认值才去同步数据\n    // 既然有默认数据了，由外面自己负责\n    // 把数据同步到内部状态，初始化的时候默认当前时间\n    if (!isControlled && !isNoDefaultValue) {\n      let _today = new Date();\n\n      const _todayTimestamp = _today.getTime();\n\n      if (_todayTimestamp < minDateTimestamp) {\n        _today = new Date(minDateTimestamp);\n      }\n\n      if (_todayTimestamp > maxDateTimestamp) {\n        _today = new Date(maxDateTimestamp);\n      }\n\n      onChange(_today);\n    }\n  }, [isControlled, isNoDefaultValue, onChange, minDateTimestamp, maxDateTimestamp]);\n\n  return (\n    <PickerView\n      testID={testID}\n      loading={loading}\n      columns={columns}\n      value={values}\n      onChange={onChangePicker}\n    />\n  );\n};\n\nexport default DatePickerView;\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/date-picker-view/helper.ts",
      "content": "import isDate from 'lodash/isDate';\nimport type { DatePickerColumnMode, DatePickerColumnType } from './interface';\n\n/**\n * 可选项序列数组\n */\nexport const COLUMN_SERIALIZE_TYPES: DatePickerColumnType[] = ['Y', 'M', 'D', 'h', 'm', 's'];\n\nexport const serializeMode = (modes: DatePickerColumnType[]): DatePickerColumnType[] => {\n  if (modes.length === 1) {\n    return modes;\n  }\n\n  // 起点终点\n  const startIndex = COLUMN_SERIALIZE_TYPES.findIndex((k) => k === modes[0]);\n  const endIndex = COLUMN_SERIALIZE_TYPES.findIndex((k) => k === modes[1]);\n  const serializeModes: DatePickerColumnType[] = [];\n\n  for (let index = startIndex; index <= endIndex; index++) {\n    serializeModes.push(COLUMN_SERIALIZE_TYPES[index]);\n  }\n\n  return serializeModes;\n};\n\nexport const toDateObject = (d: Date) => ({\n  Y: d.getFullYear(),\n  M: d.getMonth(),\n  D: d.getDate(),\n  h: d.getHours(),\n  m: d.getMinutes(),\n  s: d.getSeconds(),\n});\n\n/**\n * 获取某年的某个月有多少天\n * @param year 年\n * @param month 月 1~12\n * @returns 天数\n */\nexport const getMonthDays = (year: number, month: number) => {\n  const day = new Date();\n\n  day.setFullYear(year);\n  day.setDate(1);\n  day.setMonth(month, 0);\n\n  return day.getDate();\n};\n\nexport const getDateBoundary = (\n  value: Date,\n  modes: DatePickerColumnType[],\n  {\n    defaultMin,\n    defaultMax,\n    min,\n    max,\n  }: {\n    defaultMin: Date;\n    defaultMax: Date;\n    min?: Date;\n    max?: Date;\n  },\n) => {\n  const minDefined = isDate(min);\n  const maxDefined = isDate(max);\n  const minDateObject = toDateObject(minDefined ? min : defaultMin);\n  const maxDateObject = toDateObject(maxDefined ? max : defaultMax);\n  const valueDateObject = toDateObject(value);\n\n  // 边界值\n  const isInMinYear = valueDateObject.Y === minDateObject.Y;\n  const isInMaxYear = valueDateObject.Y === maxDateObject.Y;\n  const isInMinMonth = isInMinYear && valueDateObject.M <= minDateObject.M;\n  const isInMaxMonth = isInMaxYear && valueDateObject.M >= maxDateObject.M;\n  const isInMinDate = isInMinMonth && valueDateObject.D <= minDateObject.D;\n  const isInMaxDate = isInMaxMonth && valueDateObject.D >= maxDateObject.D;\n  const isInMinHour = isInMinDate && valueDateObject.h <= minDateObject.h;\n  const isInMaxHour = isInMaxDate && valueDateObject.h >= maxDateObject.h;\n  const isInMinMinute = isInMinHour && valueDateObject.m <= minDateObject.m;\n  const isInMaxMinute = isInMaxHour && valueDateObject.m >= maxDateObject.m;\n\n  const boundary: Record<DatePickerColumnType, [number, number]> = {\n    Y: [minDateObject.Y, maxDateObject.Y],\n    M: (() => {\n      if (modes[0] === 'M') {\n        // 从月开始选\n        // 有限制时间根据限制时间选择，没有默认所有月份都可以\n        const a = minDefined ? minDateObject.M : 0;\n        const b = maxDefined ? maxDateObject.M : 11;\n\n        // a < b\n        if (a >= b) {\n          return [0, 11];\n        }\n\n        return [a, b];\n      }\n\n      const a = isInMinYear ? minDateObject.M : 0;\n      const b = isInMaxYear ? maxDateObject.M : 11;\n\n      return [a, b];\n    })(),\n    D: (() => {\n      if (modes[0] === 'D') {\n        const a = minDefined ? minDateObject.D : 1;\n        const b = maxDefined ? maxDateObject.D : getMonthDays(valueDateObject.Y, valueDateObject.M + 1);\n\n        // a < b\n        if (a >= b) {\n          return [1, getMonthDays(valueDateObject.Y, valueDateObject.M + 1)];\n        }\n\n        return [a, b];\n      }\n\n      const a = isInMinMonth ? minDateObject.D : 1;\n      const b = isInMaxMonth ? maxDateObject.D : getMonthDays(valueDateObject.Y, valueDateObject.M + 1);\n\n      return [a, b];\n    })(),\n    h: (() => {\n      if (modes[0] === 'h') {\n        const a = minDefined ? minDateObject.h : 0;\n        const b = maxDefined ? maxDateObject.h : 23;\n\n        // a < b\n        if (a >= b) {\n          return [0, 23];\n        }\n\n        return [a, b];\n      }\n\n      const a = isInMinDate ? minDateObject.h : 0;\n      const b = isInMaxDate ? maxDateObject.h : 23;\n\n      return [a, b];\n    })(),\n    m: (() => {\n      if (modes[0] === 'm') {\n        const a = minDefined ? minDateObject.m : 0;\n        const b = maxDateObject ? maxDateObject.m : 59;\n\n        // a < b\n        if (a >= b) {\n          return [0, 59];\n        }\n\n        return [a, b];\n      }\n\n      const a = isInMinHour ? minDateObject.m : 0;\n      const b = isInMaxHour ? maxDateObject.m : 59;\n\n      return [a, b];\n    })(),\n    s: (() => {\n      if (modes[0] === 's') {\n        const a = minDefined ? minDateObject.s : 0;\n        const b = maxDateObject ? maxDateObject.s : 59;\n\n        // a < b\n        if (a >= b) {\n          return [0, 59];\n        }\n\n        return [a, b];\n      }\n\n      const a = isInMinMinute ? minDateObject.s : 0;\n      const b = isInMaxMinute ? maxDateObject.s : 59;\n\n      return [a, b];\n    })(),\n  };\n\n  return boundary;\n};\n\n/**\n * 格式化时间\n */\nexport const formatDate = (mode: DatePickerColumnMode, day: Date) => {\n  const dayDateObject = toDateObject(day);\n  const modes = serializeMode(mode.split('-') as DatePickerColumnType[]);\n  const hasKey = (k: DatePickerColumnType) => modes.includes(k);\n  const padStart = (n: number) => `${n}`.padStart(2, '0');\n  const time1 = [\n    hasKey('Y') ? dayDateObject.Y : null,\n    hasKey('M') ? padStart(dayDateObject.M + 1) : null,\n    hasKey('D') ? padStart(dayDateObject.D) : null,\n  ]\n    .filter(Boolean)\n    .join('-');\n  const time2 = [\n    hasKey('h') ? padStart(dayDateObject.h) : null,\n    hasKey('m') ? padStart(dayDateObject.m) : null,\n    hasKey('s') ? padStart(dayDateObject.s) : null,\n  ]\n    .filter(Boolean)\n    .join(':');\n\n  return [time1, time2].filter(Boolean).join(' ');\n};\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/date-picker-view/index.ts",
      "content": "import { attachPropertiesToComponent } from '../../helpers';\nimport DatePickerView from './date-picker-view';\nimport { formatDate } from './helper';\nimport useDateMinMax from './useDateMinMax';\nimport useDatePicker from './useDatePicker';\n\nexport default attachPropertiesToComponent(DatePickerView, {\n  formatDate,\n  useDateMinMax,\n  useDatePicker,\n});\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/date-picker-view/date-picker-view.tsx",
      "content": "import React, { useEffect } from 'react';\nimport type { DatePickerViewProps } from './interface';\nimport useDatePicker from './useDatePicker';\nimport { useControllableValue } from '../../hooks';\nimport PickerView from '../picker-view';\n\nconst DatePickerView: React.FC<DatePickerViewProps> = ({\n  mode = 'Y-m',\n  min,\n  max,\n  renderLabel,\n  loading,\n\n  testID,\n  ...restProps\n}) => {\n  const isControlled = 'value' in restProps;\n  const isNoDefaultValue = 'defaultValue' in restProps;\n  const [value, onChange] = useControllableValue(restProps, {\n    defaultValue: new Date(),\n  });\n  const [values, columns, onChangePicker, minDate, maxDate] = useDatePicker({\n    mode,\n    value,\n    onChange,\n    min,\n    max,\n    renderLabel,\n  });\n\n  const minDateTimestamp = minDate.getTime();\n  const maxDateTimestamp = maxDate.getTime();\n\n  useEffect(() => {\n    // 非受控的情况、并且没有默认值才去同步数据\n    // 既然有默认数据了，由外面自己负责\n    // 把数据同步到内部状态，初始化的时候默认当前时间\n    if (!isControlled && !isNoDefaultValue) {\n      let _today = new Date();\n\n      const _todayTimestamp = _today.getTime();\n\n      if (_todayTimestamp < minDateTimestamp) {\n        _today = new Date(minDateTimestamp);\n      }\n\n      if (_todayTimestamp > maxDateTimestamp) {\n        _today = new Date(maxDateTimestamp);\n      }\n\n      onChange(_today);\n    }\n  }, [isControlled, isNoDefaultValue, onChange, minDateTimestamp, maxDateTimestamp]);\n\n  return (\n    <PickerView\n      testID={testID}\n      loading={loading}\n      columns={columns}\n      value={values}\n      onChange={onChangePicker}\n    />\n  );\n};\n\nexport default DatePickerView;\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/date-picker-view/useDateMinMax.ts",
      "content": "import { useMemo } from 'react';\nimport isDate from 'lodash/isDate';\nimport { getMonthDays, serializeMode } from './helper';\nimport type { DatePickerColumnMode, DatePickerColumnType } from './interface';\n\nconst useDateMinMax = (mode: DatePickerColumnMode, min?: Date, max?: Date) => {\n  const modes = useMemo(() => serializeMode(mode.split('-') as DatePickerColumnType[]), [mode]);\n  const [defaultMinDate, defaultMaxDate] = useMemo(() => {\n    const day = new Date();\n    const currentYear = day.getFullYear();\n    const _defaultMinDate = new Date(day.setFullYear(currentYear - 10));\n    const _defaultMaxDate = new Date(day.setFullYear(currentYear + 10));\n\n    // 根据类型修正数据\n    if (!modes.includes('s')) {\n      _defaultMinDate.setSeconds(0);\n      _defaultMaxDate.setSeconds(59);\n    }\n\n    if (!modes.includes('m')) {\n      _defaultMinDate.setMinutes(0);\n      _defaultMaxDate.setMinutes(59);\n    }\n\n    if (!modes.includes('h')) {\n      _defaultMinDate.setHours(0);\n      _defaultMaxDate.setHours(23);\n    }\n\n    if (!modes.includes('D')) {\n      _defaultMinDate.setDate(1);\n      _defaultMaxDate.setDate(getMonthDays(_defaultMaxDate.getFullYear(), _defaultMaxDate.getMonth() + 1));\n    }\n\n    if (!modes.includes('M')) {\n      _defaultMinDate.setMonth(0);\n      _defaultMaxDate.setMonth(11);\n    }\n\n    return [_defaultMinDate, _defaultMaxDate];\n  }, [modes]);\n\n  return [isDate(min) ? min : defaultMinDate, isDate(max) ? max : defaultMaxDate];\n};\n\nexport default useDateMinMax;\n",
      "type": "registry:hook"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/date-picker-view/useDatePicker.ts",
      "content": "import { useMemo } from 'react';\nimport { COLUMN_SERIALIZE_TYPES, getDateBoundary, getMonthDays, serializeMode, toDateObject } from './helper';\nimport type { DatePickerColumnMode, DatePickerColumnType, RenderLabel } from './interface';\nimport useDateMinMax from './useDateMinMax';\nimport type { PickerOption, PickerValue } from '../picker-view/interface';\nimport { usePersistFn,  } from '../../hooks';\n\nexport interface UseDatePickerOption {\n  mode: DatePickerColumnMode;\n  value: Date;\n  onChange: (value: Date) => void;\n  min?: Date;\n  max?: Date;\n  renderLabel?: RenderLabel;\n}\n\ntype ColumnItem = PickerOption[];\n\ntype Columns = ColumnItem[];\n\ntype Values = number[];\n\nconst buildColumnData = (mode: DatePickerColumnType, start: number, end: number, renderLabel: RenderLabel) => {\n  const items: PickerOption[] = [];\n\n  for (let index = start; index <= end; index++) {\n    items.push({\n      value: index,\n      label: renderLabel(mode, index),\n    });\n  }\n\n  return items;\n};\n\nconst useDatePicker = ({ mode, value, onChange, min, max, renderLabel }: UseDatePickerOption) => {\n  const modes = useMemo(() => serializeMode(mode.split('-') as DatePickerColumnType[]), [mode]);\n  const [minDate, maxDate] = useDateMinMax(mode, min, max);\n  const renderLabelPersistFn: RenderLabel = usePersistFn((t, n) => {\n    if (renderLabel) {\n      return renderLabel(t, n);\n    }\n\n    switch (t) {\n      case 'Y':\n        return `${n}年`;\n      case 'M':\n        return `${n}月`;\n      case 'D':\n        return `${n}日`;\n      case 'h':\n        return `${n}时`;\n      case 'm':\n        return `${n}分`;\n      case 's':\n        return `${n}秒`;\n\n      default:\n        return `${n}`;\n    }\n  });\n  const [pickerValues, pickerColumns] = useMemo<[Values, Columns]>(() => {\n    const _columns: Columns = [];\n    const _values: Values = [];\n\n    const boundary = getDateBoundary(value, modes, {\n      defaultMin: minDate,\n      defaultMax: maxDate,\n      min,\n      max,\n    });\n    const valueDateObject = toDateObject(value);\n\n    // 根据格式化方式挑选值\n    COLUMN_SERIALIZE_TYPES.forEach((key) => {\n      const ab = boundary[key];\n      const a = key === 'M' ? ab[0] + 1 : ab[0];\n      const b = key === 'M' ? ab[1] + 1 : ab[1];\n      const v = key === 'M' ? valueDateObject[key] + 1 : valueDateObject[key];\n\n      _values.push(v);\n      _columns.push(buildColumnData(key, a, b, renderLabelPersistFn));\n    });\n\n    // 挑选值\n    const _pickerColumns: Columns = [];\n    const _pickerValues: Values = [];\n\n    modes.forEach((key) => {\n      const keyIndex = COLUMN_SERIALIZE_TYPES.findIndex((cst) => cst === key);\n\n      _pickerColumns.push(_columns[keyIndex]);\n      _pickerValues.push(_values[keyIndex]);\n    });\n\n    return [_pickerValues, _pickerColumns];\n  }, [max, maxDate, min, minDate, modes, renderLabelPersistFn, value]);\n\n  const onChangePicker = usePersistFn((v: PickerValue[]) => {\n    // console.log('values  =>>>>   ', v)\n\n    const newValue = new Date(value);\n\n    modes.forEach((key, index) => {\n      const num = v[index] as number;\n\n      switch (key) {\n        case 'Y':\n          newValue.setFullYear(num);\n\n          break;\n        case 'M': {\n          // 对 D 进行修正\n          const days = getMonthDays(newValue.getFullYear(), num);\n          const valueDays = newValue.getDate();\n\n          newValue.setMonth(num - 1, valueDays > days ? days : valueDays);\n\n          break;\n        }\n        case 'D': {\n          // 对 D 进行修正\n          const days = getMonthDays(newValue.getFullYear(), newValue.getMonth() + 1);\n\n          newValue.setDate(num > days ? days : num);\n\n          break;\n        }\n        case 'h':\n          newValue.setHours(num);\n\n          break;\n        case 'm':\n          newValue.setMinutes(num);\n\n          break;\n        case 's':\n          newValue.setSeconds(num);\n\n          break;\n        default:\n          break;\n      }\n    });\n\n    // console.log('newValue？？？？   =>   ', toDateObject(newValue))\n\n    // // 最后边界值判断\n    // const _minDate = isDate(min) ? min : defaultMinDate\n    // const _maxDate = isDate(max) ? max : defaultMaxDate\n\n    const finallyValue =\n      newValue.getTime() >= minDate.getTime() && newValue.getTime() <= maxDate.getTime()\n        ? newValue\n        : newValue.getTime() < minDate.getTime()\n          ? minDate\n          : maxDate;\n\n    // console.log('_minDate   =>   ', toDateObject(_minDate))\n    // console.log('_maxDate   =>   ', toDateObject(_maxDate))\n    // console.log('newValue   =>   ', toDateObject(newValue))\n    // console.log('_minDate  t   =>   ', _minDate.getTime())\n    // console.log('_maxDate  t   =>   ', _maxDate.getTime())\n    // console.log('newValue  t   =>   ', newValue.getTime())\n    // console.log('finallyValue   =>   ', toDateObject(finallyValue))\n    // console.log(\n    //   newValue.getTime() >= _minDate.getTime() &&\n    //     newValue.getTime() <= _maxDate.getTime(),\n    // )\n    // console.log(newValue.getTime() < _minDate.getTime())\n    // console.log('finallyValue   =>>>> ', finallyValue.toString())\n    // console.log('finallyValue   =========>>>>>>>>>>>>>>>>>>>>>>>>>')\n\n    onChange(finallyValue);\n  });\n\n  return [pickerValues, pickerColumns, onChangePicker, minDate, maxDate] as const;\n};\n\nexport default useDatePicker;\n",
      "type": "registry:hook"
    }
  ]
}