{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tree",
  "type": "registry:component",
  "title": "Example tree",
  "author": "@gabimoncha",
  "description": "Displays a button which is always red.",
  "files": [
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/tree/helper.ts",
      "content": "import { TreeOption, TreeSearchListData, TreeValue } from './interface';\n\nexport const findNodeByValue = (tree: TreeOption[], value: TreeValue): TreeOption | undefined => {\n  for (const item of tree) {\n    if (item.value === value) {\n      return item;\n    }\n\n    if (item.children) {\n      const _v = findNodeByValue(item.children, value);\n\n      if (_v) {\n        return _v;\n      }\n    }\n  }\n\n  return undefined;\n};\n\nexport const findAllChildrenValue = (tree: TreeOption[]) => {\n  const values: TreeValue[] = [];\n\n  tree.forEach((item) => {\n    values.push(item.value);\n\n    if (item.children?.length) {\n      values.push(...findAllChildrenValue(item.children));\n    }\n  });\n\n  return values;\n};\n\nexport const findParentNodeByValue = (tree: TreeOption[], value: TreeValue): TreeOption | null => {\n  for (const item of tree) {\n    if (item.children?.length) {\n      if (item.children.filter((i) => i.value === value).length) {\n        return item;\n      } else {\n        const _v = findParentNodeByValue(item.children, value);\n\n        if (_v) {\n          return _v;\n        }\n      }\n    }\n  }\n\n  return null;\n};\n\nexport const findAllParentNodeByValue = (tree: TreeOption[], value: TreeValue) => {\n  const nodes: TreeOption[] = [];\n  const doFind = (v: TreeValue) => {\n    const p = findParentNodeByValue(tree, v);\n\n    if (p) {\n      nodes.push(p);\n      doFind(p.value);\n    }\n  };\n\n  doFind(value);\n\n  return nodes;\n};\n\nexport const flattenDeepWidthChildren = (tree: TreeOption[]) => {\n  const nodes: TreeOption[] = [];\n\n  tree.forEach((item) => {\n    nodes.push(item);\n\n    if (item.children?.length) {\n      nodes.push(...flattenDeepWidthChildren(item.children));\n    }\n  });\n\n  return nodes;\n};\n\nexport const buildHighlightLabelConfig = (label: string, keyword: string): TreeSearchListData['labels'] => {\n  if (!keyword) {\n    return [];\n  }\n\n  const _reg = new RegExp(keyword, 'gi');\n  const results = [...label.matchAll(_reg)];\n\n  if (results.length) {\n    const nodes: TreeSearchListData['labels'] = [];\n\n    let pointer = 0;\n\n    results.forEach((res) => {\n      if (res.index !== pointer) {\n        nodes.push({\n          highlight: false,\n          text: label.slice(pointer, res.index),\n        });\n      }\n\n      pointer = (res.index || 0) + res[0].length;\n\n      nodes.push({\n        highlight: true,\n        text: label.slice(res.index, pointer),\n      });\n    });\n\n    if (pointer <= label.length - 1) {\n      nodes.push({\n        highlight: false,\n        text: label.slice(pointer, label.length),\n      });\n    }\n\n    return nodes;\n  }\n\n  return [];\n};\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/tree/index.ts",
      "content": "import { attachPropertiesToComponent } from '../../helpers';\nimport {\n  buildHighlightLabelConfig,\n  findAllChildrenValue,\n  findAllParentNodeByValue,\n  findNodeByValue,\n  findParentNodeByValue,\n  flattenDeepWidthChildren,\n} from './helper';\nimport Tree from './tree';\nimport { TreeMultipleMode } from './var';\n\nexport default attachPropertiesToComponent(Tree, {\n  MultipleMode: TreeMultipleMode,\n  findNodeByValue,\n  findAllChildrenValue,\n  findParentNodeByValue,\n  findAllParentNodeByValue,\n  flattenDeepWidthChildren,\n  buildHighlightLabelConfig,\n});\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/tree/interface.ts",
      "content": "import type React from 'react';\nimport type { ColorValue, TouchableOpacityProps } from 'react-native';\nimport type { TreeMultipleMode } from './var';\n\nexport type TreeValue = number | string;\n\nexport interface TreeOption {\n  /**\n   * 显示的文案\n   */\n  label: string;\n\n  /**\n   * 唯一标识\n   */\n  value: TreeValue;\n\n  /**\n   * 是否禁用\n   */\n  disabled?: boolean;\n\n  /**\n   * 自定义渲染\n   */\n  render?: (p: { label: string; disabled?: boolean; labelHighlight?: boolean; active: boolean, activeColor:ColorValue }) => React.ReactNode;\n\n  /**\n   * 自定义渲染树节点的展开/折叠图标\n   */\n  renderSwitcherIcon?: (p: {\n    color: ColorValue\n    size: number\n    // disabled?: boolean\n  }) => React.ReactNode\n\n  /**\n   * 文案是否加粗\n   */\n  bold?: boolean;\n\n  /**\n   * Switcher 图标是否旋转\n   * @default true\n   */\n  switcherIconRotatable?: boolean;\n\n  /**\n   * 展开/折叠图标是否高亮\n   * @default true\n   */\n  switcherHighlight?: boolean;\n\n  children?: TreeOption[];\n\n  activeColor?: ColorValue;\n}\n\nexport interface TreeSearchListData extends TreeOption {\n  labels: {\n    text: string;\n    highlight: boolean;\n  }[];\n}\n\nexport interface TreeItemProps extends TouchableOpacityProps {\n  /**\n   * 缩进\n   */\n  indent: number;\n\n  /**\n   * 层级，从 0 开始\n   */\n  tier: number;\n\n  /**\n   * 自定义渲染树节点的展开/折叠图标\n   */\n  switcherIcon?: React.ReactNode;\n\n  /**\n   * 展开/折叠图标是否高亮\n   * @default true\n   */\n  switcherHighlight?: boolean;\n\n  /**\n   * 是否选中、高亮\n   */\n  active: boolean;\n\n  /**\n   * 多选模式\n   */\n  multiple: boolean;\n\n  /**\n   * 文案是否加粗\n   */\n  bold?: boolean;\n\n  /**\n   * 显示的文案\n   */\n  label: string;\n\n  /**\n   * 自定义渲染\n   */\n  renderLabel?: TreeOption['render'];\n\n  /**\n   * 文字高亮\n   */\n  labelHighlight?: boolean;\n\n  /**\n   * 是否还有子节点\n   */\n  hasChildren?: boolean;\n\n  /**\n   * 选中状态颜色\n   */\n  activeColor?: ColorValue\n\n  /**\n   * 点击展开/折叠图标区域\n   */\n  onPressSwitcherIcon?: TouchableOpacityProps['onPress'];\n}\n\nexport interface TreeProps {\n  /**\n   * 支持点选多个节点\n   */\n  multiple?: boolean;\n\n  /**\n   * 多选的模式\n   * @default TreeMultipleMode.NORMAL\n   */\n  multipleMode?: TreeMultipleMode;\n\n  /**\n   * 指定当前选中的条目\n   */\n  value?: TreeValue[] | TreeValue;\n\n  /**\n   * 指定默认选中的条目\n   */\n  defaultValue?: TreeValue[] | TreeValue;\n\n  /**\n   * 选中树节点时调用此函数\n   */\n  onChange?: (\n    v: TreeValue[] | TreeValue,\n    option: TreeOption[],\n    event: {\n      checked: boolean;\n      option: TreeOption;\n    },\n  ) => void;\n\n  /**\n   * 当前的选项\n   */\n  options: TreeOption[];\n\n  /**\n   * 自定义渲染树节点的展开/折叠图标\n   */\n  renderSwitcherIcon?: TreeOption['renderSwitcherIcon'];\n\n  /**\n   * 缩进\n   * @default tree_indent\n   */\n  indent?: number;\n\n  /**\n   * 默认展开指定的树节点\n   */\n  defaultExpandedValues?: TreeValue[];\n\n  /**\n   * 默认展开所有树节点\n   * @default false\n   */\n  defaultExpandAll?: boolean;\n\n  /**\n   * 支持搜索\n   */\n  search?: boolean;\n\n  /**\n   * 自定义搜索方案\n   */\n  onSearch?: (\n    keyword: string,\n    /**\n     * 当前的选项\n     */\n    options: TreeOption[],\n  ) => TreeSearchListData[];\n\n  /**\n   * 搜索提示文案\n   */\n  placeholder?: string;\n\n  /**\n   * 最小高度\n   * @default true\n   */\n  minHeight?: boolean | number;\n\n  /**\n   * 单选的情况下再次点击选中可以取消\n   * @default false\n   */\n  cancellable?: boolean;\n\n  /**\n   * 是否可以编辑 命名与 TextInput 保持一致\n   * @default true\n   */\n  editable?: boolean;\n}\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/tree/tree-item.tsx",
      "content": "import React, { memo } from 'react';\nimport { Text, TouchableOpacity, TouchableWithoutFeedback, View } from 'react-native';\nimport type { TreeItemProps } from './interface';\nimport { cn } from '../../lib/utils';\nimport Flex from '../flex';\nimport CheckboxIcon from '../checkbox/checkbox-icon';\nimport { SuccessOutline } from '../icons';\n\nconst hitSlop = { left: 8, right: 8 };\n\nconst TreeItem: React.FC<TreeItemProps> = ({\n  tier,\n  indent,\n  switcherIcon,\n  switcherHighlight = true,\n  active,\n  multiple,\n  bold,\n  label,\n  renderLabel,\n  labelHighlight,\n  hasChildren,\n  onPressSwitcherIcon,\n  activeColor = '#4080FF',\n  ...restProps\n}) => {\n  const leftJSX = (\n    <Flex direction='row' align='center'>\n      {indent ? (\n        <View\n          className='h-[50px]'\n          style={{\n            width: tier * indent,\n          }}\n        />\n      ) : null}\n      <Flex\n        align='center'\n        justify='center'\n        className={cn('items-center justify-center mr-1', {\n          'rounded self-center bg-primary-5/20 p-1': hasChildren && switcherHighlight,\n        })}\n      >\n        {switcherIcon}\n      </Flex>\n    </Flex>\n  );\n\n  return (\n    <TouchableOpacity {...restProps} activeOpacity={restProps.activeOpacity ?? 0.8}>\n      <View className='min-h-12.5 flex-row items-center px-3'>\n        {hasChildren ? (\n          <TouchableWithoutFeedback onPress={onPressSwitcherIcon} hitSlop={hitSlop}>\n            {leftJSX}\n          </TouchableWithoutFeedback>\n        ) : (\n          leftJSX\n        )}\n\n        {renderLabel ? (\n          renderLabel({\n            label,\n            disabled: restProps.disabled,\n            labelHighlight,\n            active,\n            activeColor,\n          })\n        ) : (\n          <Text\n            className={cn('flex-1 my-[4px] text-[15px]', {\n              'text-gary-400': restProps.disabled && !hasChildren,\n              'font-bold': bold,\n              'text-primary': labelHighlight,\n            })}\n            numberOfLines={1}\n          >\n            {label}\n          </Text>\n        )}\n\n        {multiple ? (\n          <CheckboxIcon active={active} activeColor={activeColor} disabled={restProps.disabled} />\n        ) : active ? (\n          <SuccessOutline color={activeColor} />\n        ) : null}\n      </View>\n    </TouchableOpacity>\n  );\n};\n\nexport default memo(TreeItem);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/tree/tree.tsx",
      "content": "import React, { useMemo, useRef, useState } from 'react';\nimport type { ViewStyle } from 'react-native';\nimport { FlatList, TextInput as RNInput, Text, View } from 'react-native';\nimport {\n  buildHighlightLabelConfig,\n  findAllChildrenValue,\n  findAllParentNodeByValue,\n  findNodeByValue,\n  findParentNodeByValue,\n  flattenDeepWidthChildren,\n} from './helper';\nimport TreeItem from './tree-item';\nimport { TreeMultipleMode } from './var';\nimport Empty from '../empty';\nimport { TreeOption, TreeProps, TreeSearchListData, TreeValue } from './interface';\nimport { useControllableValue, usePersistFn } from '../../hooks';\nimport { getDefaultValue } from '../../helpers';\nimport Search from '../search';\nimport { cn } from '../../lib/utils';\nimport { ArrowRightOutline } from '../icons';\n\ntype ListData = {\n  tier: number;\n} & TreeOption;\n\nconst switcherIconWrapperStyle: ViewStyle = {\n  transform: [\n    {\n      rotateZ: '90deg',\n    },\n  ],\n};\n\nconst Tree: React.FC<TreeProps> = ({\n  multiple = false,\n  multipleMode = TreeMultipleMode.NORMAL,\n  options,\n  renderSwitcherIcon,\n  indent,\n  defaultExpandedValues,\n  defaultExpandAll = false,\n  search,\n  onSearch,\n  placeholder,\n  minHeight = true,\n  cancellable = false,\n  editable = true,\n  ...restProps\n}) => {\n  const [value, onChange] = useControllableValue<TreeValue | TreeValue[] | null>(restProps, {\n    defaultValue: multiple ? [] : undefined,\n  });\n\n  const getOnSearch = usePersistFn(() => {\n    return onSearch;\n  });\n  const [expandedValues, setExpandedValues] = useState(() => {\n    if (defaultExpandAll) {\n      return findAllChildrenValue(options);\n    }\n\n    const _values: TreeValue[] = [];\n    /** 查看父节点是否要追加进去 */\n    const doPushParent = (subValue: TreeValue) => {\n      const _p = findParentNodeByValue(options, subValue);\n\n      if (_p) {\n        _values.push(_p.value);\n        doPushParent(_p.value);\n      }\n    };\n\n    defaultExpandedValues?.forEach((id) => {\n      _values.push(id);\n      doPushParent(id);\n    });\n\n    return _values;\n  });\n\n  const listData = useMemo(() => {\n    const nodes: ListData[] = [];\n\n    const findVisibleItem = (treeOption: TreeOption, tier: number) => {\n      const _nodes: ListData[] = [];\n\n      if (expandedValues.indexOf(treeOption.value) > -1) {\n        treeOption.children?.forEach((item) => {\n          _nodes.push({\n            ...item,\n            tier,\n          });\n\n          _nodes.push(...findVisibleItem(item, tier + 1));\n        });\n      }\n\n      return _nodes;\n    };\n\n    options.forEach((item) => {\n      nodes.push({\n        ...item,\n        tier: 0,\n      });\n\n      nodes.push(...findVisibleItem(item, 1));\n    });\n\n    return nodes;\n  }, [options, expandedValues]);\n\n  const SearchFlatListRef = useRef<FlatList>(null);\n  const [keyword, setKeyword] = useState('');\n  const searchListData = useMemo(() => {\n    const _onSearch = getOnSearch();\n    const _options = flattenDeepWidthChildren(options);\n    const _defaultFilter = () => {\n      const nodes: TreeSearchListData[] = [];\n\n      _options.forEach((item) => {\n        const _labels = buildHighlightLabelConfig(item.label, keyword);\n\n        if (_labels.length) {\n          // 找到父级数据\n          const parentNodes = findAllParentNodeByValue(options, item.value);\n\n          if (parentNodes?.length) {\n            _labels.push({\n              highlight: false,\n              text: ` / ${parentNodes.map((pn) => pn.label).join(' / ')}`,\n            });\n          }\n\n          nodes.push({\n            ...item,\n            labels: _labels,\n          });\n        }\n      });\n\n      return nodes;\n    };\n\n    return _onSearch ? _onSearch(keyword, _options) : _defaultFilter();\n  }, [keyword, getOnSearch, options]);\n\n  const _indent = getDefaultValue(indent, 24)!;\n  const flatListStyle = useMemo<ViewStyle>(() => {\n    if (minHeight === false) {\n      return {};\n    }\n\n    if (typeof minHeight === 'number') {\n      return {\n        minHeight,\n      };\n    }\n\n    return {\n      minHeight: 200,\n    };\n  }, [minHeight]);\n\n  const onSearchKeyword = usePersistFn((t) => {\n    setKeyword(t);\n    SearchFlatListRef.current?.scrollToIndex({\n      index: 0,\n    });\n  });\n  const genOnPressItem = (item: TreeOption) => () => {\n    if (multiple) {\n      const valueTarget = value as TreeValue[];\n      const _value = valueTarget.filter((v) => v !== item.value);\n      const isInValue = _value.length !== valueTarget.length;\n\n      const onChangeMultiple = (values: TreeValue[]) => {\n        onChange(\n          values,\n          values.map((v) => findNodeByValue(options, v)),\n          {\n            checked: !isInValue,\n            option: item,\n          }\n        );\n      };\n\n      if (TreeMultipleMode.INDEPENDENT === multipleMode) {\n        // 每个节点都是独立的\n        if (isInValue) {\n          onChangeMultiple(_value);\n        } else {\n          onChangeMultiple([..._value, item.value]);\n        }\n      } else {\n        /** 所有子节点+自身节点 */\n        const _nextValues = findAllChildrenValue(item.children || []);\n\n        _nextValues.push(item.value);\n\n        if (isInValue) {\n          // 找到所有父节点\n          // 追加当前及以后的节点\n          const _ps = findAllParentNodeByValue(options, item.value)\n            .map((p) => p.value)\n            .concat(_nextValues);\n\n          // 向上查找父节点\n          onChangeMultiple(_value.filter((v) => _ps.indexOf(v) === -1));\n        } else {\n          // 先追加自身和子节点\n          _nextValues.forEach((v) => {\n            if (_value.indexOf(v) === -1) {\n              _value.push(v);\n            }\n          });\n\n          /** 查看父节点是否要追加进去 */\n          const doPushParent = (subValue: TreeValue) => {\n            const _p = findParentNodeByValue(options, subValue);\n\n            if (_p) {\n              const _pNextValues = findAllChildrenValue(_p.children || []);\n\n              // 父节点的所有子节点是否都在 _value\n              if (_pNextValues.filter((pnv) => _value.indexOf(pnv) === -1).length === 0) {\n                _value.push(_p.value);\n                doPushParent(_p.value);\n              }\n            }\n          };\n\n          doPushParent(item.value);\n\n          onChangeMultiple(_value);\n        }\n      }\n    } else {\n      const _node = findNodeByValue(options, item.value);\n\n      if (item.value !== value) {\n        onChange(item.value, [_node], {\n          checked: true,\n          option: item,\n        });\n      } else {\n        if (cancellable) {\n          onChange(null, [], {\n            checked: false,\n            option: item,\n          });\n        }\n      }\n    }\n  };\n\n  return (\n    <>\n      {search ? <Search placeholder={placeholder} onSearch={onSearchKeyword} autoSearch /> : null}\n\n      {search && keyword ? (\n        searchListData.length ? (\n          <FlatList<TreeSearchListData>\n            key='search'\n            ref={SearchFlatListRef}\n            keyboardShouldPersistTaps='handled'\n            bouncesZoom={false}\n            contentContainerStyle={flatListStyle}\n            data={searchListData}\n            keyExtractor={(item) => `${item.value}`}\n            renderItem={({ item }) => {\n              const isActive = multiple\n                ? (value as TreeValue[]).indexOf(item.value) > -1\n                : value === item.value;\n\n              return (\n                <TreeItem\n                  onPress={genOnPressItem(item)}\n                  multiple={multiple}\n                  indent={_indent}\n                  bold={item.bold}\n                  disabled={!editable || !!item.disabled}\n                  tier={0}\n                  label={item.label}\n                  active={isActive}\n                  activeColor={item.activeColor ?? '#4080FF'}\n                  renderLabel={\n                    isActive\n                      ? undefined\n                      : (p: any) => {\n                          return (\n                            <Text\n                              className={cn('mx-1 flex-1 text-sm text-gray-800', {\n                                'text-gray-500': p.disabled,\n                                'text-primary': p.active || p.labelHighlight,\n                              })}\n                              numberOfLines={1}\n                            >\n                              {item.labels.map((tObj, index) => {\n                                if (tObj.highlight) {\n                                  return (\n                                    <Text key={index} className='text-primary'>\n                                      {tObj.text}\n                                    </Text>\n                                  );\n                                }\n\n                                return <React.Fragment key={index}>{tObj.text}</React.Fragment>;\n                              })}\n                            </Text>\n                          );\n                        }\n                  }\n                />\n              );\n            }}\n          />\n        ) : (\n          <View className='h-52'>\n            <Empty full />\n          </View>\n        )\n      ) : (\n        <FlatList\n          key='list'\n          bouncesZoom={false}\n          contentContainerStyle={flatListStyle}\n          data={listData}\n          ListEmptyComponent={<Empty />}\n          keyExtractor={(item) => `${item.value}`}\n          renderItem={({ item }) => {\n            const isActive = multiple\n              ? (value as TreeValue[]).indexOf(item.value) > -1\n              : value === item.value;\n            const _renderSwitcherIcon = item.renderSwitcherIcon || renderSwitcherIcon;\n            const _onPressSwitcherIcon = () => {\n              setExpandedValues((evs) => {\n                const _evs = evs.filter((v) => v !== item.value);\n\n                if (_evs.length !== evs.length) {\n                  return _evs;\n                }\n\n                return [..._evs, item.value];\n              });\n            };\n            const _switcherIcon = item.children?.length ? (\n              _renderSwitcherIcon ? (\n                _renderSwitcherIcon({\n                  color: '#4080FF',\n                  size: 16,\n                })\n              ) : (\n                <ArrowRightOutline color='#4080FF' size={16} />\n              )\n            ) : null;\n            const _switcherIconJSX =\n              expandedValues.indexOf(item.value) > -1 && item.switcherIconRotatable !== false ? (\n                <View style={switcherIconWrapperStyle}>{_switcherIcon}</View>\n              ) : (\n                _switcherIcon\n              );\n            const _labelHighlight =\n              findAllChildrenValue(item.children || []).filter((ic) => {\n                if (multiple) {\n                  return (value as TreeValue[]).indexOf(ic) > -1;\n                } else {\n                  return ic === value;\n                }\n              }).length > 0;\n\n            return (\n              <TreeItem\n                onPress={genOnPressItem(item)}\n                switcherIcon={_switcherIconJSX}\n                switcherHighlight={item.switcherHighlight}\n                multiple={multiple}\n                indent={_indent}\n                bold={item.bold}\n                disabled={!editable || !!item.disabled}\n                tier={item.tier}\n                label={item.label}\n                active={isActive}\n                renderLabel={item.render}\n                labelHighlight={_labelHighlight}\n                hasChildren={(item.children?.length || 0) > 0}\n                onPressSwitcherIcon={_onPressSwitcherIcon}\n                activeColor={item.activeColor ?? '#4080FF'}\n              />\n            );\n          }}\n        />\n      )}\n    </>\n  );\n};\n\nexport default Tree;\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/tree/var.ts",
      "content": "export enum TreeMultipleMode {\n  /**\n   * 独立使用，子节点、父节点没有关联\n   */\n  INDEPENDENT = 'INDEPENDENT',\n\n  /**\n   * 标准的父子节点关联\n   */\n  NORMAL = 'NORMAL',\n}\n",
      "type": "registry:component"
    }
  ]
}