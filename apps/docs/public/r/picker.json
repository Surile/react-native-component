{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "picker",
  "type": "registry:component",
  "title": "Example picker",
  "author": "@gabimoncha",
  "description": "Displays a button which is always red.",
  "files": [
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/picker/picker.tsx",
      "content": "import React, { memo } from 'react';\nimport omit from 'lodash/omit';\nimport pick from 'lodash/pick';\nimport { Platform, View, Text } from 'react-native';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport type { PickerProps } from './interface';\nimport PickerView from '../picker-view';\nimport type { PickerViewProps } from '../picker-view/interface';\nimport Popup from '../popup';\nimport { cn } from '../../lib/utils';\n\nconst PICKER_VIEW_PROPS_KEYS = [\n  'value',\n  'defaultValue',\n  'columns',\n  'loading',\n  'itemHeight',\n  'visibleItemCount',\n  'onChange',\n];\n\nconst Picker: React.FC<PickerProps> = ({\n  visible,\n  title,\n  confirmButtonText,\n  cancelButtonText,\n  toolbarPosition = 'top',\n  showToolbar = true,\n  onCancel,\n  onConfirm,\n  ...restProps\n}) => {\n  const insets = useSafeAreaInsets();\n\n  const pickerViewProps = pick(restProps, PICKER_VIEW_PROPS_KEYS) as PickerViewProps;\n\n  const popupProps = omit(restProps, PICKER_VIEW_PROPS_KEYS);\n\n  const headerTitleJSX = (\n    <Popup.Header\n      showClose={false}\n      title={title}\n      leftExtra={\n        <Text\n          suppressHighlighting\n          className='text-base text-muted-foreground color-[#5E5E5E]'\n          onPress={restProps.loading ? undefined : onCancel}\n        >\n          {cancelButtonText ?? '取消'}\n        </Text>\n      }\n      rightExtra={\n        <Text\n          suppressHighlighting\n          className='text-base text-primary'\n          onPress={restProps.loading ? undefined : onConfirm}\n        >\n          {confirmButtonText ?? '确认'}\n        </Text>\n      }\n    />\n  );\n\n  return (\n    <Popup {...popupProps} visible={visible} position='bottom' round>\n      {showToolbar && toolbarPosition === 'top' ? headerTitleJSX : null}\n      <PickerView {...pickerViewProps} />\n      {showToolbar && toolbarPosition === 'bottom' ? headerTitleJSX : null}\n      <View\n        className={cn(Platform.OS !== 'ios' ? 'h-4' : 'h-0')}\n        style={{ height: insets.bottom }}\n      />\n    </Popup>\n  );\n};\n\nexport default memo(Picker);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/picker/picker-method.tsx",
      "content": "import React, { memo, useCallback, useEffect, useRef, useState } from 'react';\nimport type { PickerAction, PickerMethodProps } from './interface';\nimport Picker from './picker';\nimport { callInterceptor } from '../../helpers';\nimport { usePersistFn } from '../../hooks';\nimport { buildOptions, buildSelectedValue, getDataType } from '../picker-view/helper/picker';\nimport type { Column, PickerValue } from '../picker-view/interface';\n\ntype ValueData = { values: PickerValue[]; columns: Column[] };\n\nconst buildValue = (values: PickerValue[], columns: Column[]): ValueData => {\n  const dataType = getDataType(columns);\n  const [options] = buildOptions(dataType, columns, values);\n  const [v, o] = buildSelectedValue(values, options);\n\n  return {\n    values: v,\n    columns: o,\n  };\n};\n\nconst PickerMethod: React.FC<PickerMethodProps> = ({\n  onCancel,\n  onConfirm,\n  onPressOverlay,\n  beforeClose,\n\n  ...restProps\n}) => {\n  const [visible, setVisible] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const Value = useRef<ValueData>(buildValue(restProps.defaultValue || [], restProps.columns));\n\n  useEffect(() => {\n    setVisible(true);\n  }, []);\n\n  const onChange = useCallback((v: PickerValue[], c: Column[]) => {\n    Value.current = {\n      values: v,\n      columns: c,\n    };\n  }, []);\n\n  const doAction = usePersistFn((action: PickerAction) => {\n    setLoading(true);\n\n    callInterceptor(beforeClose, {\n      args: [action, Value.current.values, Value.current.columns],\n      done: () => {\n        switch (action) {\n          case 'cancel':\n            onCancel?.(Value.current.values, Value.current.columns);\n\n            break;\n          case 'confirm':\n            onConfirm?.(Value.current.values, Value.current.columns);\n\n            break;\n          case 'overlay':\n            onPressOverlay?.(Value.current.values, Value.current.columns);\n\n            break;\n          default:\n            break;\n        }\n\n        setLoading(false);\n        setVisible(false);\n      },\n      canceled: () => {\n        setLoading(false);\n      },\n    });\n  });\n\n  const onPressCancel = useCallback(() => {\n    doAction('cancel');\n  }, [doAction]);\n\n  const onPressConfirm = useCallback(() => {\n    doAction('confirm');\n  }, [doAction]);\n\n  const onPressPopupOverlay = useCallback(() => {\n    doAction('overlay');\n  }, [doAction]);\n\n  const onRequestClose = useCallback(() => {\n    onPressPopupOverlay();\n\n    return true;\n  }, [onPressPopupOverlay]);\n\n  return (\n    <Picker\n      {...restProps}\n      visible={visible}\n      onChange={onChange}\n      onCancel={onPressCancel}\n      onConfirm={onPressConfirm}\n      onPressOverlay={onPressPopupOverlay}\n      loading={loading}\n      onRequestClose={onRequestClose}\n    />\n  );\n};\n\nexport default memo(PickerMethod);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/picker/picker-instance.tsx",
      "content": "import React from 'react';\nimport type { PickerAction, PickerMethodProps, PickerProps } from './interface';\nimport Picker from './picker';\nimport PickerMethod from './picker-method';\nimport type { Column, PickerValue } from '../picker-view/interface';\nimport Portal from '../portal';\n\n/**\n * 选择器\n */\nexport const Instance = (opts: PickerMethodProps) => {\n  return new Promise<{\n    action: PickerAction;\n    values: PickerValue[];\n    columns: Column[];\n  }>((resolve) => {\n    const key = Portal.add(\n      <PickerMethod\n        {...opts}\n        onCancel={(v, c) => {\n          opts.onCancel?.(v, c);\n          resolve({\n            action: 'cancel',\n            values: v,\n            columns: c,\n          });\n        }}\n        onConfirm={(v, c) => {\n          opts.onConfirm?.(v, c);\n          resolve({\n            action: 'confirm',\n            values: v,\n            columns: c,\n          });\n        }}\n        onPressOverlay={(v, c) => {\n          opts.onPressOverlay?.(v, c);\n          resolve({\n            action: 'overlay',\n            values: v,\n            columns: c,\n          });\n        }}\n        onClosed={() => {\n          opts.onClosed?.();\n          Portal.remove(key);\n        }}\n      />\n    );\n  });\n};\n\nexport const Component: React.FC<PickerProps> = (props) => {\n  return (\n    <Portal>\n      <Picker {...props} />\n    </Portal>\n  );\n};\n\nexport const PickerComponent = Picker;\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/picker/interface.ts",
      "content": "import type React from 'react';\nimport type { TextProps } from 'react-native';\nimport type { Column, PickerValue, PickerViewProps } from '../picker-view/interface';\nimport type { PopupPropsCommon } from '../popup/types';\n\nexport type PickerAction = 'cancel' | 'confirm' | 'overlay';\n\nexport interface PickerProps extends PickerViewProps, PopupPropsCommon {\n  /**\n   * 顶部标题\n   */\n  title?: React.ReactNode;\n\n  /**\n   * 确认按钮文字\n   * @default '确认'\n   */\n  confirmButtonText?: string;\n\n  /**\n   * 取消按钮文字\n   * @default '取消'\n   */\n  cancelButtonText?: string;\n\n  /**\n   * 标题、工具栏位置\n   * @default 'top'\n   */\n  toolbarPosition?: 'top' | 'bottom';\n\n  /**\n   * 是否显示标题、工具栏\n   * @default true\n   */\n  showToolbar?: boolean;\n\n  /**\n   * 点击取消按钮时触发\n   */\n  onCancel?: TextProps['onPress'];\n\n  /**\n   * 点击完成按钮时触发\n   */\n  onConfirm?: TextProps['onPress'];\n}\n\nexport interface PickerMethodProps\n  extends Omit<\n    PickerProps,\n    'visible' | 'value' | 'onChange' | 'loading' | 'onCancel' | 'onConfirm' | 'onPressOverlay' | 'onRequestClose'\n  > {\n  /**\n   * 点击取消\n   */\n  onCancel?: (values: PickerValue[], columns: Column[]) => void;\n\n  /**\n   * 点击确定\n   */\n  onConfirm?: (values: PickerValue[], columns: Column[]) => void;\n\n  /**\n   * 点击遮罩层\n   */\n  onPressOverlay?: (values: PickerValue[], columns: Column[]) => void;\n\n  /**\n   * 关闭前的回调函数，返回 false 可阻止关闭，支持返回 Promise\n   */\n  beforeClose?: (action: PickerAction, values: PickerValue[], columns: Column[]) => boolean | Promise<boolean>;\n}\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/picker/index.ts",
      "content": "import { attachPropertiesToComponent } from '../../helpers';\nimport { Component, Instance, PickerComponent } from './picker-instance';\n\nexport default attachPropertiesToComponent(Instance, {\n  Component,\n  PickerComponent,\n});\n",
      "type": "registry:component"
    }
  ]
}