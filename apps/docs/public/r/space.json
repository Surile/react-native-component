{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "space",
  "type": "registry:component",
  "title": "Example space",
  "author": "@gabimoncha",
  "description": "Displays a button which is always red.",
  "files": [
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/space/index.tsx",
      "content": "import React, { memo, Children, isValidElement } from 'react';\nimport type { ViewStyle } from 'react-native';\nimport { View } from 'react-native';\n\nimport type { SpaceProps } from './interface';\nimport { getDefaultValue } from '../../helpers';\n\nconst NO_GAP = 0;\n\nconst getMarginGap = (d: boolean | number | undefined, gap: number) =>\n  d ? (typeof d === 'number' ? d : gap) : 0;\n\nconst blankSize = {\n  s: 8,\n  m: 12,\n  l: 16,\n};\n\n/**\n * Space 间距\n */\nconst Space: React.FC<SpaceProps> = ({\n  direction = 'vertical',\n  wrap = false,\n  gap = 's',\n  gapVertical,\n  gapHorizontal,\n  head,\n  tail,\n  justify,\n  align,\n  minWidth,\n  shrink = false,\n\n  style,\n  children,\n\n  ...restProps\n}) => {\n  const defaultGap: number = typeof gap === 'string' ? blankSize[gap] : gap;\n  const isVertical = direction === 'vertical';\n  const _gapVertical = getDefaultValue(gapVertical, defaultGap)!;\n  const _gapHorizontal = getDefaultValue(gapHorizontal, defaultGap)!;\n  const wrapperStyle: ViewStyle = {\n    flexDirection: isVertical ? 'column' : 'row',\n    flexWrap: wrap ? 'wrap' : 'nowrap',\n    justifyContent: justify,\n    alignItems: align,\n    ...(isVertical\n      ? {\n          paddingTop: getMarginGap(head, _gapVertical),\n          paddingBottom: getMarginGap(tail, _gapVertical),\n        }\n      : {\n          paddingLeft: getMarginGap(head, _gapHorizontal),\n          paddingRight: getMarginGap(tail, _gapHorizontal),\n        }),\n\n    ...(shrink && direction === 'horizontal'\n      ? {\n          marginBottom: -_gapVertical,\n        }\n      : {}),\n  };\n  const itemStyle: ViewStyle = {\n    marginBottom: isVertical || wrap ? _gapVertical : 0,\n    marginRight: isVertical ? 0 : _gapHorizontal,\n    minWidth,\n  };\n\n  const childArray = Children.toArray(children);\n  const count = childArray.length;\n\n  return (\n    <View {...restProps} style={[wrapperStyle, style]}>\n      {childArray.map((child, index) => {\n        let key: React.Key = index;\n        if (isValidElement(child)) {\n          key = child.key ?? index;\n        }\n        return (\n          <View\n            key={key}\n            style={[\n              itemStyle,\n              index + 1 === count\n                ? isVertical\n                  ? {\n                      marginBottom: NO_GAP,\n                    }\n                  : {\n                      marginRight: NO_GAP,\n                    }\n                : null,\n            ]}\n          >\n            {child}\n          </View>\n        );\n      })}\n    </View>\n  );\n};\n\nexport default memo(Space);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/space/interface.ts",
      "content": "import type { ViewProps, FlexStyle } from 'react-native';\n\nimport type { BlankProps } from '../blank/interface';\n\ntype SpaceDirection = 'vertical' | 'horizontal';\n\nexport interface SpaceProps extends ViewProps {\n  /**\n   * 间距方向 `'vertical' | 'horizontal'`\n   * @default 'vertical'\n   */\n  direction?: SpaceDirection;\n\n  /**\n   * 是否自动换行，仅在 horizontal 时有效\n   * @default false\n   */\n  wrap?: boolean;\n\n  /**\n   * 间距大小\n   * @default 's'\n   */\n  gap?: number | BlankProps['size'];\n\n  /**\n   * 垂直方向的间距大小\n   * @default blank_size_{s,m,l}\n   */\n  gapVertical?: number;\n\n  /**\n   * 水平方向的间距大小\n   * @default blank_size_{s,m,l}\n   */\n  gapHorizontal?: number;\n\n  /**\n   * 头部是否添加间距\n   * @default false\n   */\n  head?: boolean | number;\n\n  /**\n   * 尾部是否添加间距\n   * @default false\n   */\n  tail?: boolean | number;\n\n  /**\n   * 主轴对齐方式\n   */\n  justify?: FlexStyle['justifyContent'];\n\n  /**\n   * 交叉轴对齐方式\n   */\n  align?: FlexStyle['alignItems'];\n\n  /**\n   * 子元素最小宽\n   */\n  minWidth?: number;\n\n  /**\n   * direction 为 'horizontal' 时底边距收缩\n   * @default false\n   */\n  shrink?: boolean;\n}\n",
      "type": "registry:component"
    }
  ]
}