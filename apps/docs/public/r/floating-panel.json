{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "floating-panel",
  "type": "registry:component",
  "title": "Example floating-panel",
  "author": "@gabimoncha",
  "description": "Displays a button which is always red.",
  "files": [
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/floating-panel/index.tsx",
      "content": "import React from 'react';\n\nimport Portal from '../portal';\n\nimport FloatingPanel from './floating-panel';\nimport FloatingPanelScrollView from './floating-panel-scroll-view';\nimport type { FloatingPanelProps } from './interface';\nimport { attachPropertiesToComponent } from '../../helpers';\n\nconst FloatingPanelContainer: React.FC<FloatingPanelProps> = (props) => {\n  return (\n    <Portal>\n      <FloatingPanel {...props} />\n    </Portal>\n  );\n};\n\nconst FloatingPanelScrollViewContainer: React.FC<FloatingPanelProps> = (props) => {\n  return (\n    <Portal>\n      <FloatingPanelScrollView {...props} />\n    </Portal>\n  );\n};\n\nexport default attachPropertiesToComponent(FloatingPanelContainer, {\n  Component: FloatingPanel,\n  ScrollView: FloatingPanelScrollViewContainer,\n  ScrollViewComponent: FloatingPanelScrollView,\n});\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/floating-panel/floating-panel-scroll-view.tsx",
      "content": "import { memo, useCallback, useRef, useState } from 'react';\nimport type { ScrollViewProps } from 'react-native';\nimport { View, ScrollView } from 'react-native';\n\nimport FloatingPanel from './floating-panel';\nimport type { FloatingPanelScrollViewProps } from './interface';\n\nconst FloatingPanelScrollView: React.FC<React.PropsWithChildren<FloatingPanelScrollViewProps>> = ({\n  onAnimationEnd,\n\n  children,\n  ...restProps\n}) => {\n  const [scrollEnabled, setScrollEnabled] = useState(false);\n\n  const scrollTopRef = useRef(0);\n  const _onMoveShouldSetPanResponder = useCallback(() => {\n    if (scrollTopRef.current > 0) {\n      return false;\n    }\n  }, []);\n  const _onAnimationEnd = useCallback(\n    (opened: boolean) => {\n      setScrollEnabled(opened);\n      onAnimationEnd?.(opened);\n    },\n    [onAnimationEnd]\n  );\n  const onScroll = useCallback<Exclude<ScrollViewProps['onScroll'], undefined>>((e) => {\n    scrollTopRef.current = e.nativeEvent.contentOffset.y;\n  }, []);\n\n  return (\n    <FloatingPanel\n      {...restProps}\n      _onMoveShouldSetPanResponder={_onMoveShouldSetPanResponder}\n      onAnimationEnd={_onAnimationEnd}\n    >\n      <View className='flex-1'>\n        <ScrollView scrollEventThrottle={16} scrollEnabled={scrollEnabled} onScroll={onScroll}>\n          {children}\n        </ScrollView>\n      </View>\n    </FloatingPanel>\n  );\n};\n\nexport default memo(FloatingPanelScrollView);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/floating-panel/interface.ts",
      "content": "import type { ViewProps, PanResponderCallbacks } from 'react-native'\nimport { ExcludeUndefined } from '../../helpers/types'\n\nexport interface FloatingPanelProps extends ViewProps {\n  /**\n   * 起点\n   */\n  anchorStart?: number\n  /**\n   * 终点\n   */\n  anchorEnd?: number\n\n  // /**\n  //  * 锚点变化\n  //  */\n  // onChangeAnchor?: (anchor: number) => void\n\n  /**\n   * 标题\n   */\n  title?: React.ReactNode\n\n  /**\n   * 头部分割线\n   * @default true\n   */\n  titleDivider?: boolean\n\n  /**\n   * 滑动偏移阈值，0~1\n   * @default 0.2\n   */\n  offsetThreshold?: number\n\n  /**\n   * 层级\n   * @default 10\n   */\n  zIndex?: number\n\n  /**\n   * 是否会处理面板内容区域的手势事件，禁用后则只能拖拽头部区域\n   * @default true\n   */\n  draggingOnContent?: boolean\n\n  /**\n   * 动画结束时的回调函数\n   */\n  onAnimationEnd?: (opened: boolean) => void\n\n  /**\n   * FloatingPanel.ScrollView 扩展判断回调函数\n   */\n  _onMoveShouldSetPanResponder?: (\n    ...p: Parameters<\n      ExcludeUndefined<PanResponderCallbacks['onMoveShouldSetPanResponder']>\n    >\n  ) => boolean | undefined\n}\n\nexport interface FloatingPanelScrollViewProps\n  extends Omit<FloatingPanelProps, '_onMoveShouldSetPanResponder'> {}\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/floating-panel/floating-panel.tsx",
      "content": "import isBoolean from 'lodash/isBoolean';\nimport isNil from 'lodash/isNil';\nimport { memo, useMemo, useRef } from 'react';\nimport { View, Animated, useWindowDimensions, PanResponder } from 'react-native';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\nimport Divider from '../divider';\nimport type { FloatingPanelProps } from './interface';\nimport { getDefaultValue, renderTextLikeJSX } from '../../helpers';\nimport { cn } from '../../lib/utils';\n\nconst FloatingPanel: React.FC<React.PropsWithChildren<FloatingPanelProps>> = ({\n  anchorStart,\n  anchorEnd,\n  title,\n  titleDivider = true,\n  offsetThreshold = 0.2,\n  zIndex = 10,\n  draggingOnContent = true,\n  onAnimationEnd,\n  _onMoveShouldSetPanResponder,\n\n  children,\n  ...restProps\n}) => {\n  const insets = useSafeAreaInsets();\n  const { height } = useWindowDimensions();\n\n  const hasTitle = !isNil(title);\n\n  const _anchorStart = getDefaultValue(anchorStart, insets.bottom + 12 * 2 + (hasTitle ? 18 : 0))!;\n  const _anchorEnd = getDefaultValue(anchorEnd, height - insets.top)!;\n  const yMax = _anchorEnd - _anchorStart;\n  const yMin = 0;\n\n  const PanAnimated = useRef(new Animated.Value(yMax));\n  const Anchor = useRef(_anchorEnd - _anchorStart);\n\n  const panResponder = useMemo(() => {\n    return PanResponder.create({\n      onMoveShouldSetPanResponder: (_, gestureState) => {\n        const stop = _onMoveShouldSetPanResponder?.(_, gestureState);\n\n        if (isBoolean(stop)) {\n          return stop;\n        }\n\n        if (Anchor.current === yMin && gestureState.dy < 0) {\n          return false;\n        }\n        return true;\n      },\n      onPanResponderMove: (e, gestureState) => {\n        let newValue = Anchor.current + gestureState.dy;\n        if (newValue > yMax) {\n          newValue = yMax;\n          e.stopPropagation();\n        }\n        if (newValue < yMin) {\n          newValue = yMin;\n          e.stopPropagation();\n        }\n\n        PanAnimated.current.setValue(newValue);\n      },\n      onPanResponderRelease: (_, gestureState) => {\n        const triggered = Math.abs(gestureState.dy) >= _anchorEnd * offsetThreshold;\n        const newValue = triggered ? (gestureState.dy < 0 ? yMin : yMax) : Anchor.current;\n\n        Animated.timing(PanAnimated.current, {\n          toValue: newValue, // 设置动画的属性值\n          useNativeDriver: true,\n          duration: 200,\n        }).start(({ finished }) => {\n          if (finished) {\n            Anchor.current = newValue;\n            onAnimationEnd?.(newValue === yMin);\n          }\n        });\n      },\n    });\n  }, [_anchorEnd, _onMoveShouldSetPanResponder, offsetThreshold, onAnimationEnd, yMax]);\n\n  return (\n    <Animated.View\n      {...restProps}\n      {...(draggingOnContent ? panResponder.panHandlers : undefined)}\n      className={cn(\n        'rounded-tl-2xl rounded-tr-2xl bg-white absolute left-0 right-0 bottom-0 overflow-hidden',\n        restProps.className\n      )}\n      style={[\n        {\n          zIndex,\n          height: _anchorEnd,\n          transform: [\n            {\n              translateY: PanAnimated.current,\n            },\n          ],\n        },\n        restProps.style,\n      ]}\n    >\n      <View className='px-3' {...(!draggingOnContent ? panResponder.panHandlers : undefined)}>\n        {renderTextLikeJSX(title, cn('text-4xl'))}\n        <View className='absolute w-6 h-1 bg-[#6F6F6F] rounded-sm top-[10px] left-1/2 -ml-3' />\n      </View>\n      {titleDivider ? <Divider /> : null}\n      {children}\n    </Animated.View>\n  );\n};\n\nexport default memo(FloatingPanel);\n",
      "type": "registry:component"
    }
  ]
}