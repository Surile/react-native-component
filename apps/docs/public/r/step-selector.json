{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "step-selector",
  "type": "registry:component",
  "title": "Example step-selector",
  "author": "@gabimoncha",
  "description": "Displays a button which is always red.",
  "files": [
    {
      "path": "./node_modules/@rnr/example-library/src/components/step-selector/step-selector.tsx",
      "content": "import groupBy from 'lodash/groupBy';\nimport isNil from 'lodash/isNil';\nimport omit from 'lodash/omit';\nimport React, { useMemo, useEffect, memo, useRef, useCallback } from 'react';\nimport { View, Text, ScrollView } from 'react-native';\n\nimport Cell from '../cell/cell';\nimport { useControllableValue, usePersistFn, useSafeHeight } from '../../hooks';\nimport useState from '../../hooks/useStateUpdate';\nimport Loading from '../loading';\nimport Popup from '../popup/popup';\nimport PopupHeader from '../popup/popup-header';\n\nimport type { StepSelectorProps, OptionData, RequestResponseData } from './interface';\nimport StepSelectorLine from './line';\nimport { SuccessOutline } from '../icons';\nimport { cn } from '../../lib/utils';\n\ntype LocalState<T> = {\n  index: number;\n  selected: OptionData<T>[];\n  loading: boolean;\n  responseData: RequestResponseData<T>[];\n};\n\nconst defaultLoading = <Loading vertical />;\n\nfunction StepSelector<T = number>({\n  title,\n  safeAreaInsetTop,\n  round = true,\n  onPressClose,\n  request,\n  loading = defaultLoading,\n\n  ...resetProps\n}: StepSelectorProps<T>) {\n  const safeHeight = useSafeHeight({ top: safeAreaInsetTop });\n\n  const requestPersistFn = usePersistFn(request);\n  const ScrollViewRef = useRef<ScrollView>(null);\n  const [value, onChange] = useControllableValue<T[]>(resetProps, {\n    defaultValue: [],\n  });\n  const [state, setState] = useState<LocalState<T>>({\n    index: 0,\n    selected: [],\n    loading: false,\n    responseData: [],\n  });\n\n  const responseDataRef = useRef<Record<string, RequestResponseData<T>>>({});\n  const onPressRef = useRef(false);\n\n  const fetchOption = useCallback(\n    async (parentId: T, index: number): Promise<RequestResponseData<T>> => {\n      const c = responseDataRef.current[`${parentId}`];\n\n      if (c) {\n        return c;\n      }\n\n      // 请求\n      const data = await requestPersistFn(parentId, index);\n\n      responseDataRef.current[`${parentId}`] = data;\n\n      return data;\n    },\n    [requestPersistFn]\n  );\n\n  const optionScrollToTop = useCallback(() => {\n    ScrollViewRef.current?.scrollTo({\n      x: 0,\n      y: 0,\n      animated: false,\n    });\n  }, []);\n\n  useEffect(() => {\n    // 构建已选的数据\n    if (resetProps.visible) {\n      setState({\n        loading: true,\n      });\n\n      const _value = [...value, null];\n\n      Promise.all(\n        _value.map((_, index) => {\n          return fetchOption(value[index - 1], index);\n        })\n      ).then((datas) => {\n        const isEnd = !datas[datas.length - 1].options.length;\n        const __value = isEnd ? [...value] : _value;\n        const selected = __value\n          .map((v, index) => {\n            const opts = datas[index].options;\n            // eslint-disable-next-line max-nested-callbacks\n            const vIndex = opts.findIndex((op) => op.value === v);\n            return opts[vIndex];\n          })\n          .filter((v) => !isNil(v));\n\n        setState({\n          loading: false,\n          index: __value.length - 1,\n          responseData: datas,\n          selected: selected,\n        });\n\n        if (datas[datas.length - 1].options.length) {\n          optionScrollToTop();\n        }\n\n        if (isEnd && onPressRef.current) {\n          onPressRef.current = false;\n          onChange(value, selected, true);\n        }\n      });\n    }\n  }, [resetProps.visible, fetchOption, value, optionScrollToTop, onChange]);\n\n  const { placeholder, options, groupOption } = useMemo(() => {\n    const d = state.responseData[state.index] || {\n      options: [],\n      placeholder: '',\n    };\n\n    const _groupOption = groupBy(d.options, (item) => item.index);\n\n    return {\n      placeholder: d.placeholder,\n      options: d.options,\n      groupOption: Object.keys(_groupOption)\n        .sort()\n        .map((key) => {\n          return _groupOption[key];\n        }),\n    };\n  }, [state.index, state.responseData]);\n\n  return (\n    <Popup\n      {...omit(resetProps, ['value', 'defaultValue', 'onChange'])}\n      position='bottom'\n      round={round}\n      safeAreaInsetBottom\n    >\n      <View style={{ height: safeHeight }}>\n        <PopupHeader title={title ?? '请选择'} onClose={onPressClose} />\n\n        {state.selected.map((item, index) => {\n          return (\n            <Cell\n              innerClassName='py-0'\n              key={`${item?.value}`}\n              title={item?.label || state.responseData[index].placeholder}\n              titleExtra={\n                <StepSelectorLine\n                  index={index}\n                  total={state.selected.length}\n                  active={!!item?.label}\n                />\n              }\n              titleTextClassName={cn('py-3', {\n                'text-primary-5': index === state.index && item?.label,\n              })}\n              isLink\n              disabled={state.loading}\n              divider={index === state.selected.length - 1}\n              onPress={() => {\n                setState({\n                  index,\n                });\n                optionScrollToTop();\n              }}\n            />\n          );\n        })}\n\n        {options.length && placeholder ? (\n          <Cell titleTextClassName='font-bold' title={placeholder} divider={false} />\n        ) : null}\n\n        {state.loading && value.length === 0 ? loading : null}\n\n        <ScrollView bounces={false} ref={ScrollViewRef}>\n          {groupOption.map((group) => {\n            return group.map((item, itemIndex) => {\n              const selected = state.selected[state.index];\n              const isActive = item.value === selected?.value;\n\n              return (\n                <Cell\n                  key={`${item.value}`}\n                  disabled={state.loading}\n                  titleExtra={\n                    <Text className='text-gray-600 w-6 text-2xl'>\n                      {itemIndex === 0 ? item.index : null}\n                    </Text>\n                  }\n                  title={item.label}\n                  titleTextClassName={cn({\n                    'text-primary-5': isActive,\n                  })}\n                  valueExtra={isActive ? <SuccessOutline color='#4080FF' /> : null}\n                  divider={false}\n                  onPress={() => {\n                    // 根据当前的 index 处理数据\n                    const sliceEnd = state.index;\n                    const newValue = value.slice(0, sliceEnd);\n\n                    const option = newValue.map((v, index) => {\n                      const opts = state.responseData[index].options;\n                      // eslint-disable-next-line max-nested-callbacks\n                      const vIndex = opts.findIndex((op) => op.value === v);\n                      return opts[vIndex];\n                    });\n\n                    onChange([...newValue, item.value], [...option, item]);\n\n                    onPressRef.current = true;\n                  }}\n                />\n              );\n            });\n          })}\n        </ScrollView>\n      </View>\n    </Popup>\n  );\n}\n\nexport default memo(StepSelector) as <T = number>(p: StepSelectorProps<T>) => React.ReactElement;\n",
      "type": "registry:component"
    }
  ]
}