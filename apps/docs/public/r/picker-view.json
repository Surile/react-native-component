{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "picker-view",
  "type": "registry:component",
  "title": "Example picker-view",
  "author": "@gabimoncha",
  "description": "Displays a button which is always red.",
  "registryDependencies": [
    "https://react-native-component-docs.vercel.app/r/hooks.json",
    "https://react-native-component-docs.vercel.app/r/helpers.json",
    "https://react-native-component-docs.vercel.app/r/loading.json",
    "https://react-native-component-docs.vercel.app/r/divider.json"
  ],
  "files": [
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/picker-view/picker-view.tsx",
      "content": "import React, { memo, useEffect, useMemo, useRef, useState } from 'react';\nimport { isEmpty } from 'lodash';\nimport isNil from 'lodash/isNil';\nimport { StyleProp, View, ViewStyle } from 'react-native';\nimport {\n  buildOptions,\n  buildSelectedValue,\n  findDefaultValue,\n  findNextAllColumns,\n  getDataType,\n} from './helper/picker';\nimport type { PickerOption, PickerValue, PickerViewProps } from './interface';\nimport PickerColumn from './picker-view-column';\nimport { useControllableValue } from '../../hooks';\nimport Loading from '../loading';\nimport Divider from '../divider';\n\nconst getVisibleItemCount = (n: number) => {\n  if (n % 2 === 0) {\n    return n + 1;\n  }\n\n  return n;\n};\n\n/**\n * 选择器视图\n */\nconst PickerView: React.FC<PickerViewProps> = ({\n  visibleItemCount = 5,\n  loading = false,\n  columns,\n  itemHeight = 50,\n  testID,\n  ...restProps\n}) => {\n  const _visibleItemCount = getVisibleItemCount(visibleItemCount);\n  /** 选项的高度 */\n  const columnsHeight = _visibleItemCount * itemHeight;\n  /** 居中选中的偏移量 */\n  const markMargin = itemHeight / 2;\n\n  /**\n   * 数据类型\n   * @description cascade 联级选择，multiple 多列选择，single 单列选择\n   */\n  const dataType = useMemo(() => getDataType(columns), [columns]);\n  const isControlled = 'value' in restProps;\n  const isNoDefaultValue =\n    isNil(restProps.defaultValue) ||\n    isEmpty(restProps.defaultValue) ||\n    restProps.defaultValue.every((val) => val === '');\n\n  const [value, onChange] = useControllableValue<PickerValue[]>(restProps, {\n    defaultValue: [],\n  });\n  const [options, setOptions] = useState<PickerOption[][]>([]);\n  const ColumnDefaultValues = useRef<PickerValue[]>([]);\n\n  // 初始化数据\n  useEffect(() => {\n    if (dataType !== 'cascade') {\n      const [_options, defaultValues] = buildOptions(dataType, columns);\n\n      ColumnDefaultValues.current = defaultValues;\n      setOptions(_options);\n\n      // 非受控的情况、并且没有默认值才去同步数据\n      // 既然有默认数据了，由外面自己负责\n      // 把数据同步到内部状态，初始化的时候看起来是选中默认数据或第一个数据的样子\n\n      if (!isControlled && isNoDefaultValue) {\n        const [v, o] = buildSelectedValue(defaultValues, _options);\n\n        onChange(v, o);\n      }\n    }\n  }, [columns, dataType, onChange, isControlled, isNoDefaultValue]);\n\n  // 联级依赖 value 单独处理\n  useEffect(() => {\n    if (dataType === 'cascade') {\n      const [_options, , _values] = buildOptions(dataType, columns, value);\n      const [v, o] = buildSelectedValue(_values, _options);\n\n      setOptions(_options);\n\n      // 当\n      if (value !== _values) {\n        onChange(v, o);\n      }\n    }\n  }, [columns, value, dataType, onChange]);\n\n  const bodyStyle: ViewStyle = {\n    height: columnsHeight,\n    backgroundColor: 'white',\n    flexDirection: 'row',\n    overflow: 'hidden',\n  };\n\n  console.log('columnsHeight', columnsHeight);\n\n  const maskTopStyles: StyleProp<ViewStyle> = [\n    {\n      top: 0,\n      bottom: '50%',\n      flexDirection: 'column-reverse',\n      transform: [\n        {\n          translateY: -markMargin,\n        },\n      ],\n    },\n  ];\n\n  const maskBottomStyles: StyleProp<ViewStyle> = [\n    {\n      top: '50%',\n      bottom: 0,\n      transform: [\n        {\n          translateY: markMargin,\n        },\n      ],\n    },\n  ];\n\n  return (\n    <View testID={testID} className='overflow-hidden bg-white'>\n      {loading ? (\n        <View className='absolute inset-0 z-[2] size-full items-center justify-center bg-white opacity-80'>\n          <Loading />\n        </View>\n      ) : null}\n\n      <View style={bodyStyle}>\n        <View\n          className='absolute inset-x-0 z-[3] bg-white opacity-80'\n          style={maskTopStyles}\n          pointerEvents='none'\n        >\n          <Divider />\n        </View>\n\n        <View\n          className='absolute inset-x-0 z-[3] bg-white opacity-80'\n          style={maskBottomStyles}\n          pointerEvents='none'\n        >\n          <Divider />\n        </View>\n\n        {options.map((optionItem, optionIndex) => {\n          const _value = (() => {\n            if (!isNil(value[optionIndex])) {\n              return value[optionIndex];\n            }\n\n            // 默认值\n            // 非受控的情况才去同步数据\n            // 并且没有默认值\n            if (!isControlled && isNoDefaultValue) {\n              if (dataType === 'multiple') {\n                return ColumnDefaultValues.current[optionIndex];\n              }\n\n              // 真的没有就默认第一个选项\n              return findDefaultValue(options[optionIndex][0]?.value, optionItem)!;\n            }\n\n            return undefined;\n          })();\n\n          return (\n            <PickerColumn\n              itemHeight={itemHeight}\n              key={optionIndex}\n              visibleItemCount={_visibleItemCount}\n              options={optionItem}\n              value={_value}\n              onChange={(column) => {\n                switch (dataType) {\n                  // 联级选择\n                  // 如果是 cascade 需要重置选项\n                  case 'cascade': {\n                    const nextAll = findNextAllColumns(column?.children || []);\n                    const _options = options.slice(0, optionIndex + 1).concat(nextAll.options);\n                    const values = value\n                      .slice(0, optionIndex)\n                      .concat(column?.value)\n                      .concat(nextAll.values);\n\n                    const [v, o] = buildSelectedValue(values, _options);\n\n                    onChange(v, o);\n\n                    break;\n                  }\n\n                  // 多选\n                  case 'multiple': {\n                    const newValues = value.concat([]);\n\n                    // 先从默认数据中拼凑好数据\n                    ColumnDefaultValues.current.forEach((cdv, cdvIndex) => {\n                      if (isNil(newValues[cdvIndex])) {\n                        newValues[cdvIndex] = cdv;\n                      }\n                    });\n\n                    newValues[optionIndex] = column.value;\n\n                    const [v, o] = buildSelectedValue(newValues, options);\n\n                    onChange(v, o);\n\n                    break;\n                  }\n\n                  // 单选\n                  default: {\n                    const columnsIndex = columns.findIndex(\n                      (c) => (c as PickerOption).value === column.value\n                    );\n\n                    onChange([column?.value], [columns[columnsIndex]]);\n\n                    break;\n                  }\n                }\n              }}\n            />\n          );\n        })}\n      </View>\n    </View>\n  );\n};\n\nexport default memo(PickerView);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/picker-view/helper/column.ts",
      "content": "import type { PickerOption } from '../interface';\n\n/**\n * 按照某个方向找到可用选项的下标\n */\nconst findAvailableOptionsIndex = (options: PickerOption[], start: number, end: number) => {\n  const isNext = end - start >= 0;\n\n  for (let iii = start; isNext ? iii <= end : iii >= end; iii += isNext ? 1 : -1) {\n    const item = options[iii];\n\n    if (!item.disabled) {\n      return iii;\n    }\n  }\n\n  return -1;\n};\n\nexport const findUsableOptionIndex = (\n  options: PickerOption[],\n  /** 向下查找还是向上 */\n  next: boolean,\n  /** 起点下标 */\n  index: number,\n  /** 是否可以翻转查找 */\n  reverse = true,\n) => {\n  const maxIndex = options.length - 1;\n\n  // 两端的情况不能反转查找\n  if (reverse && (index === 0 || index === maxIndex)) {\n    reverse = false;\n  }\n\n  // 顶端不能继续向上找\n  if (index === 0 && !next) {\n    next = true;\n  }\n\n  // 末端不能继续向下找\n  if (index === maxIndex && next) {\n    next = false;\n  }\n\n  const getEnd = (cNext: boolean) => {\n    return cNext ? maxIndex : 0;\n  };\n\n  // 以当前为起点向某个方向找\n  let nIndex = findAvailableOptionsIndex(options, index, getEnd(next));\n\n  if (nIndex === -1 && reverse) {\n    nIndex = findAvailableOptionsIndex(options, index, getEnd(!next));\n  }\n\n  return nIndex;\n};\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/picker-view/helper/picker.ts",
      "content": "import isArray from 'lodash/isArray';\nimport type {\n  Column,\n  PickerOption,\n  PickerOptionCascade,\n  PickerOptionMultiple,\n  PickerOptionMultipleWidthDefaultValue,\n  PickerOptionType,\n  PickerValue,\n} from '../interface';\n\n/**\n * 获取当前选项是什么数据\n * @description cascade 联级选择，multiple 多列选择，single 单列选择\n */\nexport const getDataType = (columns: Column[]): PickerOptionType => {\n  // eslint-disable-next-line prefer-destructuring\n  const firstColumn = columns[0];\n\n  if (firstColumn) {\n    if ('children' in firstColumn) {\n      return 'cascade';\n    }\n\n    if ('options' in firstColumn || isArray(firstColumn as PickerOption[])) {\n      return 'multiple';\n    }\n  }\n\n  return 'single';\n};\n\nexport const findDefaultValue = (value: PickerValue, options: PickerOption[]) => {\n  // value 是否在 options 内\n  const valueIndex = options.findIndex((item) => item.value === value);\n\n  if (valueIndex < 0 || options[valueIndex].disabled) {\n    // 重新找一个\n    const index = options.findIndex((item) => !item.disabled);\n\n    if (index < 0) {\n      return null;\n    }\n\n    return options[index].value;\n  }\n\n  return value;\n};\n\n/** 把联级选择的所有子级找到 */\nexport const findNextAllColumns = (columns: PickerOptionCascade[]) => {\n  const options: PickerOption[][] = [];\n\n  console.log('🚀 ~ findNextAllColumns ~ options:', options);\n\n  const values: PickerValue[] = [];\n\n  console.log('🚀 ~ findNextAllColumns ~ values:', values);\n\n  const findNext = (c: PickerOptionCascade[]) => {\n    if (c.length) {\n      options.push(c);\n      values.push(c[0].value);\n\n      const cc = c[0].children || [];\n\n      findNext(cc);\n    }\n  };\n\n  findNext(columns);\n\n  return {\n    options,\n    values,\n  };\n};\n\n/** 通过已有值找到联级选择的所有子级找到 */\nexport const findAllColumnsByValues = (columns: PickerOptionCascade[], values: PickerValue[]) => {\n  const options: PickerOption[][] = [];\n\n  // TODO 补全候选项还是不需要管\n\n  let currentColumn = columns;\n\n  values.forEach((value) => {\n    options.push(currentColumn);\n\n    const nextIndex = currentColumn.findIndex((item) => item.value === value);\n\n    currentColumn = currentColumn[nextIndex]?.children || [];\n  });\n\n  return options;\n};\n\n/** 构建选项 */\nexport const buildOptions = (\n  dataType: PickerOptionType,\n  columns: Column[],\n  values?: PickerValue[],\n): [PickerOption[][], PickerValue[], PickerValue[]] => {\n  switch (dataType) {\n    case 'cascade': {\n      if (!values?.length) {\n        const data = findNextAllColumns(columns as PickerOptionCascade[]);\n\n        return [data.options, [], data.values];\n      }\n\n      return [findAllColumnsByValues(columns as PickerOptionCascade[], values), [], values];\n    }\n\n    case 'multiple': {\n      const mixOptions: PickerOption[][] = [];\n      const defaultValues: PickerValue[] = [];\n\n      (columns as PickerOptionMultiple[]).forEach((item) => {\n        const isOption = isArray(item as PickerOption[]);\n\n        // 默认值需要检验它是否合法\n        if (isOption) {\n          const option = item as PickerOption[];\n\n          mixOptions.push(option);\n          defaultValues.push(findDefaultValue(option[0].value, option)!);\n        } else {\n          const { options: _options, defaultValue: _defaultValue } = item as PickerOptionMultipleWidthDefaultValue;\n\n          mixOptions.push(_options);\n          defaultValues.push(findDefaultValue(_defaultValue!, _options)!);\n        }\n      });\n\n      return [mixOptions, defaultValues, []];\n    }\n\n    default: {\n      const options = [columns as PickerOption[]];\n\n      // eslint-disable-next-line prefer-destructuring\n      const [firstColumn] = options[0];\n      const defaultValues = [firstColumn?.value];\n\n      return [options, defaultValues, []];\n    }\n  }\n};\n\n/** 构建选中的值 */\nexport const buildSelectedValue = (values: PickerValue[], options: PickerOption[][]): [PickerValue[], Column[]] => {\n  const selectedColumns = values.map((v, index) => {\n    const vIndex = options[index].findIndex((o) => o.value === v);\n\n    return options[index][vIndex];\n  });\n\n  return [values, selectedColumns];\n};\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/picker-view/index.ts",
      "content": "import PickerView from './picker-view';\n\nexport default PickerView;\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/picker-view/interface.ts",
      "content": "import type { ViewProps } from 'react-native';\n\nexport type PickerOptionType = 'cascade' | 'multiple' | 'single';\n\nexport type PickerValue = string | number;\n\n/** 单列选择 */\nexport type PickerOption = {\n  value: PickerValue;\n  label: PickerValue;\n  disabled?: boolean;\n  // for custom filed names\n  [key: string]: any;\n};\n\nexport type PickerOptionMultipleWidthDefaultValue = {\n  defaultValue?: PickerValue;\n  options: PickerOption[];\n};\n\n/** 多列选择 */\nexport type PickerOptionMultiple = PickerOptionMultipleWidthDefaultValue | PickerOption[];\n\n/** 联级选择 */\nexport type PickerOptionCascade = PickerOption & {\n  children?: PickerOptionCascade[];\n  // for custom filed names\n  [key: string]: any;\n};\n\nexport type Column = PickerOption | PickerOptionMultiple | PickerOptionCascade;\n\nexport interface PickerViewProps extends Pick<ViewProps, 'testID'> {\n  value?: PickerValue[];\n\n  defaultValue?: PickerValue[];\n\n  /**\n   * 变化时的回调函数\n   */\n  onChange?: (values: PickerValue[], options: Column[]) => void;\n\n  /**\n   * 选项数组，配置每一列显示的数据\n   */\n  columns: Column[];\n\n  /**\n   * 是否显示加载状态\n   * @default false\n   */\n  loading?: boolean;\n\n  /**\n   * 选项高度\n   * @default 50\n   */\n  itemHeight?: number;\n\n  /**\n   * 可见的选项个数，奇数\n   * @default 5\n   */\n  visibleItemCount?: number;\n}\n\nexport interface PickerViewColumnProps {\n  /**\n   * 选项高度\n   */\n  itemHeight: number;\n\n  /**\n   * 选项\n   */\n  options: PickerOption[];\n\n  /**\n   * 当前值\n   */\n  value?: PickerValue;\n\n  /**\n   * 可见的选项个数\n   */\n  visibleItemCount: number;\n\n  /**\n   * 当值变化的时候\n   */\n  onChange?: (v: PickerOption) => void;\n}\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/picker-view/picker-view-column.tsx",
      "content": "import React, { memo, useEffect, useMemo, useRef } from 'react';\nimport type { FlatListProps } from 'react-native';\nimport { FlatList, Text, View } from 'react-native';\nimport { findUsableOptionIndex } from './helper/column';\nimport type { PickerViewColumnProps } from './interface';\nimport { usePersistFn } from '../../hooks';\nimport { ExcludeUndefined } from '../../helpers/types';\nimport { cn } from '../../lib/utils';\n\nconst getSelectedIndex = (n: number) => (n < 0 ? 0 : n);\n\n/**\n * 选择器 列\n */\nconst PickerViewColumn: React.FC<PickerViewColumnProps> = ({\n  itemHeight,\n  visibleItemCount,\n  options,\n  value,\n  onChange,\n}) => {\n  const flatListRef = useRef<FlatList>(null);\n  const LastTop = useRef(0);\n  const paddedOptions = useMemo(() => {\n    const array = [...options];\n\n    for (let i = 0; i < (visibleItemCount - 1) / 2; i++) {\n      array.unshift({\n        value: '',\n        label: '',\n      });\n      array.push({\n        value: '',\n        label: '',\n      });\n    }\n\n    return array;\n  }, [options, visibleItemCount]);\n  const offsets = useMemo(\n    () => [...Array(paddedOptions.length)].map((x, i) => i * itemHeight),\n    [paddedOptions, itemHeight]\n  );\n\n  const selectedIndex = getSelectedIndex(options.findIndex((item) => item?.value === value));\n\n  useEffect(() => {\n    flatListRef.current?.scrollToIndex({\n      index: selectedIndex,\n      animated: false,\n    });\n  }, [selectedIndex]);\n\n  const onMomentumScrollEnd = usePersistFn<\n    ExcludeUndefined<FlatListProps<any>['onMomentumScrollEnd']>\n  >((event) => {\n    const offsetY = Math.min(\n      itemHeight * (options.length - 1),\n      Math.max(event.nativeEvent.contentOffset.y, 0)\n    );\n\n    let index = Math.floor(Math.floor(offsetY) / itemHeight);\n\n    const last = Math.floor(offsetY % itemHeight);\n\n    if (last > itemHeight / 2) {\n      index++;\n    }\n\n    const isToNext = offsetY > LastTop.current;\n\n    if (options[index]?.disabled) {\n      index = findUsableOptionIndex(options, isToNext, index);\n    }\n\n    LastTop.current = offsetY;\n\n    const selectOption = options[index];\n\n    if (selectOption?.value !== value) {\n      onChange?.(selectOption);\n    }\n  });\n\n  return (\n    <View className='flex-1'>\n      <FlatList\n        // 当 options 刷新时重置组件，scrollToIndex 并不能完全可靠，借助 showsVerticalScrollIndicator 初始化视图\n        key={paddedOptions.map((item) => item?.value).join('_')}\n        ref={flatListRef}\n        showsVerticalScrollIndicator={false}\n        snapToOffsets={offsets}\n        onMomentumScrollEnd={onMomentumScrollEnd}\n        initialScrollIndex={selectedIndex}\n        getItemLayout={(_, index) => ({\n          length: itemHeight,\n          offset: itemHeight * index,\n          index,\n        })}\n        decelerationRate='fast'\n        data={paddedOptions}\n        keyExtractor={(_, index) => index.toString()}\n        renderItem={({ item }) => {\n          return (\n            <Text\n              key={item?.value}\n              className={cn(\n                'text-sm text-center native:text-base text-muted-foreground',\n                item?.disabled ? 'text-muted-foreground' : 'text-foreground'\n              )}\n              style={{\n                height: itemHeight,\n                lineHeight: itemHeight,\n              }}\n              numberOfLines={2}\n            >\n              {item?.label}\n            </Text>\n          );\n        }}\n      />\n    </View>\n  );\n};\n\nexport default memo(PickerViewColumn);\n",
      "type": "registry:component"
    }
  ]
}