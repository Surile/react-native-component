{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "picker-view",
  "type": "registry:component",
  "title": "Example picker-view",
  "author": "@gabimoncha",
  "description": "Displays a button which is always red.",
  "files": [
    {
      "path": "./node_modules/@rnr/example-library/src/components/picker-view/picker-view.tsx",
      "content": "import React, { memo, useEffect, useMemo, useRef, useState } from 'react';\nimport { isEmpty } from 'lodash';\nimport isNil from 'lodash/isNil';\nimport { StyleProp, View, ViewStyle } from 'react-native';\nimport {\n  buildOptions,\n  buildSelectedValue,\n  findDefaultValue,\n  findNextAllColumns,\n  getDataType,\n} from './helper/picker';\nimport type { PickerOption, PickerValue, PickerViewProps } from './interface';\nimport PickerColumn from './picker-view-column';\nimport { useControllableValue } from '../../hooks';\nimport Loading from '../loading';\nimport Divider from '../divider';\n\nconst getVisibleItemCount = (n: number) => {\n  if (n % 2 === 0) {\n    return n + 1;\n  }\n\n  return n;\n};\n\n/**\n * 选择器视图\n */\nconst PickerView: React.FC<PickerViewProps> = ({\n  visibleItemCount = 5,\n  loading = false,\n  columns,\n  itemHeight = 50,\n  testID,\n  ...restProps\n}) => {\n  const _visibleItemCount = getVisibleItemCount(visibleItemCount);\n  /** 选项的高度 */\n  const columnsHeight = _visibleItemCount * itemHeight;\n  /** 居中选中的偏移量 */\n  const markMargin = itemHeight / 2;\n\n  /**\n   * 数据类型\n   * @description cascade 联级选择，multiple 多列选择，single 单列选择\n   */\n  const dataType = useMemo(() => getDataType(columns), [columns]);\n  const isControlled = 'value' in restProps;\n  const isNoDefaultValue =\n    isNil(restProps.defaultValue) ||\n    isEmpty(restProps.defaultValue) ||\n    restProps.defaultValue.every((val) => val === '');\n\n  const [value, onChange] = useControllableValue<PickerValue[]>(restProps, {\n    defaultValue: [],\n  });\n  const [options, setOptions] = useState<PickerOption[][]>([]);\n  const ColumnDefaultValues = useRef<PickerValue[]>([]);\n\n  // 初始化数据\n  useEffect(() => {\n    if (dataType !== 'cascade') {\n      const [_options, defaultValues] = buildOptions(dataType, columns);\n\n      ColumnDefaultValues.current = defaultValues;\n      setOptions(_options);\n\n      // 非受控的情况、并且没有默认值才去同步数据\n      // 既然有默认数据了，由外面自己负责\n      // 把数据同步到内部状态，初始化的时候看起来是选中默认数据或第一个数据的样子\n\n      if (!isControlled && isNoDefaultValue) {\n        const [v, o] = buildSelectedValue(defaultValues, _options);\n\n        onChange(v, o);\n      }\n    }\n  }, [columns, dataType, onChange, isControlled, isNoDefaultValue]);\n\n  // 联级依赖 value 单独处理\n  useEffect(() => {\n    if (dataType === 'cascade') {\n      const [_options, , _values] = buildOptions(dataType, columns, value);\n      const [v, o] = buildSelectedValue(_values, _options);\n\n      setOptions(_options);\n\n      // 当\n      if (value !== _values) {\n        onChange(v, o);\n      }\n    }\n  }, [columns, value, dataType, onChange]);\n\n  const bodyStyle: ViewStyle = {\n    height: columnsHeight,\n    backgroundColor: 'white',\n    flexDirection: 'row',\n    overflow: 'hidden',\n  };\n\n  console.log('columnsHeight', columnsHeight);\n\n  const maskTopStyles: StyleProp<ViewStyle> = [\n    {\n      top: 0,\n      bottom: '50%',\n      flexDirection: 'column-reverse',\n      transform: [\n        {\n          translateY: -markMargin,\n        },\n      ],\n    },\n  ];\n\n  const maskBottomStyles: StyleProp<ViewStyle> = [\n    {\n      top: '50%',\n      bottom: 0,\n      transform: [\n        {\n          translateY: markMargin,\n        },\n      ],\n    },\n  ];\n\n  return (\n    <View testID={testID} className='overflow-hidden bg-white'>\n      {loading ? (\n        <View className='absolute inset-0 z-[2] size-full items-center justify-center bg-white opacity-80'>\n          <Loading />\n        </View>\n      ) : null}\n\n      <View style={bodyStyle}>\n        <View\n          className='absolute inset-x-0 z-[3] bg-white opacity-80'\n          style={maskTopStyles}\n          pointerEvents='none'\n        >\n          <Divider />\n        </View>\n\n        <View\n          className='absolute inset-x-0 z-[3] bg-white opacity-80'\n          style={maskBottomStyles}\n          pointerEvents='none'\n        >\n          <Divider />\n        </View>\n\n        {options.map((optionItem, optionIndex) => {\n          const _value = (() => {\n            if (!isNil(value[optionIndex])) {\n              return value[optionIndex];\n            }\n\n            // 默认值\n            // 非受控的情况才去同步数据\n            // 并且没有默认值\n            if (!isControlled && isNoDefaultValue) {\n              if (dataType === 'multiple') {\n                return ColumnDefaultValues.current[optionIndex];\n              }\n\n              // 真的没有就默认第一个选项\n              return findDefaultValue(options[optionIndex][0]?.value, optionItem)!;\n            }\n\n            return undefined;\n          })();\n\n          return (\n            <PickerColumn\n              itemHeight={itemHeight}\n              key={optionIndex}\n              visibleItemCount={_visibleItemCount}\n              options={optionItem}\n              value={_value}\n              onChange={(column) => {\n                switch (dataType) {\n                  // 联级选择\n                  // 如果是 cascade 需要重置选项\n                  case 'cascade': {\n                    const nextAll = findNextAllColumns(column?.children || []);\n                    const _options = options.slice(0, optionIndex + 1).concat(nextAll.options);\n                    const values = value\n                      .slice(0, optionIndex)\n                      .concat(column?.value)\n                      .concat(nextAll.values);\n\n                    const [v, o] = buildSelectedValue(values, _options);\n\n                    onChange(v, o);\n\n                    break;\n                  }\n\n                  // 多选\n                  case 'multiple': {\n                    const newValues = value.concat([]);\n\n                    // 先从默认数据中拼凑好数据\n                    ColumnDefaultValues.current.forEach((cdv, cdvIndex) => {\n                      if (isNil(newValues[cdvIndex])) {\n                        newValues[cdvIndex] = cdv;\n                      }\n                    });\n\n                    newValues[optionIndex] = column.value;\n\n                    const [v, o] = buildSelectedValue(newValues, options);\n\n                    onChange(v, o);\n\n                    break;\n                  }\n\n                  // 单选\n                  default: {\n                    const columnsIndex = columns.findIndex(\n                      (c) => (c as PickerOption).value === column.value\n                    );\n\n                    onChange([column?.value], [columns[columnsIndex]]);\n\n                    break;\n                  }\n                }\n              }}\n            />\n          );\n        })}\n      </View>\n    </View>\n  );\n};\n\nexport default memo(PickerView);\n",
      "type": "registry:component"
    }
  ]
}