{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "notice-bar",
  "type": "registry:component",
  "title": "Example notice-bar",
  "author": "@gabimoncha",
  "description": "Displays a button which is always red.",
  "files": [
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/notice-bar/notice-bar.tsx",
      "content": "import Color from 'color';\nimport isNil from 'lodash/isNil';\nimport noop from 'lodash/noop';\nimport React, { memo, useState, useCallback, useMemo } from 'react';\nimport type { ViewStyle, StyleProp } from 'react-native';\nimport { TouchableWithoutFeedback, View } from 'react-native';\n\nimport type { NoticeBarProps, NoticeBarMode } from './interface';\nimport { CrossOutline, ArrowRightOutline } from '../icons';\nimport { getDefaultValue, renderTextLikeJSX } from '../../helpers';\nimport { usePersistFn } from '../../hooks';\nimport { pickTouchablePropsField, omitTouchablePropsField } from '../icons/gen';\nimport { cva } from 'class-variance-authority';\nimport { cn } from '../../lib/utils';\nimport { vars } from 'nativewind';\n\nconst NOTICE_BAR_ICON_SIZE = 16;\n\nconst getModeIcon = (mode: NoticeBarMode | undefined) => {\n  switch (mode) {\n    case 'closeable':\n      return CrossOutline;\n    default:\n      return ArrowRightOutline;\n  }\n};\n\nconst noticeVariables = cva('', {\n  variants: {\n    status: {\n      primary: 'text-primary-5',\n      warning: 'text-warning-5',\n      success: 'text-success-5',\n      error: 'text-danger-5 ',\n    },\n    size: {\n      m: 'px-3 py-2',\n      s: 'px-2 py-1',\n    },\n  },\n  defaultVariants: {\n    status: 'warning',\n    size: 'm',\n  },\n});\n\n/**\n * 通知栏\n */\nconst NoticeBar: React.FC<NoticeBarProps> = ({\n  message,\n  messageTextClassName,\n  status = 'warning',\n  mode,\n  bordered = false,\n  color,\n  backgroundColor,\n  iconColor,\n  wrapable = false,\n  square = true,\n  size = 'm',\n  renderLeftIcon,\n  renderRightIcon,\n  onPressClose,\n  // TouchableWithoutFeedback 相关属性\n  ...restProps\n}) => {\n  const onPressClosePersistFn = usePersistFn(onPressClose || noop);\n  const [visible, setVisible] = useState(true);\n\n  const barBackgroundColor = useMemo(() => Color('#FF9A2E').lightness(100).hex(), []);\n  // 修正数据\n  color = getDefaultValue(color, '#FF9A2E');\n  backgroundColor = getDefaultValue(backgroundColor, barBackgroundColor);\n  iconColor = getDefaultValue(iconColor, color)!;\n\n  const ModeIcon = getModeIcon(mode);\n  const leftIconJSX = renderLeftIcon?.(iconColor, NOTICE_BAR_ICON_SIZE);\n  const rightIconJSX = renderRightIcon?.(iconColor, NOTICE_BAR_ICON_SIZE);\n  const messageJSX = renderTextLikeJSX(\n    message,\n    cn(\n      'flex-1 text-lg text-[--notice-bar-color]',\n      {\n        'ml-1': !isNil(leftIconJSX),\n        'mr-1': !isNil(rightIconJSX) || mode,\n      },\n      messageTextClassName\n    ),\n    {\n      numberOfLines: wrapable ? undefined : 1,\n    }\n  );\n\n  const onPressModeIcon = useCallback(() => {\n    if (mode === 'closeable') {\n      setVisible(false);\n      onPressClosePersistFn();\n    }\n  }, [mode, onPressClosePersistFn]);\n\n  const touchableProps = pickTouchablePropsField(restProps);\n  const viewProps = omitTouchablePropsField(restProps);\n\n  if (visible) {\n    return (\n      <TouchableWithoutFeedback {...touchableProps}>\n        <View\n          {...viewProps}\n          style={vars({\n            '--notice-bar-background-color': String(backgroundColor ?? '#FF9A2E'),\n            '--notice-bar-color': String(color ?? '#FF9A2E'),\n          })}\n          className={cn(\n            'flex-row',\n            {\n              'bg-[var(--notice-bar-background-color)]': backgroundColor,\n              'border-[var(--notice-bar-color)]': color,\n              'border-0': !bordered,\n              'border-1': bordered,\n              rounded: square,\n            },\n            noticeVariables({ status, size }),\n            viewProps.className\n          )}\n        >\n          {leftIconJSX}\n          {messageJSX}\n          {rightIconJSX}\n          {mode ? (\n            <ModeIcon\n              testID='NOTICE_BAR_ICON'\n              color={iconColor}\n              size={NOTICE_BAR_ICON_SIZE}\n              onPress={onPressModeIcon}\n              pointerEvents={mode === 'closeable' ? 'auto' : 'none'}\n            />\n          ) : null}\n        </View>\n      </TouchableWithoutFeedback>\n    );\n  }\n\n  return null;\n};\n\nexport default memo(NoticeBar);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/notice-bar/interface.ts",
      "content": "import type React from 'react'\nimport type {\n  TouchableWithoutFeedbackProps,\n  ColorValue,\n} from 'react-native'\nimport { FixHitSlopProps } from '../../helpers/types'\n\n\nexport type NoticeBarStatus = 'primary' | 'success' | 'warning' | 'error'\n\nexport type NoticeBarMode = 'closeable' | 'link'\n\nexport interface NoticeBarProps\n  extends FixHitSlopProps<TouchableWithoutFeedbackProps> {\n  /**\n   * 通知文本文字样式\n   */\n  messageTextClassName?: string\n\n  /**\n   * 通知文本内容\n   */\n  message?: React.ReactNode\n\n  /**\n   * 内置状态\n   * @default 'warning'\n   */\n  status?: NoticeBarStatus\n\n  /**\n   * 通知栏模式，可选值为 `'closeable' | 'link'`\n   */\n  mode?: NoticeBarMode\n\n  /**\n   * 是否显示边框\n   * @default false\n   */\n  bordered?: boolean\n\n  /**\n   * 通知文本颜色\n   * @default notice_bar_text_color\n   */\n  color?: ColorValue\n\n  /**\n   * 通知背景颜色\n   * @default notice_bar_background_color\n   */\n  backgroundColor?: ColorValue\n\n  /**\n   * 图标颜色\n   * @default notice_bar_text_color\n   */\n  iconColor?: ColorValue\n\n  /**\n   * 是否开启文本换行\n   * @default false\n   */\n  wrapable?: boolean\n\n  /**\n   * 是否为方形\n   * @default true\n   */\n  square?: boolean\n\n  /**\n   * 大小\n   * @default 'm'\n   */\n  size?: 'm' | 's'\n\n  /**\n   * 渲染左侧图标\n   */\n  renderLeftIcon?: (color: ColorValue, size: number) => React.ReactNode\n\n  /**\n   * 渲染右侧图标\n   */\n  renderRightIcon?: (color: ColorValue, size: number) => React.ReactNode\n\n  /**\n   * 点击关闭按钮\n   */\n  onPressClose?: () => void\n}\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/notice-bar/index.ts",
      "content": "\nimport NoticeBar from './notice-bar'\n\nexport default NoticeBar \n",
      "type": "registry:component"
    }
  ]
}