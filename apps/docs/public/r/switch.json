{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "switch",
  "type": "registry:component",
  "title": "Example switch",
  "author": "@gabimoncha",
  "description": "Displays a button which is always red.",
  "files": [
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/switch/index.ts",
      "content": "\nimport Switch from './switch'\n\nexport default Switch; \n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/switch/interface.ts",
      "content": "import type { ColorValue, ViewProps } from 'react-native'\n\nexport interface SwitchProps<ActiveValueT = any, InactiveValueT = any>\n  extends Pick<ViewProps, 'testID'> {\n  /**\n   * 开关选中状态\n   * @default false\n   */\n  value?: ActiveValueT | InactiveValueT\n\n  /**\n   * 默认值\n   */\n  defaultValue?: ActiveValueT | InactiveValueT\n\n  /**\n   * 是否为加载状态\n   * @default false\n   */\n  loading?: boolean\n\n  /**\n   * 是否为禁用状态\n   * @default false\n   */\n  disabled?: boolean\n\n  /**\n   * 开关尺寸\n   * @default switch_size\n   */\n  size?: number\n\n  /**\n   * 打开时的背景色\n   */\n  activeColor?: ColorValue\n\n  /**\n   * 关闭时的背景色\n   */\n  inactiveColor?: ColorValue\n\n  /**\n   * 打开时对应的值\n   * @default true\n   */\n  activeValue?: ActiveValueT\n\n  /**\n   * 关闭时对应的值\n   * @default false\n   */\n  inactiveValue?: InactiveValueT\n\n  /**\n   * 打开时的内容\n   */\n  activeChildren?: React.ReactNode\n\n  /**\n   * 关闭时的内容\n   */\n  inactiveChildren?: React.ReactNode\n\n  /**\n   * 点击时触发\n   */\n  onPress?: () => void\n\n  /**\n   * 开关状态切换时触发\n   */\n  onChange?: (v: ActiveValueT | InactiveValueT) => void\n\n  /**\n   * 切换状态前，返回 false 可阻止关闭，支持返回 Promise\n   * @param v 切换后的值\n   */\n  beforeChange?: (\n    v: ActiveValueT | InactiveValueT,\n  ) => boolean | Promise<boolean>\n}\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/switch/switch.tsx",
      "content": "import isUndefined from 'lodash/isUndefined';\nimport React, { useEffect, useRef, useMemo, memo, JSX } from 'react';\nimport type { ViewStyle, ViewProps } from 'react-native';\nimport { TouchableWithoutFeedback, Animated, View } from 'react-native';\n\nimport type { SwitchProps } from './interface';\nimport { useControllableValue, useDifferentState, usePersistFn } from '../../hooks';\nimport { callInterceptor, getDefaultValue, renderTextLikeJSX } from '../../helpers';\nimport { ExcludeUndefined } from '../../helpers/types';\nimport { cn } from '../../lib/utils';\nimport Loading from '../loading';\n\n/**\n * Switch 开关\n * @description 用于在打开和关闭状态之间进行切换。\n */\nfunction Switch<ActiveValueT = boolean, InactiveValueT = boolean>({\n  size,\n  disabled = false,\n  loading = false,\n  activeValue = true as unknown as ActiveValueT,\n  inactiveValue = false as unknown as InactiveValueT,\n  activeColor,\n  inactiveColor,\n  activeChildren,\n  inactiveChildren,\n  onPress,\n  beforeChange,\n  testID,\n  ...restProps\n}: SwitchProps<ActiveValueT, InactiveValueT>) {\n  const translateX = useRef(new Animated.Value(0));\n  const [value, onChange] = useControllableValue<ActiveValueT | InactiveValueT>(restProps, {\n    defaultValue: inactiveValue,\n  });\n  const unitSize = getDefaultValue(size, 30)!;\n  const nodeEdgeDistance = 2;\n\n  const [switchWidth, setSwitchWidth] = useDifferentState(unitSize * 2);\n  const [switchHeight, nodeSize, translateXValueEnd, translateXValueStart] = useMemo(() => {\n    const _switchHeight = unitSize * 1;\n    const _nodeSize = unitSize * 1;\n    const _isInnerNode = _switchHeight - _nodeSize < nodeEdgeDistance * 2;\n    const _nodeRealSize = _isInnerNode ? _nodeSize - nodeEdgeDistance * 2 : _nodeSize;\n    const _innerPadding = _isInnerNode ? nodeEdgeDistance : (_switchHeight - _nodeSize) / 2;\n    const _translateXValueEnd = switchWidth - _nodeRealSize - _innerPadding;\n    const _translateXValueStart = _innerPadding;\n\n    return [_switchHeight, _nodeRealSize, _translateXValueEnd, _translateXValueStart];\n  }, [switchWidth, unitSize]);\n\n  const active = value === activeValue;\n\n  const onPressTouchable = () => {\n    onPress?.();\n    if (!disabled && !loading) {\n      const newValue = active ? inactiveValue : activeValue;\n      callInterceptor(beforeChange, {\n        args: [newValue],\n        done: () => {\n          onChange(newValue);\n        },\n      });\n    }\n  };\n\n  useEffect(() => {\n    const actionValue = Animated.timing(\n      translateX.current, // 动画中的变量值\n      {\n        toValue: active ? 1 : 0,\n        duration: 300,\n        useNativeDriver: true,\n      }\n    );\n\n    actionValue.start();\n\n    return () => {\n      // 停止动画\n      if (actionValue) {\n        actionValue.stop();\n      }\n    };\n  }, [active]);\n\n  const nodeStyleSummary: ViewStyle[] = [\n    {\n      top: nodeEdgeDistance,\n      width: nodeSize,\n      height: nodeSize,\n      borderRadius: nodeSize / 2,\n      transform: [\n        {\n          translateX: translateX.current.interpolate({\n            inputRange: [0, 1],\n            outputRange: [translateXValueStart, translateXValueEnd],\n          }) as any,\n        },\n      ],\n    },\n  ];\n\n  const childrenMinEdgeDistance = switchHeight / 3;\n  const childrenMaxEdgeDistance = nodeSize + nodeEdgeDistance * 3;\n  const activeChildrenStyle: ViewStyle = {\n    height: switchHeight,\n    paddingLeft: childrenMinEdgeDistance,\n    paddingRight: childrenMaxEdgeDistance,\n    justifyContent: 'center',\n    alignItems: 'center',\n    transform: [\n      {\n        translateX: translateX.current.interpolate({\n          inputRange: [0, 1],\n          outputRange: [-switchWidth, 0],\n        }) as any,\n      },\n    ],\n  };\n  const inactiveChildrenStyle: ViewStyle = {\n    marginTop: -switchHeight,\n    height: switchHeight,\n    paddingLeft: childrenMaxEdgeDistance,\n    paddingRight: childrenMinEdgeDistance,\n    justifyContent: 'center',\n    alignItems: 'center',\n    transform: [\n      {\n        translateX: translateX.current.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0, switchWidth],\n        }) as any,\n      },\n    ],\n  };\n\n  const onLayoutChildren = usePersistFn<ExcludeUndefined<ViewProps['onLayout']>>((e) => {\n    setSwitchWidth((v) => Math.max(v, e.nativeEvent.layout.width));\n  });\n\n  const activeChildrenJSX = renderTextLikeJSX(activeChildren, cn('text-lg text-white'));\n  const inactiveChildrenJSX = renderTextLikeJSX(inactiveChildren, cn('text-lg text-white'));\n\n  return (\n    <TouchableWithoutFeedback onPress={onPressTouchable} testID={testID}>\n      <View className='flex-row overflow-visible' collapsable={false}>\n        <View\n          className={cn('relative', {\n            'opacity-60': disabled,\n          })}\n          style={{\n            minWidth: switchWidth,\n            height: switchHeight,\n            borderRadius: switchHeight / 2,\n            // 当前过渡不支持 color/backgroundColor\n            // 参考：https://stackoverflow.com/a/60586628\n            backgroundColor: active ? activeColor || '#4080FF' : inactiveColor || '#B9BEC5',\n          }}\n          collapsable={false}\n        >\n          <Animated.View\n            className='absolute items-center justify-center bg-white'\n            style={nodeStyleSummary}\n          >\n            {loading ? (\n              <Loading\n                size={(nodeSize / 4) * 3}\n                color={\n                  active\n                    ? !isUndefined(activeColor)\n                      ? activeColor\n                      : '#4080FF'\n                    : !isUndefined(inactiveColor)\n                    ? inactiveColor\n                    : '#8C9199'\n                }\n              />\n            ) : null}\n          </Animated.View>\n          <View className='relative overflow-hidden' collapsable={false}>\n            <Animated.View style={activeChildrenStyle} onLayout={onLayoutChildren}>\n              {activeChildrenJSX}\n            </Animated.View>\n            <Animated.View style={inactiveChildrenStyle} onLayout={onLayoutChildren}>\n              {inactiveChildrenJSX}\n            </Animated.View>\n          </View>\n        </View>\n      </View>\n    </TouchableWithoutFeedback>\n  );\n}\n\nexport default memo(Switch) as <ActiveValueT = boolean, InactiveValueT = boolean>(\n  p: SwitchProps<ActiveValueT, InactiveValueT>\n) => JSX.Element;\n",
      "type": "registry:component"
    }
  ]
}