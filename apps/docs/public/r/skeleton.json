{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "skeleton",
  "type": "registry:component",
  "title": "Example skeleton",
  "author": "@gabimoncha",
  "description": "Displays a button which is always red.",
  "registryDependencies": [
    "http://localhost:3000/r/helpers.json",
    "http://localhost:3000/r/space.json"
  ],
  "files": [
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/skeleton/index.ts",
      "content": "\nimport { attachPropertiesToComponent } from '../../helpers'\nimport Skeleton from './skeleton'\nimport SkeletonAvatar from './skeleton-avatar'\nimport SkeletonParagraph from './skeleton-paragraph'\n\nexport default attachPropertiesToComponent(Skeleton, {\n  Avatar: SkeletonAvatar,\n  Paragraph: SkeletonParagraph,\n})\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/skeleton/interface.ts",
      "content": "import type { ViewProps } from 'react-native'\n\n\nexport type SkeletonAvatarProps = {\n  /**\n   * 是否展示动画效果\n   * @default true\n   */\n  active?: boolean\n\n  /**\n   * 元素大小\n   * @default 40\n   */\n  size?: number\n\n  /**\n   * 形状\n   * @default 'circle'\n   */\n  shape?: 'circle' | 'square'\n} & Pick<ViewProps, 'testID'>\n\nexport type SkeletonTitleProps = {\n  /**\n   * 设置标题占位图的宽度，百分比\n   */\n  width?: number\n}\n\nexport type SkeletonParagraphProps = {\n  /**\n   * 是否展示动画效果\n   * @default true\n   */\n  active?: boolean\n\n  /**\n   * 设置段落占位图的行数\n   */\n  rows: number\n\n  /**\n   * 每行的宽\n   */\n  widths: number[]\n} & Pick<ViewProps, 'testID'>\n\nexport interface SkeletonProps {\n  /**\n   * 是否展示动画效果\n   * @default true\n   */\n  active?: boolean\n\n  /**\n   * 为 true 时，显示占位图。反之则直接展示子组件\n   */\n  loading?: boolean\n\n  /**\n   * 是否显示头像占位图\n   * @default false\n   */\n  avatar?: boolean | SkeletonAvatarProps\n\n  /**\n   * 是否显示标题占位图\n   * @default true\n   */\n  title?: boolean | SkeletonTitleProps\n\n  /**\n   * 是否显示段落占位图\n   * @default true\n   */\n  paragraph?: boolean | SkeletonParagraphProps\n}\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/skeleton/skeleton-active.tsx",
      "content": "import React, { useMemo, memo } from 'react';\nimport { Fade } from 'rn-placeholder';\n\nconst SkeletonActive: React.FC<React.PropsWithChildren> = ({ children }) => {\n  return <Fade style={{ backgroundColor: '#EDEFF2' }}>{children}</Fade>;\n};\n\nexport default memo(SkeletonActive);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/skeleton/skeleton-avatar.tsx",
      "content": "import React, { useMemo, memo } from 'react';\nimport type { ViewStyle } from 'react-native';\nimport { PlaceholderMedia } from 'rn-placeholder';\n\nimport type { SkeletonAvatarProps } from './interface';\nimport SkeletonActive from './skeleton-active';\n\nconst SkeletonAvatar: React.FC<SkeletonAvatarProps> = ({\n  theme,\n  active = true,\n  size = 40,\n  shape = 'circle',\n  testID,\n}) => {\n  const style = useMemo<ViewStyle>(\n    () => ({\n      height: size,\n      width: size,\n      backgroundColor: '#EDEFF2',\n      borderRadius: shape === 'circle' ? size / 2 : 4,\n    }),\n    [shape, size]\n  );\n  const nodeJSX = <PlaceholderMedia testID={testID} style={style} />;\n\n  if (active) {\n    return <SkeletonActive>{nodeJSX}</SkeletonActive>;\n  }\n\n  return nodeJSX;\n};\n\nexport default memo(SkeletonAvatar);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/skeleton/skeleton-paragraph.tsx",
      "content": "import React, { useMemo, memo } from 'react';\nimport { PlaceholderLine } from 'rn-placeholder';\n\nimport Space from '../space';\n\nimport type { SkeletonParagraphProps } from './interface';\nimport SkeletonActive from './skeleton-active';\n\nconst SkeletonParagraph: React.FC<SkeletonParagraphProps> = ({\n  active = true,\n  rows,\n  widths,\n  testID,\n}) => {\n  const paragraphs = useMemo(() => new Array(rows).fill(0).map((_, i) => i), [rows]);\n  const nodeJSX = (\n    <Space testID={testID}>\n      {paragraphs.map((n) => {\n        return (\n          <PlaceholderLine\n            style={{ backgroundColor: '#EDEFF2' }}\n            key={n}\n            width={widths?.[n]}\n            noMargin\n          />\n        );\n      })}\n    </Space>\n  );\n\n  if (active) {\n    return <SkeletonActive>{nodeJSX}</SkeletonActive>;\n  }\n\n  // eslint-disable-next-line react/jsx-no-useless-fragment\n  return nodeJSX;\n};\n\nexport default memo(SkeletonParagraph);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/skeleton/skeleton.tsx",
      "content": "import isNil from 'lodash/isNil';\nimport React, { memo } from 'react';\nimport { View, StyleSheet } from 'react-native';\n\nimport Space from '../space';\n\nimport type {\n  SkeletonProps,\n  SkeletonTitleProps,\n  SkeletonParagraphProps,\n  SkeletonAvatarProps,\n} from './interface';\nimport SkeletonAvatar from './skeleton-avatar';\nimport SkeletonParagraph from './skeleton-paragraph';\nimport { isObject } from 'lodash';\n\nconst defaultTitleWidths = [38];\n\nconst defaultParagraphOption: SkeletonParagraphProps = {\n  rows: 3,\n  widths: [100, 100, 61],\n};\n\nconst STYLES = StyleSheet.create({\n  skeleton: {\n    flexDirection: 'row',\n  },\n\n  avatar: {\n    marginRight: 8,\n  },\n\n  ctx: {\n    flex: 1,\n  },\n});\n\nconst Skeleton: React.FC<React.PropsWithChildren<SkeletonProps>> = ({\n  children,\n  active = true,\n  loading,\n  title = true,\n  paragraph = true,\n  avatar = false,\n}) => {\n  const showTitle = !!title;\n  const titleWidths = isObject(title) ? [(title as SkeletonTitleProps).width!] : defaultTitleWidths;\n\n  const showParagraph = !!paragraph;\n\n  const paragraphOption = isObject(paragraph)\n    ? (paragraph as SkeletonParagraphProps)\n    : defaultParagraphOption;\n\n  const paragraphActive = !isNil(paragraphOption.active) ? paragraphOption.active : active;\n\n  const showAvatar = !!avatar;\n  const avatarOption = isObject(avatar) ? (avatar as SkeletonAvatarProps) : {};\n\n  const ctxJSX =\n    showParagraph || showTitle ? (\n      <Space>\n        {showTitle ? <SkeletonParagraph active={active} rows={1} widths={titleWidths} /> : null}\n        {showParagraph ? <SkeletonParagraph {...paragraphOption} active={paragraphActive} /> : null}\n      </Space>\n    ) : null;\n\n  const nodeJSX = showAvatar ? (\n    <View style={STYLES.skeleton}>\n      <View style={STYLES.avatar}>\n        <SkeletonAvatar\n          {...avatarOption}\n          active={!isNil(avatarOption.active) ? avatarOption.active : active}\n        />\n      </View>\n      {!isNil(ctxJSX) ? <View style={STYLES.ctx}>{ctxJSX}</View> : null}\n    </View>\n  ) : (\n    ctxJSX\n  );\n\n  return loading ? nodeJSX : (children as React.ReactElement);\n};\n\nexport default memo(Skeleton);\n",
      "type": "registry:component"
    }
  ]
}