{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "password-input",
  "type": "registry:component",
  "title": "Example password-input",
  "author": "@gabimoncha",
  "description": "Displays a button which is always red.",
  "files": [
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/password-input/index.tsx",
      "content": "import { memo, forwardRef } from 'react';\n\nimport TextInput from '../text-input';\nimport type { TextInputInstance } from '../text-input/interface';\n\nimport type { PasswordInputProps } from './interface';\nimport { useControllableValue, usePersistFn } from '../../hooks';\nimport { EyeCloseOutline, EyeOutline } from '../icons';\n\nconst hitSlop = { top: 4, bottom: 4, left: 4, right: 4 };\n\n/**\n * 密码输入\n */\nconst PasswordInput = forwardRef<TextInputInstance, PasswordInputProps>(\n  ({ iconSize = 20, iconColor = '#8C9199', ...restProps }, ref) => {\n    const [secure, onChangeSecureTextEntry] = useControllableValue(restProps, {\n      valuePropName: 'secureTextEntry',\n      defaultValuePropName: 'defaultSecureTextEntry',\n      defaultValue: true,\n      trigger: 'onChangeSecureTextEntry',\n    });\n\n    const onPressIcon = usePersistFn(() => {\n      onChangeSecureTextEntry(!secure);\n    });\n\n    const IconSuffix = secure ? EyeCloseOutline : EyeOutline;\n\n    return (\n      <TextInput\n        {...restProps}\n        ref={ref}\n        secureTextEntry={secure}\n        suffix={\n          <IconSuffix\n            size={iconSize}\n            color={iconColor}\n            className='ml-2'\n            onPress={onPressIcon}\n            hitSlop={hitSlop}\n          />\n        }\n      />\n    );\n  }\n);\n\nexport default memo(PasswordInput);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/password-input/interface.ts",
      "content": "import type { ColorValue } from 'react-native'\n\nimport type { TextInputProps } from '../text-input/interface'\n\nexport interface PasswordInputProps\n  extends Omit<\n    TextInputProps,\n    | 'formatTrigger'\n    | 'showWordLimit'\n    | 'rows'\n    | 'type'\n    | 'secureTextEntry'\n    | 'suffix'\n  > {\n  /**\n   * 安全输入\n   * @default true\n   */\n  secureTextEntry?: boolean\n\n  /**\n   * 安全输入默认状态\n   */\n  defaultSecureTextEntry?: boolean\n\n  /**\n   * 安全输入状态变更\n   */\n  onChangeSecureTextEntry?: (v: boolean) => void\n\n  /**\n   * 图标大小\n   * @default 20\n   */\n  iconSize?: number\n\n  /**\n   * 图标颜色\n   * @default gray_6\n   */\n  iconColor?: ColorValue\n}\n",
      "type": "registry:component"
    }
  ]
}