{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "checkbox",
  "type": "registry:component",
  "title": "Example checkbox",
  "author": "@gabimoncha",
  "description": "Displays a button which is always red.",
  "registryDependencies": [
    "https://react-native-component-docs.vercel.app/r/hooks.json",
    "https://react-native-component-docs.vercel.app/r/space.json",
    "https://react-native-component-docs.vercel.app/r/helpers.json",
    "https://react-native-component-docs.vercel.app/r/icons.json"
  ],
  "files": [
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/checkbox/checkbox-group.tsx",
      "content": "import { JSX, memo } from 'react';\nimport omit from 'lodash/omit';\nimport { ScrollView } from 'react-native';\nimport Checkbox from './checkbox';\nimport type { CheckboxGroupProps } from './interface';\nimport { useControllableValue } from '../../hooks';\nimport Space from '../space';\n\nfunction CheckboxGroup<T = any>({\n  options,\n  multiple,\n  editable = true,\n  scrollable = false,\n  deselect = true,\n  checkboxLabelTextClassName,\n  checkboxIconLabelGap,\n  ...restProps\n}: CheckboxGroupProps<T>) {\n  const [value, onChange] = useControllableValue<T | T[] | undefined | null>(restProps, {\n    defaultValue: multiple ? [] : undefined,\n  });\n\n  const contentJSX = (\n    <Space {...omit(restProps, ['value', 'defaultValue', 'onChange'])}>\n      {options.map(({ value: checkboxValue, ...checkboxProps }) => {\n        const selected = multiple\n          ? (value as T[])?.indexOf(checkboxValue) > -1\n          : value === checkboxValue;\n\n        return (\n          <Checkbox\n            {...checkboxProps}\n            labelTextClassName={checkboxLabelTextClassName}\n            key={`${checkboxValue}`}\n            activeValue={checkboxValue}\n            inactiveValue={null}\n            gap={checkboxProps?.gap ?? checkboxIconLabelGap}\n            value={selected ? checkboxValue : null}\n            onChange={(_value) => {\n              if (!editable) {\n                return;\n              }\n\n              const isReset = _value !== checkboxValue;\n\n              if (multiple) {\n                const oldValue = (value as T[]) ?? [];\n                const newValue = isReset\n                  ? oldValue.filter((v) => v !== checkboxValue)\n                  : [checkboxValue, ...oldValue];\n                const newOptions = newValue.map((v) => {\n                  const optionIndex = options.findIndex((o) => o.value === v);\n\n                  return {\n                    ...options[optionIndex],\n                  };\n                });\n\n                onChange(newValue, newOptions);\n              } else {\n                if (!isReset || (isReset && deselect)) {\n                  const newValue = isReset ? undefined : _value;\n                  const newOptions = isReset\n                    ? undefined\n                    : options.filter((o) => o.value === _value);\n\n                  onChange(newValue, newOptions);\n                }\n              }\n            }}\n          />\n        );\n      })}\n    </Space>\n  );\n\n  if (scrollable && restProps.direction === 'horizontal' && !restProps.wrap) {\n    return (\n      <ScrollView horizontal bouncesZoom={false} showsHorizontalScrollIndicator={false}>\n        {contentJSX}\n      </ScrollView>\n    );\n  }\n\n  return contentJSX;\n}\n\nexport default memo(CheckboxGroup) as <ActiveValueT = any>(\n  p: CheckboxGroupProps<ActiveValueT>\n) => JSX.Element;\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/checkbox/checkbox-icon.tsx",
      "content": "import React, { memo } from 'react';\nimport type { CheckboxIconProps } from './interface';\nimport { getDefaultValue } from '../../helpers';\nimport { CircleOutline, SuccessFill } from '../icons';\n\nconst CheckboxIcon: React.FC<CheckboxIconProps> = ({\n  active,\n  disabled,\n  size,\n  activeColor,\n  hitSlop,\n  ...restProps\n}) => {\n  size = getDefaultValue(size, 24);\n  activeColor = getDefaultValue(activeColor, '#4080FF');\n\n  if (active) {\n    return (\n      <SuccessFill\n        {...restProps}\n        size={size}\n        color={disabled ? '#B9BEC5' : activeColor}\n        disabled={disabled}\n      />\n    );\n  }\n\n  return (\n    <CircleOutline\n      {...restProps}\n      size={size}\n      disabled={disabled}\n      color={disabled ? '#B9BEC5' : '#8C9199'}\n    />\n  );\n};\n\nexport default memo(CheckboxIcon);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/checkbox/checkbox.tsx",
      "content": "import { JSX, memo } from 'react';\nimport isNil from 'lodash/isNil';\nimport omit from 'lodash/omit';\nimport { Text, View } from 'react-native';\nimport CheckboxIcon from './checkbox-icon';\nimport type { CheckboxProps } from './interface';\nimport { cn } from '../../lib/utils';\nimport { useControllableValue } from '../../hooks';\n\nfunction Checkbox<ActiveValueT = boolean, InactiveValueT = boolean>({\n  labelTextClassName,\n  iconStyle,\n  iconSize = 20,\n  activeColor,\n  activeValue = true as unknown as ActiveValueT,\n  inactiveValue = false as unknown as InactiveValueT,\n  label,\n  labelDisabled = false,\n  labelPosition = 'right',\n  renderIcon,\n  disabled,\n  gap = 8,\n  className,\n  children,\n  iconContainerClassName,\n  ...restProps\n}: CheckboxProps<ActiveValueT, InactiveValueT>) {\n  if (disabled) {\n    labelDisabled = disabled;\n  }\n\n  const [value, onChange] = useControllableValue<ActiveValueT | InactiveValueT>(restProps, {\n    defaultValue: inactiveValue,\n  });\n  const active = value === activeValue;\n  const onChangeValue = () => {\n    const newValue = active ? inactiveValue : activeValue;\n\n    onChange(newValue);\n  };\n\n  const labelJSX = !isNil(label) ? (\n    <Text\n      suppressHighlighting\n      className={cn(\n        'min-h-5 leading-5 text-[#11151A]',\n        {\n          'text-[#8C9199]': disabled,\n        },\n        labelTextClassName\n      )}\n      style={{\n        [labelPosition === 'left' ? 'marginRight' : 'marginLeft']: gap,\n      }}\n      onPress={labelDisabled ? undefined : onChangeValue}\n    >\n      {label}\n    </Text>\n  ) : (\n    children\n  );\n  const iconProps = {\n    style: iconStyle,\n    active,\n    activeColor,\n    disabled,\n    size: iconSize,\n    onPress: onChangeValue,\n  };\n  const iconJSX = renderIcon ? (\n    renderIcon(iconProps)\n  ) : (\n    <CheckboxIcon testID='CHECKBOX_ICON' {...iconProps} />\n  );\n\n  return (\n    <View\n      {...omit(restProps, ['value', 'defaultValue', 'onChange', 'className'])}\n      className={cn('flex-row items-center gap-x-1', className)}\n    >\n      {labelPosition === 'left' ? labelJSX : null}\n      {iconJSX}\n      {labelPosition === 'right' ? labelJSX : null}\n    </View>\n  );\n}\n\nexport default memo(Checkbox) as <ActiveValueT = boolean, InactiveValueT = boolean>(\n  p: CheckboxProps<ActiveValueT, InactiveValueT>\n) => JSX.Element;\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/checkbox/index.ts",
      "content": "import { attachPropertiesToComponent } from '../../helpers';\nimport Checkbox from './checkbox';\nimport CheckboxGroup from './checkbox-group';\nimport CheckboxIcon from './checkbox-icon';\n\nexport default attachPropertiesToComponent(Checkbox, {\n  Icon: CheckboxIcon,\n  Group: CheckboxGroup,\n});\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/checkbox/interface.ts",
      "content": "import type { ReactNode } from 'react'\nimport type {\n  TouchableOpacityProps,\n  StyleProp,\n  TextStyle,\n  ViewStyle,\n  ViewProps,\n  ColorValue,\n} from 'react-native'\nimport { FixHitSlopProps } from '../../helpers/types'\nimport { SpaceProps } from '../space/interface'\n\ninterface CheckboxIconPrivateProps {\n  /**\n   * 是否选中、高亮\n   */\n  active?: boolean\n\n  /**\n   * 选中状态颜色\n   * @default checkbox_checked_icon_color\n   */\n  activeColor?: ColorValue\n\n  /**\n   * 图标大小，默认单位为 px\n   * @default 20\n   */\n  size?: number\n}\n\nexport interface CheckboxIconProps\n  extends FixHitSlopProps<TouchableOpacityProps>,\n    CheckboxIconPrivateProps {\n}\n\ninterface RenderIconProps extends CheckboxIconPrivateProps {\n  disabled?: boolean\n  style?: StyleProp<ViewStyle>\n  onPress?: TouchableOpacityProps['onPress']\n}\n\nexport interface CheckboxProps<ActiveValueT = any, InactiveValueT = any>\n  extends Pick<CheckboxIconPrivateProps, 'activeColor'>,\n    ViewProps {\n  /**\n   * 文案样式\n   */\n  labelTextClassName?: string \n\n  /**\n   * 图标样式\n   */\n  iconStyle?: StyleProp<ViewStyle>\n\n  /**\n   * 默认值\n   */\n  defaultValue?: ActiveValueT | InactiveValueT\n\n  /**\n   * 当前的值\n   */\n  value?: ActiveValueT | InactiveValueT\n\n  /**\n   * 状态变化\n   */\n  onChange?: (value: ActiveValueT | InactiveValueT) => void\n\n  /**\n   * 选中时对应的值\n   * @default true\n   */\n  activeValue?: ActiveValueT\n\n  /**\n   * 未选中时对应的值\n   * @default false\n   */\n  inactiveValue?: InactiveValueT\n\n  /**\n   * 文案\n   */\n  label?: ReactNode\n\n  /**\n   * 是否禁用复选框文本点击\n   * @default false\n   */\n  labelDisabled?: boolean\n\n  /**\n   * 文本位置，可选值为 `'left' | 'right'`\n   * @default 'right'\n   */\n  labelPosition?: 'left' | 'right'\n\n  /**\n   * 图标大小\n   * @default 20\n   */\n  iconSize?: number\n\n  /**\n   * 是否禁用复选框\n   */\n  disabled?: boolean\n\n  /**\n   * 自定义图标\n   */\n  renderIcon?: (p: RenderIconProps) => ReactNode\n\n  /**\n   * 文字与图标之间的间距\n   * @default checkbox_label_margin\n   */\n  gap?: number\n}\n\nexport interface CheckboxGroupProps<ActiveValueT = any>\n  extends SpaceProps,\n    Partial<Pick<CheckboxProps, 'activeColor' | 'iconSize'>> {\n  checkboxLabelTextClassName?: CheckboxProps['labelTextClassName']\n  checkboxIconLabelGap?: number\n  options: ({\n    value: ActiveValueT\n    label: string\n  } & Partial<\n    Pick<\n      CheckboxProps,\n      'gap' | 'labelTextClassName' | 'disabled' | 'iconSize' | 'activeColor'\n    >\n  >)[]\n\n\n  /**\n   * 是否多选\n   * @default false\n   */\n  multiple?: boolean\n\n  value?: ActiveValueT | ActiveValueT[]\n\n  defaultValue?: ActiveValueT | ActiveValueT[]\n\n  onChange?: (\n    value: ActiveValueT[] | ActiveValueT,\n    options: { value: ActiveValueT; label: string; disabled?: boolean }[],\n  ) => void\n  /**\n   * 是否可以编辑，readonly 相似，保持 TextInput 自带的属性效果\n   * @default true\n   */\n  editable?: boolean\n\n  /**\n   * 是否可滚动，主要用于横向排版\n   * @default false\n   */\n  scrollable?: boolean\n\n  /**\n   * 单选的情况下是否可以取消选择\n   * @default true\n   */\n  deselect?: boolean\n}\n",
      "type": "registry:component"
    }
  ]
}