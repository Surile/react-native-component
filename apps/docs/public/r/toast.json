{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "toast",
  "type": "registry:component",
  "title": "Example toast",
  "author": "@gabimoncha",
  "description": "Displays a button which is always red.",
  "files": [
    {
      "path": "./node_modules/@rnr/example-library/src/components/toast/toast.tsx",
      "content": "import React, { forwardRef, memo, useEffect, useImperativeHandle, useState } from 'react';\nimport isNil from 'lodash/isNil';\nimport { Text, TouchableWithoutFeedback, View, Image } from 'react-native';\nimport type { ToastMethods, ToastProps } from './types';\nimport Spinner from '../loading/loading-spinner';\nimport Popup from '../popup';\nimport { cn } from '../../lib/utils';\nimport { CrossCircleOutline, SuccessCircleOutline } from '../icons';\n\nconst Toast = forwardRef<ToastMethods, ToastProps>(\n  (\n    {\n      position = 'middle',\n      message,\n      overlay = false,\n      forbidPress = false,\n      closeOnPress = false,\n      closeOnPressOverlay = false,\n      loadingType = 'spinner',\n      duration = 2000,\n      icon,\n      type,\n      ...resetProps\n    },\n    ref\n  ) => {\n    const [show, setShow] = useState(false);\n    const [msg, setMsg] = useState(message);\n\n    // 修正数据\n    if (closeOnPress) {\n      // 是否在点击后关闭\n      // 是否禁止背景点击\n      // 可以触发点击的地方正好被背景 View 挡住\n      forbidPress = false;\n    }\n\n    /**\n     * 点击遮罩层\n     */\n    const onPressOverlay = () => {\n      // 是否在点击遮罩层后关闭\n      if (closeOnPressOverlay) {\n        setShow(false);\n      }\n    };\n\n    /**\n     * 点击内容\n     */\n    const onPressContent = () => {\n      // 是否在点击后关闭\n      if (closeOnPress) {\n        setShow(false);\n      }\n    };\n\n    useEffect(() => {\n      setShow(true);\n\n      let timer: ReturnType<typeof setTimeout>;\n\n      if (duration !== 0) {\n        timer = setTimeout(() => {\n          // 隐藏弹窗\n          setShow(false);\n        }, duration);\n      }\n\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [duration]);\n\n    // 向外暴露方法\n    useImperativeHandle(\n      ref,\n      () => ({\n        close: () => {\n          setShow(false);\n        },\n        setMessage: (s) => {\n          setMsg(s);\n        },\n      }),\n      []\n    );\n\n    return (\n      <Popup {...resetProps} visible={show} overlay={overlay} onPressOverlay={onPressOverlay}>\n        <TouchableWithoutFeedback onPress={onPressContent}>\n          <View\n            className={cn('flex-1 h-full items-center py-[20%]', {\n              'justify-start': position === 'top',\n              'justify-end': position === 'bottom',\n              'justify-center': position === 'middle',\n            })}\n            pointerEvents={forbidPress ? undefined : 'box-none'}\n            collapsable={false}\n          >\n            <View\n              className={cn('bg-black/80 rounded-2xl justify-center items-center', {\n                'rounded-2xl p-6': type === 'text',\n                'w-32 min-h-[110px] p-4': type !== 'text',\n              })}\n            >\n              {type === 'loading' ? (\n                <View className='items-center p-1'>\n                  <Spinner colorClassName='bg-white' />\n                </View>\n              ) : null}\n              {type === 'success' ? <SuccessCircleOutline color='white' size={36} /> : null}\n              {type === 'fail' ? <CrossCircleOutline color='white' size={36} /> : null}\n              {type === 'icon' ? icon : null}\n              {!isNil(msg) && msg !== '' ? (\n                <Text\n                  className={cn('text-lg text-white text-center', {\n                    'mt-0': type === 'text',\n                  })}\n                >\n                  {msg}\n                </Text>\n              ) : null}\n            </View>\n          </View>\n        </TouchableWithoutFeedback>\n      </Popup>\n    );\n  }\n);\n\nexport default memo(Toast);\n",
      "type": "registry:component"
    }
  ]
}