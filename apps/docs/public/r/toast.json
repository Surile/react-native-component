{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "toast",
  "type": "registry:component",
  "title": "Example toast",
  "author": "@gabimoncha",
  "description": "Displays a button which is always red.",
  "registryDependencies": [
    "http://localhost:3000/r/helpers.json",
    "http://localhost:3000/r/portal.json",
    "http://localhost:3000/r/loading.json",
    "http://localhost:3000/r/popup.json",
    "http://localhost:3000/r/icons.json"
  ],
  "files": [
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/toast/index.tsx",
      "content": "import { attachPropertiesToComponent } from '../../helpers';\nimport {\n  fail,\n  Instance,\n  loading,\n  resetDefaultOptions,\n  setDefaultOptions,\n  success,\n  warn,\n} from './toast-instance';\n\nexport default attachPropertiesToComponent(Instance, {\n  loading,\n  success,\n  fail,\n  warn,\n  setDefaultOptions,\n  resetDefaultOptions,\n});\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/toast/toast-instance.tsx",
      "content": "import { createRef } from 'react';\nimport Toast from './toast';\nimport { ToastMethods, ToastOptions, ToastType } from './types';\nimport Portal from '../portal';\n\ntype OptionsMap = Record<ToastType, ToastOptions | undefined | null>;\n\nconst parseOptions = (message: ToastOptions | string) => {\n  if (typeof message === 'object') {\n    return message;\n  }\n\n  return { message };\n};\n\nconst defaultOptions: ToastOptions = {\n  type: 'text',\n  duration: 2000,\n  message: '',\n  position: 'middle',\n  forbidPress: false,\n  closeOnPressOverlay: false,\n  overlay: false,\n  loadingType: 'spinner',\n};\n\nlet defaultOptionsMap = {} as OptionsMap;\n\nlet currentOptions = {\n  ...defaultOptions,\n};\n\nexport const Instance = (options: ToastOptions | string) => {\n  let opts: ToastOptions = typeof options === 'string' ? { message: options } : options;\n\n  const type = opts.type || currentOptions.type;\n\n  // 合并参数\n  opts = {\n    ...currentOptions,\n    ...(type ? defaultOptionsMap[type] : {}),\n    ...opts,\n  };\n\n  const ToastRef = createRef<ToastMethods>();\n\n  const key = Portal.add(\n    <Toast\n      {...opts}\n      ref={ToastRef}\n      onClose={() => {\n        Portal.remove(key);\n        opts.onClose?.();\n      }}\n    />\n  );\n\n  // TODO 优化调用方法\n  return {\n    close: () => {\n      ToastRef.current?.close();\n    },\n    setMessage: (m: string) => {\n      ToastRef.current?.setMessage(m);\n    },\n  };\n};\n\nexport const loading = (options?: ToastOptions | string) =>\n  Instance({\n    type: 'loading',\n    ...parseOptions(options ?? {}),\n  });\n\nexport const success = (options: ToastOptions | string) =>\n  Instance({\n    type: 'success',\n    ...parseOptions(options),\n  });\n\nexport const fail = (options: ToastOptions | string) =>\n  Instance({\n    type: 'fail',\n    ...parseOptions(options),\n  });\n\nexport const warn = (options: ToastOptions | string) =>\n  Instance({\n    type: 'warn',\n    ...parseOptions(options),\n  });\n\n/**\n * 修改默认配置，对所有 Toast 生效。传入 type 可以修改指定类型的默认配置\n */\nexport const setDefaultOptions = (type: ToastType | ToastOptions, options?: ToastOptions) => {\n  if (typeof type === 'string') {\n    defaultOptionsMap[type] = options;\n  } else {\n    Object.assign(currentOptions, type);\n  }\n};\n\n/**\n * 重置默认配置，对所有 Toast 生效。传入 type 可以重置指定类型的默认配置\n */\nexport const resetDefaultOptions = (type: ToastType | ToastOptions) => {\n  if (typeof type === 'string') {\n    defaultOptionsMap[type] = null;\n  } else {\n    currentOptions = { ...defaultOptions };\n\n    defaultOptionsMap = {} as OptionsMap;\n  }\n};\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/toast/toast.tsx",
      "content": "import React, { forwardRef, memo, useEffect, useImperativeHandle, useState } from 'react';\nimport isNil from 'lodash/isNil';\nimport { Text, TouchableWithoutFeedback, View, Image } from 'react-native';\nimport type { ToastMethods, ToastProps } from './types';\nimport Spinner from '../loading/loading-spinner';\nimport Popup from '../popup';\nimport { cn } from '../../lib/utils';\nimport { CrossCircleOutline, SuccessCircleOutline } from '../icons';\n\nconst Toast = forwardRef<ToastMethods, ToastProps>(\n  (\n    {\n      position = 'middle',\n      message,\n      overlay = false,\n      forbidPress = false,\n      closeOnPress = false,\n      closeOnPressOverlay = false,\n      loadingType = 'spinner',\n      duration = 2000,\n      icon,\n      type,\n      ...resetProps\n    },\n    ref\n  ) => {\n    const [show, setShow] = useState(false);\n    const [msg, setMsg] = useState(message);\n\n    // 修正数据\n    if (closeOnPress) {\n      // 是否在点击后关闭\n      // 是否禁止背景点击\n      // 可以触发点击的地方正好被背景 View 挡住\n      forbidPress = false;\n    }\n\n    /**\n     * 点击遮罩层\n     */\n    const onPressOverlay = () => {\n      // 是否在点击遮罩层后关闭\n      if (closeOnPressOverlay) {\n        setShow(false);\n      }\n    };\n\n    /**\n     * 点击内容\n     */\n    const onPressContent = () => {\n      // 是否在点击后关闭\n      if (closeOnPress) {\n        setShow(false);\n      }\n    };\n\n    useEffect(() => {\n      setShow(true);\n\n      let timer: ReturnType<typeof setTimeout>;\n\n      if (duration !== 0) {\n        timer = setTimeout(() => {\n          // 隐藏弹窗\n          setShow(false);\n        }, duration);\n      }\n\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [duration]);\n\n    // 向外暴露方法\n    useImperativeHandle(\n      ref,\n      () => ({\n        close: () => {\n          setShow(false);\n        },\n        setMessage: (s) => {\n          setMsg(s);\n        },\n      }),\n      []\n    );\n\n    return (\n      <Popup {...resetProps} visible={show} overlay={overlay} onPressOverlay={onPressOverlay}>\n        <TouchableWithoutFeedback onPress={onPressContent}>\n          <View\n            className={cn('flex-1 h-full items-center py-[20%]', {\n              'justify-start': position === 'top',\n              'justify-end': position === 'bottom',\n              'justify-center': position === 'middle',\n            })}\n            pointerEvents={forbidPress ? undefined : 'box-none'}\n            collapsable={false}\n          >\n            <View\n              className={cn('bg-black/80 rounded-2xl justify-center items-center', {\n                'rounded-2xl p-6': type === 'text',\n                'w-32 min-h-[110px] p-4': type !== 'text',\n              })}\n            >\n              {type === 'loading' ? (\n                <View className='items-center p-1'>\n                  <Spinner colorClassName='bg-white' />\n                </View>\n              ) : null}\n              {type === 'success' ? <SuccessCircleOutline color='white' size={36} /> : null}\n              {type === 'fail' ? <CrossCircleOutline color='white' size={36} /> : null}\n              {type === 'icon' ? icon : null}\n              {!isNil(msg) && msg !== '' ? (\n                <Text\n                  className={cn('text-lg text-white text-center', {\n                    'mt-0': type === 'text',\n                  })}\n                >\n                  {msg}\n                </Text>\n              ) : null}\n            </View>\n          </View>\n        </TouchableWithoutFeedback>\n      </Popup>\n    );\n  }\n);\n\nexport default memo(Toast);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/toast/types.ts",
      "content": "import type React from 'react';\nimport type { PopupPropsCommon } from '../popup/types';\n\nexport type ToastType = 'text' | 'loading' | 'success' | 'fail' | 'icon';\n\nexport type ToastMethods = {\n  close: () => void;\n  setMessage: (s: string) => void;\n};\n\nexport interface ToastProps extends Omit<PopupPropsCommon, 'visible' | 'duration' | 'closeOnPressOverlay'> {\n  /**\n   * 提示类型，可选值为 `'text' | 'loading' | 'success' | 'fail' | 'icon'`\n   * @default 'text'\n   */\n  type?: ToastType;\n\n  /**\n   * 位置，可选值为 `'top' | 'bottom' | 'middle'`\n   * @default 'middle'\n   */\n  position?: 'top' | 'bottom' | 'middle';\n\n  /**\n   * 文本内容(支持模板字符串\\n换行)\n   * @default ''\n   */\n  message?: string;\n\n  /**\n   * 是否显示背景遮罩层\n   * @default false\n   */\n  overlay?: boolean;\n\n  /**\n   * 是否禁止背景点击\n   * @default false\n   */\n  forbidPress?: boolean;\n\n  /**\n   * 是否在点击后关闭\n   * @default false\n   */\n  closeOnPress?: boolean;\n\n  /**\n   * 是否在点击遮罩层后关闭\n   * @default false\n   */\n  closeOnPressOverlay?: boolean;\n\n  /**\n   * 加载图标类型, 可选值为 `'circular' | 'spinner'`\n   * @default 'spinner'\n   */\n  loadingType?: 'circular' | 'spinner';\n\n  /**\n   * 展示时长(ms)，值为 0 时，toast 不会消失\n   * @default 2000\n   */\n  duration?: number;\n\n  /**\n   * 自定义图标\n   */\n  icon?: React.ReactNode;\n}\n\nexport interface ToastOptions extends ToastProps {}\n",
      "type": "registry:component"
    }
  ]
}