{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "text-input",
  "type": "registry:component",
  "title": "Example text-input",
  "author": "@gabimoncha",
  "description": "Displays a button which is always red.",
  "registryDependencies": [
    "https://react-native-component-docs.vercel.app/r/icons.json",
    "https://react-native-component-docs.vercel.app/r/helpers.json",
    "https://react-native-component-docs.vercel.app/r/hooks.json"
  ],
  "files": [
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/text-input/index.ts",
      "content": "\nimport TextInput from './text-input'\n\nexport default TextInput; \n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/text-input/interface.ts",
      "content": "import type React from 'react'\nimport type {\n  TextInputProps as RNTextInputProps,\n  TextStyle,\n  StyleProp,\n  TextInput as RNTextInput,\n  TouchableOpacityProps,\n} from 'react-native'\n\n\nexport type TextInputInstance = RNTextInput\n\nexport interface TextInputProps extends Omit<RNTextInputProps, 'onChange'> {\n  /**\n   * 当设置 addonXxx 的时候就会出现一个组\n   */\n  addonGroupClassName?: string\n\n  /**\n   * addonBefore 文案的样式\n   */\n  addonBeforeTextClassName?: StyleProp<TextStyle>\n\n  /**\n   * addonAfter 文案的样式\n   */\n  addonAfterTextClassName?: StyleProp<TextStyle>\n\n  /**\n   * xxxfix 相关父组件样式\n   */\n  fixGroupClassName?: string\n\n  /**\n   * prefix 文案的样式\n   */\n  prefixTextClassName?: string \n\n  /**\n   * suffix 文案的样式\n   */\n  suffixTextClassName?: string\n\n  /**\n   * 输入框的形状\n   * @default 'text'\n   */\n  type?: 'text' | 'textarea'\n\n  /**\n   * 多行的时候最低多少行的高度\n   * @default 2\n   */\n  rows?: number\n\n  /**\n   * 是否启用清除图标，点击清除图标后会清空输入框\n   * @example 如果点击不触发，需要在 ScrollView 组件上添加 keyboardShouldPersistTaps=\"handled\"\n   * @default false\n   */\n  clearable?: boolean\n\n  /**\n   * 显示清除图标的时机，always 表示输入框不为空时展示，focus 表示输入框聚焦且不为空时展示\n   * @default 'focus'\n   */\n  clearTrigger?: 'always' | 'focus'\n\n  /**\n   * 输入内容格式化函数\n   */\n  formatter?: (s: string) => string\n\n  /**\n   * 格式化函数触发的时机，可选值为 onEndEditing | onChangeText\n   * @default 'onChangeText'\n   */\n  formatTrigger?: 'onEndEditing' | 'onChangeText'\n\n  /**\n   * 是否显示字数统计，需要设置 maxLength 属性，只有 textarea 模式下才有效\n   * @default false\n   */\n  showWordLimit?: boolean\n\n  /**\n   * 是否显示边框\n   * @default false\n   */\n  bordered?: boolean\n\n  /**\n   * 输入框外部前置标签，边框外，textarea 无\n   */\n  addonBefore?: React.ReactNode\n\n  /**\n   * 输入框外部后置标签，边框外，textarea 无\n   */\n  addonAfter?: React.ReactNode\n\n  /**\n   * 输入框内部前缀，边框内部，textarea 无\n   */\n  prefix?: React.ReactNode\n\n  /**\n   * 输入框内部后缀，边框内部，textarea 无\n   */\n  suffix?: React.ReactNode\n\n  /**\n   * 输入框自定义宽\n   */\n  inputWidth?: number\n\n  /**\n   * 控件大小\n   * @default 'm'\n   */\n  size?: 'xl' | 'l' | 'm' | 's'\n\n  /**\n   * 当文本框内容变化时调用此回调函数\n   * @description 与原生控件不同，这里的参数直接是值\n   */\n  onChange?: (value: string) => void\n\n  /**\n   * 多行输入框最大高度\n   */\n  textareaMaxHeight?: number\n}\n\nexport interface TextInputClearProps {\n  onPress?: TouchableOpacityProps['onPress']\n}\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/text-input/text-input-clear.tsx",
      "content": "import React, { memo } from 'react';\n\nimport type { TextInputClearProps } from './interface';\nimport { CrossOutline } from '../icons';\n\nconst TextInputClear: React.FC<TextInputClearProps> = ({ onPress }) => {\n  return (\n    <CrossOutline\n      className='self-center size-4 rounded-lg bg-gray-300 items-center justify-center ml-2'\n      color='#FFFFFF'\n      size={12}\n      onPress={onPress}\n    />\n  );\n};\n\nexport default memo(TextInputClear);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/text-input/text-input.tsx",
      "content": "import isNil from 'lodash/isNil';\nimport isUndefined from 'lodash/isUndefined';\nimport noop from 'lodash/noop';\nimport React, {\n  useState,\n  useRef,\n  useCallback,\n  useMemo,\n  useImperativeHandle,\n  memo,\n  forwardRef,\n} from 'react';\nimport type {\n  ViewStyle,\n  TextStyle,\n  StyleProp,\n  NativeSyntheticEvent,\n  TextInputFocusEventData,\n  TextInputEndEditingEventData,\n  TextInputChangeEventData,\n} from 'react-native';\nimport {\n  View,\n  InputAccessoryView,\n  Text,\n  TextInput as RNTextInput,\n  TouchableOpacity,\n  Keyboard,\n  Platform,\n  useColorScheme,\n} from 'react-native';\n\nimport type { TextInputProps, TextInputInstance } from './interface';\nimport TextInputClear from './text-input-clear';\nimport { getDefaultValue, renderTextLikeJSX } from '../../helpers';\nimport { useControllableValue, usePersistFn } from '../../hooks';\nimport { cn } from '../../lib/utils';\nimport { cva } from 'class-variance-authority';\n\nconst defaultFormatter = <T,>(t: T): T => t;\n\nlet nextInputAccessoryViewID = 0;\n\nconst getNextInputAccessoryViewID = () => ++nextInputAccessoryViewID;\n\nconst iOSPlatform = Platform.OS === 'ios';\n\n// 字体大小\nconst textInputFontSize = cva('', {\n  variants: {\n    size: {\n      xl: 'text-2xl leading-[20px]',\n      l: 'text-2xl leading-[20px]',\n      m: 'text-2xl leading-[20px]',\n      s: 'text-2xl leading-[20px]',\n    },\n  },\n  defaultVariants: {\n    size: 'm',\n  },\n});\n\n// 最小高度\nconst textInputMinHeight = {\n  xl: 44,\n  l: 40,\n  m: 36,\n  s: 32,\n};\n\n/**\n * 自定义输入项\n * @description 在和 react-native-keyboard-aware-scroll-view 配合做软键盘适配时，如果是 textarea 类型默认 scrollEnabled 禁用，避免软键盘遮挡输入内容\n * @description 动态切换输入内容可见，请手动控制 secureTextEntry，如果只是切换 type 在 iOS 正式环境可能会不生效\n */\nconst TextInput = forwardRef<TextInputInstance, TextInputProps>(\n  (\n    {\n      addonGroupClassName,\n      addonAfterTextClassName,\n      addonBeforeTextClassName,\n      fixGroupClassName,\n      prefixTextClassName,\n      suffixTextClassName,\n      type = 'text',\n      rows = 2,\n      clearable = false,\n      clearTrigger = 'focus',\n      formatter,\n      formatTrigger = 'onChangeText',\n      showWordLimit = false,\n      bordered = false,\n      addonAfter,\n      addonBefore,\n      prefix,\n      suffix,\n      inputWidth,\n      size = 'm',\n      textareaMaxHeight,\n      // TextInput 的属性\n      style,\n      multiline,\n      selectionColor,\n      placeholderTextColor,\n      onChangeText,\n      onEndEditing,\n      onFocus,\n      onBlur,\n      returnKeyType,\n      ...resetProps\n    },\n    ref\n  ) => {\n    // 修正数据\n    if (type === 'textarea') {\n      multiline = true;\n      clearable = false;\n    } else {\n      returnKeyType = getDefaultValue(returnKeyType, 'done');\n    }\n\n    if (showWordLimit && isUndefined(resetProps.maxLength)) {\n      showWordLimit = false;\n    }\n\n    const onChangeTextPersistFn = usePersistFn(onChangeText || noop);\n    const onEndEditingPersistFn = usePersistFn(onEndEditing || noop);\n    const onFocusPersistFn = usePersistFn(onFocus || noop);\n    const onBlurPersistFn = usePersistFn(onBlur || noop);\n    const formatterPersistFn = usePersistFn(formatter || defaultFormatter);\n    const [value, onChange] = useControllableValue(resetProps);\n    const [focus, setFocus] = useState(false);\n    const TextInputRef = useRef<TextInputInstance>(null);\n    const colorScheme = useColorScheme();\n    const inputAccessoryViewID = useMemo(() => `TextInput_${getNextInputAccessoryViewID()}`, []);\n    /** 当前值 */\n    const Value = useRef(value);\n    Value.current = value;\n    /** 显示禁用样子 bordered 才显示 */\n    const showDisabledInput = bordered && !isNil(resetProps.editable) && !resetProps.editable;\n    // 转发实例\n    useImperativeHandle(ref, () => {\n      return TextInputRef.current!;\n    });\n\n    /** 点击完成收起软键盘 */\n    const onPressFinish = useCallback(() => {\n      Keyboard.dismiss();\n      setFocus(false);\n    }, []);\n\n    /** 点击视觉上的输入框，聚焦，多行文本 */\n    const onPressTextInput = useCallback(() => {\n      TextInputRef.current?.focus();\n    }, []);\n\n    /**\n     * 当文字变化\n     * @description 在这个阶段判断字符长度、格式化数据\n     */\n    const onChangeTextTextInput = useCallback(\n      (t: string) => {\n        if (formatTrigger === 'onChangeText') {\n          t = formatterPersistFn(t);\n        }\n\n        onChange(t);\n        onChangeTextPersistFn(t);\n      },\n      [formatTrigger, formatterPersistFn, onChange, onChangeTextPersistFn]\n    );\n\n    /** 编辑结束的时候 */\n    const onEndEditingTextInput = useCallback(\n      (e: NativeSyntheticEvent<TextInputEndEditingEventData>) => {\n        if (formatTrigger === 'onEndEditing') {\n          e.nativeEvent.text = formatterPersistFn(e.nativeEvent.text);\n        }\n\n        if (Value.current !== e.nativeEvent.text) {\n          onChange(e.nativeEvent.text);\n        }\n\n        onEndEditingPersistFn(e);\n      },\n      [onEndEditingPersistFn, formatterPersistFn, formatTrigger, onChange]\n    );\n\n    /** 当文本框内容变化时 */\n    const onChangeTextInput = useCallback(\n      (e: NativeSyntheticEvent<TextInputChangeEventData>) => {\n        onChange(e.nativeEvent.text);\n      },\n      [onChange]\n    );\n\n    /**\n     * 点击清除按钮\n     * @description 目前不能在输入框聚焦的时候触发点击，输入框失去焦点后才能触发点击，可能是软键盘的问题？\n     */\n    const onPressClearable = useCallback(() => {\n      TextInputRef.current?.clear();\n      onChange('');\n      onChangeTextPersistFn('');\n      onPressTextInput();\n    }, [onChangeTextPersistFn, onPressTextInput, onChange]);\n\n    /** 输入框聚焦 */\n    const onFocusTextInput = useCallback(\n      (e: NativeSyntheticEvent<TextInputFocusEventData>) => {\n        setFocus(true);\n        onFocusPersistFn(e);\n      },\n      [onFocusPersistFn]\n    );\n\n    /** 输入框失焦 */\n    const onBlurTextInput = useCallback(\n      (e: NativeSyntheticEvent<TextInputFocusEventData>) => {\n        setFocus(false);\n        onBlurPersistFn(e);\n      },\n      [onBlurPersistFn]\n    );\n\n    const isTextarea = type === 'textarea';\n    // textarea 模式就是纯输入框\n    const addonBeforeJSX = isTextarea\n      ? null\n      : renderTextLikeJSX(\n          addonBefore,\n          cn('text-[#11151A] mr-2', addonBeforeTextClassName, textInputFontSize({ size }))\n        );\n    const addonAfterJSX = isTextarea\n      ? null\n      : renderTextLikeJSX(\n          addonAfter,\n          cn('text-[#11151A] ml-2', addonAfterTextClassName, textInputFontSize({ size }))\n        );\n\n    const prefixJSX = isTextarea\n      ? null\n      : renderTextLikeJSX(\n          prefix,\n          cn('text-[#11151A]', prefixTextClassName, textInputFontSize({ size }))\n        );\n    const suffixJSX = isTextarea\n      ? null\n      : renderTextLikeJSX(\n          suffix,\n          cn('text-[#11151A] ml-2', suffixTextClassName, textInputFontSize({ size }))\n        );\n    const customTextInputWidthStyle: TextStyle = !isNil(inputWidth)\n      ? {\n          flexShrink: 1,\n          flexGrow: 0,\n          flexBasis: inputWidth,\n          width: inputWidth,\n        }\n      : {};\n    /** 输入框不确定是否要排除边框 */\n    const inputUncertainHeight = bordered ? 2 : 0;\n    /**\n     * 显示辅助工具栏\n     * @description 单行输入框回车键已具备收起键盘的作用\n     */\n    const showInputAccessoryView =\n      iOSPlatform && type !== 'text' && (isNil(resetProps.editable) || !!resetProps.editable);\n    const keyboardAppearance =\n      isUndefined(resetProps.keyboardAppearance) || resetProps.keyboardAppearance === 'default'\n        ? colorScheme || 'light'\n        : resetProps.keyboardAppearance;\n\n    const textInputJSX = (\n      <TouchableOpacity\n        activeOpacity={1}\n        className={cn('grow shrink flex-row', {\n          'text-lg': isTextarea && showWordLimit,\n          'flex-1': (addonAfterJSX || addonBeforeJSX) && bordered,\n        })}\n        style={[\n          isTextarea\n            ? {\n                minHeight: textInputMinHeight[size] * rows - inputUncertainHeight,\n                maxHeight: textareaMaxHeight,\n                paddingVertical: 2,\n                alignItems: 'flex-start',\n              }\n            : {\n                minHeight: textInputMinHeight[size] - inputUncertainHeight,\n                alignContent: 'center',\n              },\n          customTextInputWidthStyle,\n        ]}\n        onPress={onPressTextInput}\n      >\n        <RNTextInput\n          {...resetProps}\n          ref={TextInputRef}\n          className={cn(\n            'grow shrink p-0 m-0 border-none text-gray-700',\n            {\n              'bg-[#EDEFF2]': showDisabledInput,\n            },\n            textInputFontSize({ size })\n          )}\n          style={[\n            {\n              textAlignVertical: 'center',\n            },\n            style,\n          ]}\n          placeholder={\n            focus && resetProps.textAlign === 'center' ? undefined : resetProps.placeholder\n          }\n          value={value}\n          multiline={multiline}\n          returnKeyType={returnKeyType}\n          selectionColor={selectionColor}\n          placeholderTextColor={placeholderTextColor}\n          onChangeText={onChangeTextTextInput}\n          onEndEditing={onEndEditingTextInput}\n          onChange={onChangeTextInput}\n          onFocus={onFocusTextInput}\n          onBlur={onBlurTextInput}\n          inputAccessoryViewID={\n            resetProps.inputAccessoryViewID ||\n            (showInputAccessoryView ? inputAccessoryViewID : undefined)\n          }\n        />\n\n        {clearable && (clearTrigger === 'focus' ? focus : true) && value && value.length ? (\n          <TextInputClear onPress={onPressClearable} />\n        ) : null}\n\n        {showWordLimit ? (\n          <Text className='absolute top-0 right-0 text-lg text-[#5A6068]'>\n            {value?.length || 0}/{resetProps.maxLength}\n          </Text>\n        ) : null}\n      </TouchableOpacity>\n    );\n\n    const inputJSX = (\n      <>\n        {showInputAccessoryView ? (\n          <InputAccessoryView\n            nativeID={inputAccessoryViewID}\n            backgroundColor={keyboardAppearance === 'dark' ? '#575757' : '#f7f7f7'}\n          >\n            <View className='h-11 flex-row justify-end items-center border-t border-t-[#E3E5E8]'>\n              <TouchableOpacity onPress={onPressFinish} activeOpacity={0.8}>\n                <Text className='text-primary-5 text-2xl px-3 font-bold'>完成</Text>\n              </TouchableOpacity>\n            </View>\n          </InputAccessoryView>\n        ) : null}\n\n        {prefixJSX || suffixJSX || bordered ? (\n          <View\n            className={cn(\n              'flex-row items-center px-2',\n              bordered && {\n                'border rounded border-[#E3E5E8]': bordered,\n                'flex-1': addonAfterJSX || addonBeforeJSX,\n                'bg-[#EDEFF2]': !isNil(resetProps.editable) && !resetProps.editable,\n              },\n              fixGroupClassName\n            )}\n            style={prefixJSX || suffixJSX ? null : customTextInputWidthStyle}\n          >\n            {prefixJSX}\n            {textInputJSX}\n            {suffixJSX}\n          </View>\n        ) : (\n          textInputJSX\n        )}\n      </>\n    );\n\n    if (addonAfterJSX || addonBeforeJSX) {\n      return (\n        <View className={cn('flex-row items-center', addonGroupClassName)}>\n          {addonBeforeJSX}\n          {inputJSX}\n          {addonAfterJSX}\n        </View>\n      );\n    }\n\n    return inputJSX;\n  }\n);\n\nexport default memo(TextInput);\n",
      "type": "registry:component"
    }
  ]
}