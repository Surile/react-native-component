{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "popover",
  "type": "registry:component",
  "title": "Example popover",
  "author": "@gabimoncha",
  "description": "Displays a button which is always red.",
  "files": [
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/popover/index.ts",
      "content": "import { attachPropertiesToComponent } from '../../helpers'\nimport Popover from './popover'\nimport PopoverItem from './popover-item'\nimport PopoverText from './popover-text'\n\nexport default attachPropertiesToComponent(Popover, {\n  Item: PopoverItem,\n  Text: PopoverText,\n})\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/popover/interface.ts",
      "content": "import type { PropsWithChildren, ReactNode } from 'react'\nimport type { StyleProp, ViewStyle, TextProps } from 'react-native'\nimport type { PopoverProps as RNPVProps } from 'react-native-popover-view/src/Types'\n\n\nexport interface PopoverItemProps<T> {\n  value: T\n\n  /**\n   * 禁用选项\n   */\n  disabled?: boolean\n\n  /**\n   * 弹出层 深色 Popover 会覆盖该值\n   */\n  dark?: boolean\n\n  style?: StyleProp<ViewStyle>\n  /**\n   * 是否显示分割线\n   * @default false\n   */\n  divider?: boolean\n\n  [key: string]: any\n}\n\nexport interface PopoverProps<T>\n  extends Omit<\n      RNPVProps,\n      'from' | 'isVisible' | 'animationConfig' | 'onRequestClose'\n    >,\n    PropsWithChildren<{}> {\n  /**\n   * 卡片内容\n   */\n  content: ReactNode\n\n  /**\n   * 触发方式\n   * @default 'onPress'\n   */\n  trigger?: 'onLongPress' | 'onPress' | 'onPressIn'\n\n  /**\n   * 弹出层 深色\n   * @default false\n   */\n  dark?: boolean\n\n  /**\n   * 显示阴影\n   * @default false\n   */\n  shadow?: boolean\n\n  /**\n   * 显示箭头\n   * @default true\n   */\n  arrow?: boolean\n\n  /**\n   * 点击区域样式\n   */\n  triggerStyle?: StyleProp<ViewStyle>\n\n  /**\n   * 点击 Popover.Item 的回调\n   */\n  onSelect?: (node: T, index?: number) => void\n\n  /**\n   * 点击显示弹层是否禁用\n   */\n  disabled?: boolean\n\n  /**\n   * 自定义渲染弹出层\n   */\n  renderContentComponent?: (\n    nodes: ReactNode,\n    closePopover: () => void,\n  ) => ReactNode\n\n  /**\n   * 弹出的动画过渡时间\n   * @default animation_duration_base\n   */\n  duration?: number\n\n  /**\n   * 'rn-modal' mode on Android only.\n   */\n  statusBarTranslucent?: boolean\n}\n\nexport interface PopoverTextProps extends TextProps {\n  /**\n   * 显示文案\n   */\n  text: string\n\n  /**\n   * 弹出层 深色 Popover 会覆盖该值\n   */\n  dark?: boolean\n\n  /**\n   * 是否显示分割线\n   * @default false\n   */\n  divider?: boolean\n\n  /**\n   * 禁用选项\n   */\n  disabled?: boolean\n\n  [key: string]: any\n}\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/popover/popover-item.tsx",
      "content": "import React, { memo } from 'react';\nimport { TouchableOpacity, View } from 'react-native';\n\nimport type { PopoverItemProps } from './interface';\nimport { cn } from '../../lib/utils';\n\nconst PopoverItem = <T,>({\n  children,\n  value,\n  disabled,\n  dark,\n  style,\n  divider = false,\n\n  onSelect,\n}: React.PropsWithChildren<PopoverItemProps<T>>) => {\n  return (\n    <TouchableOpacity\n      activeOpacity={0.8}\n      disabled={disabled}\n      onPress={() => {\n        if (typeof onSelect === 'function') {\n          onSelect(value);\n        }\n      }}\n      style={style}\n    >\n      <View\n        className={cn('py-3 mx-3', {\n          'border-b-hairline border-b-gray-200': divider,\n          'border-b-[rgba(255,255,255,0.15)]': dark,\n        })}\n      >\n        {children}\n      </View>\n    </TouchableOpacity>\n  );\n};\n\nexport default memo(PopoverItem) as <T>(\n  p: React.PropsWithChildren<PopoverItemProps<T>>\n) => React.ReactElement;\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/popover/popover-text.tsx",
      "content": "import React, { memo } from 'react';\nimport { Text } from 'react-native';\n\nimport type { PopoverTextProps } from './interface';\nimport PopoverItem from './popover-item';\nimport { cn } from '../../lib/utils';\n\nconst PopoverText: React.FC<PopoverTextProps> = ({\n  theme,\n  text,\n  onSelect,\n  dark,\n  disabled,\n  divider = false,\n\n  style,\n  ...restProps\n}) => {\n  return (\n    <PopoverItem value={text} onSelect={onSelect} disabled={disabled} divider={divider} dark={dark}>\n      <Text\n        {...restProps}\n        className={cn('text-gray-800 text-lg', {\n          'text-white': dark,\n        })}\n      >\n        {text}\n      </Text>\n    </PopoverItem>\n  );\n};\n\nexport default memo(PopoverText);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/popover/popover.tsx",
      "content": "import noop from 'lodash/noop';\nimport React, {\n  useState,\n  useRef,\n  useCallback,\n  useMemo,\n  memo,\n  isValidElement,\n  Children,\n  cloneElement,\n} from 'react';\nimport type { View } from 'react-native';\nimport { Platform, ScrollView, TouchableOpacity } from 'react-native';\nimport RNPopoverView from 'react-native-popover-view';\n\nimport type { PopoverProps, PopoverItemProps } from './interface';\nimport { getDefaultValue } from '../../helpers';\n\nconst arrowSize = { width: 0, height: 0 };\n\nconst Popover = <T,>({\n  children,\n  content,\n  dark = false,\n  shadow = false,\n  arrow = true,\n  triggerStyle,\n  onSelect = noop,\n  disabled,\n  renderContentComponent,\n  duration,\n  trigger = 'onPress',\n\n  backgroundStyle,\n  popoverStyle,\n  ...restProps\n}: React.PropsWithChildren<PopoverProps<T>>) => {\n  duration = getDefaultValue(duration, 300);\n\n  const touchable = useRef<View>(null);\n  const [showPopover, setShowPopover] = useState(false);\n  const animationConfig = useMemo(() => ({ duration }), [duration]);\n\n  const openPopover = useCallback(() => {\n    setShowPopover(true);\n  }, []);\n  const closePopover = useCallback(() => {\n    setShowPopover(false);\n  }, []);\n\n  const _onSelect = (value: T, index: number) => {\n    if (onSelect) {\n      onSelect(value, index);\n    }\n\n    closePopover();\n  };\n\n  const renderContent = () => {\n    const items = Children.map(content, (child, index) => {\n      if (!isValidElement(child)) {\n        return child;\n      }\n\n      return cloneElement(child as React.ReactElement<PopoverItemProps<T>>, {\n        onSelect: (v: T) => _onSelect(v, index),\n        dark: dark,\n      });\n    });\n\n    if (typeof renderContentComponent === 'function') {\n      return renderContentComponent(items, closePopover);\n    }\n\n    return <ScrollView>{items}</ScrollView>;\n  };\n\n  return (\n    <>\n      <TouchableOpacity\n        ref={touchable}\n        onPress={trigger === 'onPress' ? openPopover : undefined}\n        onLongPress={trigger === 'onLongPress' ? openPopover : undefined}\n        onPressIn={trigger === 'onPressIn' ? openPopover : undefined}\n        className='items-center'\n        style={triggerStyle}\n        disabled={disabled}\n        activeOpacity={0.8}\n      >\n        {children}\n      </TouchableOpacity>\n      <RNPopoverView\n        {...restProps}\n        from={touchable as any}\n        isVisible={showPopover}\n        backgroundStyle={[\n          {\n            backgroundColor: 'transparent',\n          },\n          backgroundStyle,\n        ]}\n        popoverStyle={[\n          {\n            backgroundColor: 'white',\n            borderRadius: 4,\n            paddingVertical: 0,\n            paddingHorizontal: 0,\n            elevation: 0,\n          },\n          // Android 黑色背景的阴影也是黑色，不友好\n          dark\n            ? {\n                backgroundColor: 'rgba(0,0,0,0.7)',\n              }\n            : null,\n          shadow\n            ? {\n                ...Platform.select({\n                  android: {\n                    elevation: 4,\n                  },\n                  ios: {\n                    shadowColor: '#000',\n                    shadowOpacity: 0.2,\n                    shadowRadius: 4,\n                    shadowOffset: {\n                      width: 0,\n                      height: 0,\n                    },\n                  },\n                }),\n              }\n            : null,\n          popoverStyle,\n        ]}\n        arrowSize={!arrow ? arrowSize : undefined}\n        onRequestClose={closePopover}\n        animationConfig={animationConfig}\n      >\n        {renderContent()}\n      </RNPopoverView>\n    </>\n  );\n};\n\nexport default memo(Popover) as <T>(\n  p: React.PropsWithChildren<PopoverProps<T>>\n) => React.ReactElement;\n",
      "type": "registry:component"
    }
  ]
}