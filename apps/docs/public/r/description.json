{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "description",
  "type": "registry:component",
  "title": "Example description",
  "author": "@gabimoncha",
  "description": "Displays a button which is always red.",
  "files": [
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/description/context.ts",
      "content": "import { createContext, useContext } from 'react'\n\nimport type { DescriptionContextState } from './interface'\n\nconst DescriptionContext = createContext<DescriptionContextState>({\n  colon: true,\n  layout: 'horizontal',\n  size: 'm',\n  empty: '--',\n  showEmpty: false,\n})\n\nexport const useDescription = () => useContext(DescriptionContext)\n\nexport default DescriptionContext\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/description/description-date-range.tsx",
      "content": "import isNil from 'lodash/isNil';\nimport React, { memo } from 'react';\nimport { View } from 'react-native';\n\nimport { formatDate } from '../date-picker-view/helper';\n\nimport { useDescription } from './context';\nimport Description from './description';\nimport type { DescriptionDateRangeProps } from './interface';\nimport { getDefaultValue, renderTextLikeJSX } from '../../helpers';\nimport { locale } from 'dayjs';\nimport { cn } from '../../lib/utils';\nimport { textSizeVariants } from './styles';\nimport { size } from 'lodash';\n\nconst DescriptionDateRange: React.FC<DescriptionDateRangeProps> = ({\n  text,\n  mode = 'Y-m',\n  split,\n  ...restProps\n}) => {\n  const start = !isNil(text?.[0]) ? formatDate(mode, text![0]) : null;\n  const end = !isNil(text?.[1]) ? formatDate(mode, text![1]) : null;\n  const descriptionContext = useDescription();\n\n  const _contentTextClassName = getDefaultValue(\n    restProps.contentTextClassName,\n    descriptionContext.contentTextClassName\n  );\n  const _size = getDefaultValue(restProps.size, descriptionContext.size);\n  const line1JSX = renderTextLikeJSX(\n    [start, split ?? '至'].join(' '),\n    cn(\n      'text-gray-800 shrink max-w-[100%]',\n      {\n        'font-bold': restProps.bold,\n      },\n      textSizeVariants({ size: _size }),\n      _contentTextClassName\n    ),\n    {\n      style: !isNil(restProps.color) ? { color: restProps.color } : null,\n    }\n  );\n\n  const line2JSX = renderTextLikeJSX(\n    end,\n    cn(\n      'text-gray-800 shrink max-w-[100%]',\n      {\n        'font-bold': restProps.bold,\n      },\n      textSizeVariants({ size: _size }),\n      _contentTextClassName\n    ),\n    {\n      style: !isNil(restProps.color) ? { color: restProps.color } : null,\n    }\n  );\n\n  if (isNil(start) && isNil(end)) {\n    return <Description {...restProps} />;\n  }\n\n  return (\n    <Description {...restProps}>\n      <View className='flex-col items-start'>\n        {line1JSX}\n        {line2JSX}\n      </View>\n    </Description>\n  );\n};\n\nexport default memo(DescriptionDateRange);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/description/description-date.tsx",
      "content": "import isNil from 'lodash/isNil'\nimport React, { memo } from 'react'\n\nimport { formatDate } from '../date-picker-view/helper'\n\nimport Description from './description'\nimport type { DescriptionDateProps } from './interface'\n\nconst DescriptionDate: React.FC<DescriptionDateProps> = ({\n  text,\n  mode = 'Y-m',\n  ...restProps\n}) => {\n  const value = !isNil(text) ? formatDate(mode, text) : text\n\n  return <Description {...restProps} text={value} />\n}\n\nexport default memo(DescriptionDate)\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/description/description-group.tsx",
      "content": "import React, { useMemo, memo } from 'react';\nimport { View } from 'react-native';\n\nimport DescriptionContext from './context';\nimport type { DescriptionGroupProps } from './interface';\n\nconst DescriptionGroup: React.FC<DescriptionGroupProps> = ({\n  colon = true,\n  contentClassName,\n  contentTextClassName,\n  labelClassName,\n  labelTextClassName,\n  labelWidth,\n  layout = 'horizontal',\n  size = 'medium',\n  numberOfLines,\n  justify,\n  align,\n  empty = '--',\n  showEmpty = false,\n\n  ...restProps\n}) => {\n  const value = useMemo(\n    () => ({\n      colon,\n      contentClassName,\n      contentTextClassName,\n      labelClassName,\n      labelTextClassName,\n      labelWidth,\n      layout,\n      size,\n      numberOfLines,\n      justify,\n      align,\n      empty,\n      showEmpty,\n    }),\n    [\n      colon,\n      contentClassName,\n      contentTextClassName,\n      labelClassName,\n      labelTextClassName,\n      labelWidth,\n      layout,\n      size,\n      numberOfLines,\n      justify,\n      align,\n      empty,\n      showEmpty,\n    ]\n  );\n\n  return (\n    <DescriptionContext.Provider value={value}>\n      <View {...restProps} />\n    </DescriptionContext.Provider>\n  );\n};\n\nexport default memo(DescriptionGroup);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/description/description-thousand.tsx",
      "content": "import isNil from 'lodash/isNil';\nimport React, { memo } from 'react';\n\nimport Description from './description';\nimport type { DescriptionThousandProps } from './interface';\nimport { formatThousandths } from '../../helpers';\n\nconst DescriptionThousand: React.FC<DescriptionThousandProps> = ({ text, ...restProps }) => {\n  const value = !isNil(text) ? formatThousandths(`${text}`) : text;\n\n  return <Description {...restProps} text={value} />;\n};\n\nexport default memo(DescriptionThousand);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/description/description.tsx",
      "content": "import isNil from 'lodash/isNil';\nimport React, { memo, isValidElement } from 'react';\nimport { View } from 'react-native';\n\nimport { useDescription } from './context';\nimport type { DescriptionProps } from './interface';\nimport { getDefaultValue, renderTextLikeJSX } from '../../helpers';\nimport { cn } from '../../lib/utils';\nimport { vars } from 'nativewind';\nimport { textSizeVariants } from './styles';\n\nconst Description: React.FC<DescriptionProps> = ({\n  colon,\n  contentClassName,\n  contentTextClassName,\n  labelClassName,\n  labelTextClassName,\n  labelWidth,\n  layout,\n  size,\n  numberOfLines,\n  justify,\n  align,\n  label,\n  text,\n  hidden = false,\n  bold = false,\n  color,\n  addonBefore,\n  addonAfter,\n  renderLabel,\n  render,\n  empty,\n  showEmpty,\n\n  children,\n  style,\n  ...restProps\n}) => {\n  const descriptionContext = useDescription();\n\n  // 整理默认值\n  const _colon = getDefaultValue(colon, descriptionContext.colon);\n  const _contentClassName = getDefaultValue(contentClassName, descriptionContext.contentClassName);\n  const _contentTextClassName = getDefaultValue(\n    contentTextClassName,\n    descriptionContext.contentTextClassName\n  );\n  const _labelClassName = getDefaultValue(labelClassName, descriptionContext.labelClassName);\n  const _labelTextClassName = getDefaultValue(\n    labelTextClassName,\n    descriptionContext.labelTextClassName\n  );\n  const _labelWidth = getDefaultValue(labelWidth, descriptionContext.labelWidth);\n  const _layout = getDefaultValue(layout, descriptionContext.layout);\n  const _size = getDefaultValue(size, descriptionContext.size);\n  const _justify = getDefaultValue(justify, descriptionContext.justify);\n  const _align = getDefaultValue(align, descriptionContext.align);\n  const _numberOfLines = getDefaultValue(numberOfLines, descriptionContext.numberOfLines);\n  const _empty = getDefaultValue(empty, descriptionContext.empty);\n  const _showEmpty = getDefaultValue(showEmpty, descriptionContext.showEmpty);\n\n  const colonStr = _colon ? '：' : '';\n  const labelJSX = !isNil(renderLabel)\n    ? renderLabel(colonStr)\n    : !isNil(label)\n    ? renderTextLikeJSX(\n        `${label}${colonStr}`,\n        cn('text-gray-700', textSizeVariants({ size: _size }), _labelTextClassName)\n      )\n    : null;\n\n  const renderText = (node: React.ReactNode) =>\n    renderTextLikeJSX(\n      node,\n      cn(\n        'text-gray-800 shrink max-w-[100%]',\n        {\n          'font-bold': bold,\n        },\n        textSizeVariants({ size: _size }),\n        _contentTextClassName\n      ),\n      {\n        style: !isNil(color) ? { color } : null,\n        numberOfLines: _numberOfLines,\n      }\n    );\n  const contentJSX = isValidElement(children)\n    ? children\n    : renderText(!isNil(text) ? text : children);\n\n  // 判断是否渲染空数据占位符\n  const renderContentJSX =\n    (isNil(contentJSX) || text === '' || children === '') && _showEmpty\n      ? renderText(_empty)\n      : contentJSX;\n\n  const renderJSX = !isNil(render) ? (\n    render(renderContentJSX, addonBefore, addonAfter)\n  ) : (\n    <>\n      {addonBefore}\n      {renderContentJSX}\n      {addonAfter}\n    </>\n  );\n\n  if (hidden) {\n    return null;\n  }\n\n  return (\n    <View\n      {...restProps}\n      style={vars({\n        '--label-width': _labelWidth ?? 0,\n        '--justify': _justify || '',\n        '--align': align || '',\n      })}\n      className={cn(\n        {\n          'flex-row': _layout === 'horizontal',\n          'flex-col': _layout === 'vertical',\n          'items-[var(--align)]': align,\n          'justify-[var(--justify)]': justify,\n        },\n        restProps.className\n      )}\n    >\n      <View\n        className={cn(_labelClassName, {\n          'w-[var(--label-width)]': !isNil(_labelWidth),\n        })}\n      >\n        {labelJSX}\n      </View>\n      <View className={cn('overflow-hidden flex-1 flex-row items-center', _contentClassName)}>\n        {renderJSX}\n      </View>\n    </View>\n  );\n};\n\nexport default memo(Description);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/description/index.ts",
      "content": "\nimport { attachPropertiesToComponent } from '../../helpers'\nimport Description from './description'\nimport DescriptionDate from './description-date'\nimport DescriptionDateRange from './description-date-range'\nimport DescriptionGroup from './description-group'\nimport DescriptionThousand from './description-thousand'\nimport { renderAlignCenter, renderDateRangeAlignFlexStart } from './render'\n\nexport default attachPropertiesToComponent(Description, {\n  Group: DescriptionGroup,\n  Thousand: DescriptionThousand,\n  Date: DescriptionDate,\n  DateRange: DescriptionDateRange,\n  renderAlignCenter,\n  renderDateRangeAlignFlexStart,\n})\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/description/interface.ts",
      "content": "import type { ReactElement, ReactNode } from 'react'\nimport type {\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n  ViewProps,\n  FlexStyle,\n  ColorValue,\n} from 'react-native'\n\nimport type { DatePickerColumnMode } from '../date-picker-view/interface'\n\nexport interface DescriptionContextState {\n  /**\n   * label 和 text 之间是否有冒号\n   * @default true\n   */\n  colon?: boolean\n\n  /**\n   * 内容样式\n   */\n  contentClassName?: string\n\n  /**\n   * 内容文字样式\n   */\n  contentTextClassName?: string\n\n  /**\n   * 标签样式\n   */\n  labelClassName?: string \n\n  /**\n   * 标签文字样式\n   */\n  labelTextClassName?: string\n\n  /**\n   * 标签文字宽\n   */\n  labelWidth?: number\n\n  /**\n   * label 与 text 的排版、布局\n   * @default 'horizontal'\n   */\n  layout?: 'horizontal' | 'vertical'\n\n  /**\n   * 文案大小\n   * @default 'medium'\n   */\n  size?: 'small' | 'medium' | 'large'\n\n  /**\n   * 右侧文案显示几行\n   */\n  numberOfLines?: number\n\n  /**\n   * 主轴对齐方式\n   */\n  justify?: FlexStyle['justifyContent']\n\n  /**\n   * 交叉轴对齐方式\n   */\n  align?: FlexStyle['alignItems']\n\n  /**\n   * 空数据占位符\n   * @default '--'\n   */\n  empty?: ReactNode\n\n  /**\n   * 显示空数据占位符\n   * @default false\n   */\n  showEmpty?: boolean\n}\n\nexport interface DescriptionGroupProps\n  extends DescriptionContextState,\n    ViewProps {}\n\nexport interface DescriptionProps extends DescriptionContextState, ViewProps {\n  /**\n   * 内容的描述\n   */\n  label?: string\n\n  /**\n   * 内容，自定义内容使用子元素的方式\n   */\n  text?: string\n\n  /**\n   * 是否隐藏\n   * @default false\n   */\n  hidden?: boolean\n\n  /**\n   * 是否加粗显示内容，样式优先级低于自定义样式\n   * @default false\n   */\n  bold?: boolean\n\n  /**\n   * 字体颜色，样式优先级低于自定义样式\n   */\n  color?: ColorValue\n\n  /**\n   * 内容前置标签\n   */\n  addonBefore?: ReactElement\n\n  /**\n   * 内容后置标签\n   */\n  addonAfter?: ReactElement\n\n  /**\n   * 自定义渲染描述\n   */\n  renderLabel?: (colon: string) => ReactNode\n\n  /**\n   * 自定义渲染函数，适用于自定义排版\n   * @param content text/children 包裹后的 ReactNode\n   * @param addonBefore addonBefore 包裹后的 ReactNode\n   * @param addonAfter addonAfter 包裹后的 ReactNode\n   */\n  render?: (\n    content: ReactNode,\n    addonBefore: ReactNode,\n    addonAfter: ReactNode,\n  ) => ReactNode\n\n  /**\n   * 空数据占位符\n   */\n  empty?: ReactNode\n\n  /**\n   * 显示空数据占位符\n   */\n  showEmpty?: boolean\n}\n\nexport interface DescriptionThousandProps\n  extends Omit<DescriptionProps, 'text'> {\n  /**\n   * 显示的数字\n   */\n  text?: number\n}\n\nexport interface DescriptionDateProps extends Omit<DescriptionProps, 'text'> {\n  /**\n   * 显示的时间\n   */\n  text?: Date\n\n  /**\n   * 时间格式\n   * @default 'Y-m'\n   */\n  mode?: DatePickerColumnMode\n}\n\nexport interface DescriptionDateRangeProps\n  extends Omit<DescriptionDateProps, 'text'> {\n  /**\n   * 显示的时间\n   */\n  text?: [Date, Date]\n\n  /**\n   * 时间分割字符串\n   * @default '至'\n   */\n  split?: string\n}\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/description/render.tsx",
      "content": "import type { ReactNode } from 'react';\nimport Space from '../space';\n\nexport const renderAlignCenter = (\n  context: ReactNode,\n  addonBefore: ReactNode,\n  addonAfter: ReactNode\n) => {\n  return (\n    <Space direction='horizontal' align='center'>\n      {addonBefore}\n      {context}\n      {addonAfter}\n    </Space>\n  );\n};\n\nexport const renderDateRangeAlignFlexStart = (\n  context: ReactNode,\n  addonBefore: ReactNode,\n  addonAfter: ReactNode\n) => {\n  return (\n    <Space direction='horizontal' align='flex-start'>\n      {addonBefore}\n      {context}\n      {addonAfter}\n    </Space>\n  );\n};\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/description/styles.ts",
      "content": "import { cva } from \"class-variance-authority\";\n\n// 字体大小变量\nexport const textSizeVariants = cva('', {\n  variants: {\n    size: {\n      small: 'text-xl',\n      medium: 'text-xl',\n      large: 'text-2xl',\n    },\n  },\n  defaultVariants: {\n    size: 'medium',\n  },\n});",
      "type": "registry:component"
    }
  ]
}