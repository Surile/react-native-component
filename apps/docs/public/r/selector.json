{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "selector",
  "type": "registry:component",
  "title": "Example selector",
  "author": "@gabimoncha",
  "description": "Displays a button which is always red.",
  "files": [
    {
      "path": "./node_modules/@rnr/example-library/src/components/selector/selector.tsx",
      "content": "import React, { memo, useState } from 'react';\nimport omit from 'lodash/omit';\nimport pick from 'lodash/pick';\nimport { Text, TouchableOpacity } from 'react-native';\nimport type { SelectorProps, SelectorValue } from './interface';\nimport { usePersistFn, useSafeHeight, useUpdateEffect } from '../../hooks';\nimport Popup from '../popup/popup';\nimport PopupHeader from '../popup/popup-header';\nimport PopupPage from '../popup/popup-page';\nimport Tree from '../tree';\nimport type { TreeProps, TreeValue } from '../tree/interface';\nimport ButtonBar from '../button-bar';\nimport Button from '../button';\n\nconst treePropsField = [\n  'multiple',\n  'multipleMode',\n  'value',\n  'defaultValue',\n  'onChange',\n  'options',\n  'renderSwitcherIcon',\n  'indent',\n  'activeColor',\n  'defaultExpandedValues',\n  'defaultExpandAll',\n  'search',\n  'onSearch',\n  'placeholder',\n  'minHeight',\n  'cancellable',\n  'onEndReached',\n  'refreshControl',\n];\n\n/**\n * Selector 弹出层式 Select\n * @description 类似 Web 端的 Select 组件，可以多选、单选。\n */\nconst Selector: React.FC<SelectorProps> = ({\n  title,\n  onChangeImmediate,\n  safeAreaInsetTop,\n  confirmButtonText,\n\n  // popup 组件相关属性\n  visible,\n  closeOnPressOverlay = true,\n  onClose,\n  ...restProps\n}) => {\n  const treeProps = pick(restProps, treePropsField) as TreeProps;\n\n  const popupProps = omit(restProps, treePropsField);\n  const isMultiple = treeProps.multiple;\n\n  const safeHeight = useSafeHeight({ top: safeAreaInsetTop, bottom: false });\n\n  const [valueMultiple, setValueMultiple] = useState<SelectorValue[]>(\n    Array.isArray(treeProps.value)\n      ? treeProps.value\n      : Array.isArray(treeProps.defaultValue)\n      ? treeProps.defaultValue\n      : []\n  );\n\n  // 同步外面的数据\n  useUpdateEffect(() => {\n    if (treeProps.multiple) {\n      setValueMultiple(treeProps.value as SelectorValue[]);\n    }\n  }, [treeProps.multiple, treeProps.value]);\n\n  const onChangeMultiplePersistFn = usePersistFn((v: TreeValue[]) => {\n    if (onChangeImmediate) {\n      setValueMultiple(onChangeImmediate(v) as SelectorValue[]);\n    } else {\n      setValueMultiple(v);\n    }\n  });\n\n  /**\n   * 点击确定按钮\n   */\n  const onPressOk = usePersistFn(() => {\n    const _onChange = treeProps.onChange as SelectorProps['onChange'];\n\n    _onChange?.(\n      valueMultiple,\n      valueMultiple.map((i) => Tree.findNodeByValue(treeProps.options, i)!)\n    );\n  });\n\n  const contentJSX = (\n    <>\n      <PopupHeader title={title} onClose={onClose} />\n\n      <Tree\n        {...treeProps}\n        value={isMultiple ? valueMultiple : treeProps.value ?? treeProps.defaultValue}\n        onChange={\n          isMultiple\n            ? (v: TreeValue | TreeValue[]) => onChangeMultiplePersistFn(v as TreeValue[])\n            : treeProps.onChange\n        }\n      />\n\n      {treeProps.multiple ? (\n        <ButtonBar alone divider={false} height={60} safeAreaInsetBottom={false}>\n          <Button type='primary' onPress={onPressOk} text={confirmButtonText ?? '确定'} />\n        </ButtonBar>\n      ) : null}\n    </>\n  );\n\n  if (treeProps.search) {\n    return (\n      <PopupPage\n        {...popupProps}\n        visible={visible}\n        onClose={onClose}\n        closeOnPressOverlay={closeOnPressOverlay}\n        onPressOverlay={onClose}\n        round\n        safeAreaInsetBottom\n      >\n        {contentJSX}\n      </PopupPage>\n    );\n  }\n\n  return (\n    <Popup\n      {...popupProps}\n      style={{ maxHeight: safeHeight }}\n      visible={visible}\n      onClose={onClose}\n      closeOnPressOverlay={closeOnPressOverlay}\n      onPressOverlay={onClose}\n      position='bottom'\n      round\n      safeAreaInsetBottom\n    >\n      {contentJSX}\n    </Popup>\n  );\n};\n\nexport default memo(Selector);\n",
      "type": "registry:component"
    }
  ]
}