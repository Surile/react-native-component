{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "selector",
  "type": "registry:component",
  "title": "Example selector",
  "author": "@gabimoncha",
  "description": "Displays a button which is always red.",
  "files": [
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/selector/helper.ts",
      "content": "import type { SelectorOption } from './interface';\n\n/**\n * 转换为侧边数据\n * @param d 位置数组\n * @param value value 的字段\n * @param label 文案的字段\n */\nexport const conversionSelectorOptions = <T = Record<string, any>>(\n  d: T[],\n  value: keyof T,\n  label: keyof T,\n): SelectorOption[] =>\n  (d || []).map((dt) => ({\n    // TODO fix 类型不合适\n    label: dt[label] as any,\n    value: dt[value] as any,\n  }));\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/selector/index.tsx",
      "content": "import React from 'react';\nimport type { SelectorProps } from './interface';\nimport Selector from './selector';\nimport SelectorInstance from './selector-instance';\nimport SelectorText from './selector-text';\nimport Portal from '../portal';\nimport { attachPropertiesToComponent } from '../../helpers';\n\nconst Component: React.FC<SelectorProps> = (props) => {\n  return (\n    <Portal>\n      <Selector {...props} />\n    </Portal>\n  );\n};\n\nexport default attachPropertiesToComponent(SelectorInstance, {\n  Component,\n  SelectorComponent: Selector,\n  Text: SelectorText,\n});\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/selector/interface.ts",
      "content": "import type React from 'react';\nimport type { PopupPropsCommon } from '../popup/types';\nimport type { TreeOption, TreeProps, TreeValue } from '../tree/interface';\n\nexport type SelectorValue = TreeValue;\n\nexport type SelectorOption = TreeOption;\n\nexport interface SelectorProps\n  extends Omit<PopupPropsCommon, 'closeOnPressOverlay' | 'onPressOverlay'>,\n    Omit<TreeProps, 'value' | 'defaultValue' | 'options' | 'onChange' | 'theme'> {\n  value?: SelectorValue | SelectorValue[];\n\n  defaultValue?: SelectorValue | SelectorValue[];\n\n  onChange?: (v: SelectorValue[] | SelectorValue, options: SelectorOption[]) => void;\n\n  options: SelectorOption[];\n  /**\n   * 点击遮罩层关闭\n   * @default true\n   */\n  closeOnPressOverlay?: boolean;\n\n  /**\n   * 标题\n   * @default '请选择'\n   */\n  title?: React.ReactNode;\n\n  /**\n   * 是否显示关闭图标\n   * @default true\n   */\n  showClose?: boolean;\n\n  /**\n   * 当值变化的时候立即响应\n   */\n  onChangeImmediate?: (v: SelectorValue[] | SelectorValue) => SelectorValue[] | SelectorValue;\n\n  /**\n   * 顶部安全高度\n   * @default safeAreaInsets.top\n   */\n  safeAreaInsetTop?: number;\n\n  /**\n   * 确定按钮文案\n   * @default '确定'\n   */\n  confirmButtonText?: string;\n}\n\nexport interface SelectorMethodProps extends Omit<SelectorProps, 'visible'> {\n  beforeChange?: (value: SelectorValue | SelectorValue[], options: SelectorOption[]) => boolean | Promise<boolean>;\n}\n\nexport interface SelectorOptions extends Omit<SelectorMethodProps, 'onRequestClose'> {}\n\nexport interface SelectorTextProps {\n  /**\n   * 标题\n   * @default '请选择'\n   */\n  title?: React.ReactNode;\n\n  /**\n   * 当前选中的值\n   */\n  value: SelectorValue;\n\n  /**\n   * 候选项数组\n   */\n  options: SelectorOption[];\n\n  /**\n   * 变化时的回调函数\n   */\n  onChange?: (value: SelectorValue, options: SelectorOption[]) => void;\n\n  /**\n   * 箭头方向\n   * @default 'right'\n   */\n  arrowDirection?: 'left' | 'up' | 'right' | 'down'\n\n\n  /**\n   * 显示分割线\n   * @default true\n   */\n  divider?: boolean;\n\n  /**\n   * 左侧是否有间距\n   * @default true\n   */\n  head?: boolean;\n\n  /**\n   * 文本样式\n   */\n  textClassName?: string;\n}\n\nexport type SelectorFnInstance = (p: SelectorOptions) => Promise<SelectorValue[] | SelectorValue>;\n\nexport interface SelectorInstance extends SelectorFnInstance {\n  Component: React.FC<SelectorProps>;\n  Text: React.FC<SelectorTextProps>;\n}\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/selector/selector-instance.tsx",
      "content": "import React from 'react';\nimport type { SelectorOptions, SelectorValue } from './interface';\nimport SelectorMethod from './selector-method';\nimport Portal from '../portal';\n\nconst SelectorInstance = (opt: SelectorOptions) =>\n  new Promise<SelectorValue[] | SelectorValue>((resolve, reject) => {\n    const key = Portal.add(\n      <SelectorMethod\n        {...opt}\n        onChange={(v, o) => {\n          opt.onChange?.(v, o);\n          resolve(v);\n        }}\n        onClose={() => {\n          opt.onClose?.();\n          reject(new Error());\n        }}\n        onClosed={() => {\n          opt.onClosed?.();\n\n          Portal.remove(key);\n        }}\n      />\n    );\n  });\n\nexport default SelectorInstance;\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/selector/selector-method.tsx",
      "content": "import React, { memo, useEffect, useState } from 'react';\nimport type { SelectorMethodProps, SelectorOption, SelectorValue } from './interface';\nimport Selector from './selector';\nimport { callInterceptor } from '../../helpers';\nimport { usePersistFn } from '../../hooks';\n\n/**\n * Selector 函数使用时对应需要的组件\n */\nconst SelectorMethod: React.FC<SelectorMethodProps> = ({\n  onChange,\n  onClose,\n  beforeChange,\n  ...restProps\n}) => {\n  const [visible, setVisible] = useState(false);\n  const onChangePersistFn = usePersistFn(\n    (v: SelectorValue | SelectorValue[], o: SelectorOption[]) => {\n      callInterceptor(beforeChange, {\n        args: [v, o],\n        done: () => {\n          onChange?.(v, o);\n          setVisible(false);\n        },\n      });\n    }\n  );\n  const onClosePersistFn = usePersistFn(() => {\n    onClose?.();\n    setVisible(false);\n  });\n\n  const onRequestClose = usePersistFn(() => {\n    onClosePersistFn();\n\n    return true;\n  });\n\n  // 节点加载好后显示\n  useEffect(() => {\n    setVisible(true);\n  }, []);\n\n  return (\n    <Selector\n      {...restProps}\n      visible={visible}\n      onChange={onChangePersistFn}\n      onClose={onClosePersistFn}\n      onRequestClose={onRequestClose}\n    />\n  );\n};\n\nexport default memo(SelectorMethod);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/selector/selector-text.tsx",
      "content": "import React, { memo } from 'react';\nimport { Text, TouchableOpacity, View } from 'react-native';\nimport type { SelectorTextProps } from './interface';\nimport SelectorInstance from './selector-instance';\nimport { usePersistFn } from '../../hooks';\nimport { cn } from '../../lib/utils';\nimport Divider from '../divider';\nimport { getArrowOutline } from '../../helpers';\nimport Space from '../space';\n\nconst SelectorText: React.FC<SelectorTextProps> = ({\n  title,\n  value,\n  options,\n  onChange,\n  arrowDirection = 'right',\n  divider = true,\n  textClassName,\n  head,\n}) => {\n  const onPress = usePersistFn(() => {\n    SelectorInstance({\n      title,\n      options,\n      value,\n      onChange: (v, opts) => {\n        if (Array.isArray(v)) {\n          onChange?.(v[0], opts);\n        } else {\n          onChange?.(v, opts);\n        }\n      },\n    }).catch(() => {});\n  });\n  const IconArrow = getArrowOutline(arrowDirection);\n  const textIndex = options.findIndex((op) => op.value === value);\n  const text = options[textIndex].label;\n\n  return (\n    <TouchableOpacity activeOpacity={0.8} onPress={onPress} className='justify-center'>\n      <Space direction='horizontal' align='center' head={head}>\n        {divider ? <Divider direction='vertical' /> : null}\n        <Text suppressHighlighting className={cn('text-base text-gray-300', textClassName)}>\n          {text}\n        </Text>\n        <IconArrow size={16} color={'#8C9199'} />\n      </Space>\n    </TouchableOpacity>\n  );\n};\n\nexport default memo(SelectorText);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/selector/selector.tsx",
      "content": "import React, { memo, useState } from 'react';\nimport omit from 'lodash/omit';\nimport pick from 'lodash/pick';\nimport { Text, TouchableOpacity } from 'react-native';\nimport type { SelectorProps, SelectorValue } from './interface';\nimport { usePersistFn, useSafeHeight, useUpdateEffect } from '../../hooks';\nimport Popup from '../popup/popup';\nimport PopupHeader from '../popup/popup-header';\nimport PopupPage from '../popup/popup-page';\nimport Tree from '../tree';\nimport type { TreeProps, TreeValue } from '../tree/interface';\nimport ButtonBar from '../button-bar';\nimport Button from '../button';\n\nconst treePropsField = [\n  'multiple',\n  'multipleMode',\n  'value',\n  'defaultValue',\n  'onChange',\n  'options',\n  'renderSwitcherIcon',\n  'indent',\n  'activeColor',\n  'defaultExpandedValues',\n  'defaultExpandAll',\n  'search',\n  'onSearch',\n  'placeholder',\n  'minHeight',\n  'cancellable',\n  'onEndReached',\n  'refreshControl',\n];\n\n/**\n * Selector 弹出层式 Select\n * @description 类似 Web 端的 Select 组件，可以多选、单选。\n */\nconst Selector: React.FC<SelectorProps> = ({\n  title,\n  onChangeImmediate,\n  safeAreaInsetTop,\n  confirmButtonText,\n\n  // popup 组件相关属性\n  visible,\n  closeOnPressOverlay = true,\n  onClose,\n  ...restProps\n}) => {\n  const treeProps = pick(restProps, treePropsField) as TreeProps;\n\n  const popupProps = omit(restProps, treePropsField);\n  const isMultiple = treeProps.multiple;\n\n  const safeHeight = useSafeHeight({ top: safeAreaInsetTop, bottom: false });\n\n  const [valueMultiple, setValueMultiple] = useState<SelectorValue[]>(\n    Array.isArray(treeProps.value)\n      ? treeProps.value\n      : Array.isArray(treeProps.defaultValue)\n      ? treeProps.defaultValue\n      : []\n  );\n\n  // 同步外面的数据\n  useUpdateEffect(() => {\n    if (treeProps.multiple) {\n      setValueMultiple(treeProps.value as SelectorValue[]);\n    }\n  }, [treeProps.multiple, treeProps.value]);\n\n  const onChangeMultiplePersistFn = usePersistFn((v: TreeValue[]) => {\n    if (onChangeImmediate) {\n      setValueMultiple(onChangeImmediate(v) as SelectorValue[]);\n    } else {\n      setValueMultiple(v);\n    }\n  });\n\n  /**\n   * 点击确定按钮\n   */\n  const onPressOk = usePersistFn(() => {\n    const _onChange = treeProps.onChange as SelectorProps['onChange'];\n\n    _onChange?.(\n      valueMultiple,\n      valueMultiple.map((i) => Tree.findNodeByValue(treeProps.options, i)!)\n    );\n  });\n\n  const contentJSX = (\n    <>\n      <PopupHeader title={title} onClose={onClose} />\n\n      <Tree\n        {...treeProps}\n        value={isMultiple ? valueMultiple : treeProps.value ?? treeProps.defaultValue}\n        onChange={\n          isMultiple\n            ? (v: TreeValue | TreeValue[]) => onChangeMultiplePersistFn(v as TreeValue[])\n            : treeProps.onChange\n        }\n      />\n\n      {treeProps.multiple ? (\n        <ButtonBar alone divider={false} height={60} safeAreaInsetBottom={false}>\n          <Button type='primary' onPress={onPressOk} text={confirmButtonText ?? '确定'} />\n        </ButtonBar>\n      ) : null}\n    </>\n  );\n\n  if (treeProps.search) {\n    return (\n      <PopupPage\n        {...popupProps}\n        visible={visible}\n        onClose={onClose}\n        closeOnPressOverlay={closeOnPressOverlay}\n        onPressOverlay={onClose}\n        round\n        safeAreaInsetBottom\n      >\n        {contentJSX}\n      </PopupPage>\n    );\n  }\n\n  return (\n    <Popup\n      {...popupProps}\n      style={{ maxHeight: safeHeight }}\n      visible={visible}\n      onClose={onClose}\n      closeOnPressOverlay={closeOnPressOverlay}\n      onPressOverlay={onClose}\n      position='bottom'\n      round\n      safeAreaInsetBottom\n    >\n      {contentJSX}\n    </Popup>\n  );\n};\n\nexport default memo(Selector);\n",
      "type": "registry:component"
    }
  ]
}