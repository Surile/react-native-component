{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tab-bar",
  "type": "registry:component",
  "title": "Example tab-bar",
  "author": "@gabimoncha",
  "description": "Displays a button which is always red.",
  "files": [
    {
      "path": "./node_modules/@rnr/example-library/src/components/tab-bar/tab-bar.tsx",
      "content": "import { JSX, memo, useCallback, useEffect, useRef, useState } from 'react';\nimport isNil from 'lodash/isNil';\nimport isNumber from 'lodash/isNumber';\nimport type { LayoutChangeEvent, LayoutRectangle } from 'react-native';\nimport { ScrollView, Text, TouchableOpacity, Animated } from 'react-native';\nimport { useAnimatedStyle, useSharedValue, withTiming } from 'react-native-reanimated';\nimport type { TabBarProps, TabValue } from './interface';\nimport BottomBar from '../bottom-bar';\nimport { useControllableValue, useOriginalDeepCopy, useUpdateEffect } from '../../hooks';\nimport { cn } from '../../lib/utils';\n\nconst TabBar = <T extends TabValue>({\n  options,\n  indicator = false,\n  indicatorWidth,\n  indicatorHeight = 3,\n  tabAlign = 'center',\n  labelBulge = false,\n  height,\n  className,\n  textClassName,\n  textActiveClassName,\n  indicatorClassName,\n  divider = true,\n  ...restProps\n}: TabBarProps<T>) => {\n  const _labelBulge = isNumber(labelBulge) ? labelBulge : labelBulge ? 1.2 : 0;\n  const tabNum = options?.length;\n  const isTabAdaption = tabAlign === 'center';\n  const isTabTextCompact = isNil(indicatorWidth);\n  const isIndicatorWidthLayout = isTabTextCompact || indicatorWidth === 0;\n  const [value, onChange] = useControllableValue(restProps, {\n    defaultValue: options?.[0]?.value,\n  });\n\n  const optionsDeepCopy = useOriginalDeepCopy(options);\n  const [state, setState] = useState({\n    layoutFinish: false,\n  });\n  const layouts = useRef<{ tab: LayoutRectangle; text: LayoutRectangle }[]>(\n    new Array(tabNum).fill({})\n  );\n\n  const AnimatedIndicatorLeft = useRef(new Animated.Value(0));\n  const AnimatedIndicatorWidth = useRef(new Animated.Value(0));\n  const ScrollViewRef = useRef<ScrollView>(null);\n  const ScrollViewWidthRef = useRef(0);\n\n  if (indicator && isNil(height)) {\n    height = 40;\n  }\n\n  const navigateTo = useCallback(\n    (n: number) => {\n      const targetLayout = layouts.current[n];\n      const left =\n        targetLayout.tab.x +\n        (targetLayout.tab.width -\n          (isIndicatorWidthLayout ? targetLayout.text.width : indicatorWidth)) /\n          2;\n      const width = isIndicatorWidthLayout ? targetLayout.text.width : indicatorWidth;\n\n      Animated.parallel([\n        Animated.timing(AnimatedIndicatorLeft.current, {\n          toValue: left,\n          useNativeDriver: false,\n          duration: 300,\n        }),\n        Animated.timing(AnimatedIndicatorWidth.current, {\n          toValue: width,\n          useNativeDriver: false,\n          duration: 300,\n        }),\n      ]).start();\n\n      if (!isTabAdaption) {\n        const hh = ScrollViewWidthRef.current / 2;\n        ScrollViewRef.current?.scrollTo({\n          x: targetLayout.tab.x + targetLayout.tab.width / 2 - hh,\n          animated: true,\n        });\n      }\n    },\n    [indicatorWidth, isIndicatorWidthLayout, isTabAdaption]\n  );\n\n  const initIndicator = useCallback(() => {\n    const layoutItems = layouts.current.filter((item) => item.tab && item.text);\n\n    if (layoutItems.length === layouts.current.length) {\n      setState((s) => ({\n        ...s,\n        layoutFinish: true,\n      }));\n    }\n  }, []);\n\n  useUpdateEffect(() => {\n    setState({\n      layoutFinish: false,\n    });\n  }, [optionsDeepCopy]);\n\n  useEffect(() => {\n    if (state.layoutFinish) {\n      const n = optionsDeepCopy.findIndex((item) => item.value === value);\n\n      navigateTo(n);\n    }\n  }, [value, optionsDeepCopy, state.layoutFinish, navigateTo]);\n\n  const onLayoutScrollView = useCallback((e: LayoutChangeEvent) => {\n    ScrollViewWidthRef.current = e.nativeEvent.layout.width;\n  }, []);\n\n  const genOnPress = (v: T) => () => {\n    onChange(v);\n  };\n\n  const genOnLayoutTab = (i: number) => (e: LayoutChangeEvent) => {\n    layouts.current[i] = {\n      text: layouts.current[i]?.text,\n      tab: e.nativeEvent.layout,\n    };\n\n    initIndicator();\n  };\n\n  const genOnLayoutText = (i: number) => (e: LayoutChangeEvent) => {\n    layouts.current[i] = {\n      tab: layouts.current[i]?.tab,\n      text: e.nativeEvent.layout,\n    };\n\n    initIndicator();\n  };\n\n  const tabs = optionsDeepCopy.map((item, index) => {\n    const isActive = item.value === value;\n\n    return (\n      <TouchableOpacity\n        key={item.value}\n        className={cn('items-center justify-center h-full px-2', {\n          'flex-1': isTabAdaption,\n          'flex-col items-center': item.iconRender,\n        })}\n        activeOpacity={0.6}\n        onPress={isActive ? undefined : genOnPress(item.value)}\n        onLayout={genOnLayoutTab(index)}\n      >\n        {item.iconRender?.(isActive)}\n        {item.label ? (\n          <Text\n            className={cn('text-lg', {\n              'w-full text-center': isTabTextCompact,\n              'mt-1 text-lg': item.iconRender,\n              'text-primary-5 font-medium': isActive,\n              'text-gray-400 font-normal': !isActive,\n            })}\n            style={[\n              isActive && !!_labelBulge\n                ? {\n                    transform: [\n                      {\n                        scaleX: _labelBulge,\n                      },\n                      {\n                        scaleY: _labelBulge,\n                      },\n                    ],\n                  }\n                : {},\n            ]}\n            onLayout={genOnLayoutText(index)}\n          >\n            {item.label}\n            {!isNil(item.badge) ? (\n              <Text className='text-base text-red-400'>\n                {/* React Native Text not support padding or margin, https://reactnative.dev/docs/text.html#containers */}{' '}\n                {item.badge}\n              </Text>\n            ) : null}\n          </Text>\n        ) : null}\n      </TouchableOpacity>\n    );\n  });\n\n  const indicatorJSX =\n    indicator && state.layoutFinish ? (\n      <Animated.View\n        className={cn('bg-primary-5 rounded-full absolute bottom-0 mb-[1px]', indicatorClassName)}\n        style={[\n          {\n            height: indicatorHeight,\n            width: AnimatedIndicatorWidth.current,\n            left: AnimatedIndicatorLeft.current,\n          },\n        ]}\n      />\n    ) : null;\n\n  return (\n    <BottomBar\n      className={cn('flex-row items-center justify-center', className)}\n      {...restProps}\n      height={height}\n      divider={divider}\n    >\n      {isTabAdaption ? (\n        <>\n          {tabs}\n          {indicatorJSX}\n        </>\n      ) : (\n        <ScrollView\n          onLayout={onLayoutScrollView}\n          ref={ScrollViewRef}\n          horizontal\n          bounces={false}\n          className='h-full'\n          contentContainerClassName={cn({\n            'item-center px-2 justify-center min-w-full': _labelBulge,\n            'item-center px-2': !_labelBulge,\n          })}\n          showsHorizontalScrollIndicator={false}\n        >\n          {indicatorJSX}\n          {tabs}\n        </ScrollView>\n      )}\n    </BottomBar>\n  );\n};\n\nexport default memo(TabBar) as <T extends TabValue>(p: TabBarProps<T>) => JSX.Element;\n",
      "type": "registry:component"
    }
  ]
}