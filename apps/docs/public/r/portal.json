{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "portal",
  "type": "registry:component",
  "title": "Example portal",
  "author": "@gabimoncha",
  "description": "Displays a button which is always red.",
  "files": [
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/portal/index.ts",
      "content": "import Portal from './portal'\nexport default Portal\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/portal/portal-consumer.tsx",
      "content": "/* eslint-disable @typescript-eslint/explicit-member-accessibility */\nimport type React from 'react'\nimport { Component } from 'react'\n\nimport type { PortalMethods } from './portal-host'\n\nexport type PortalConsumerProps = {\n  manager: PortalMethods\n  children: React.ReactNode\n}\n\nexport default class PortalConsumer extends Component<PortalConsumerProps> {\n  key: any\n\n  componentDidMount() {\n    this.checkManager()\n\n    // // Delay updating to prevent React from going to infinite loop\n    // await Promise.resolve()\n\n    this.key = this.props.manager.mount(this.props.children)\n  }\n\n  componentDidUpdate() {\n    this.checkManager()\n\n    this.props.manager.update(this.key, this.props.children)\n  }\n\n  componentWillUnmount() {\n    this.checkManager()\n\n    this.props.manager.unmount(this.key)\n  }\n\n  render() {\n    return null\n  }\n\n  private checkManager() {\n    if (!this.props.manager) {\n      throw new Error(\n        'Looks like you forgot to wrap your root component with `Provider` component from `@fruits-chain/react-native-xiaoshu`.\\n\\n' +\n          \"Please read our getting-started guide and make sure you've followed all the required steps.\\n\\n\" +\n          'https://24jieqi.github.io/xiaoshu-doc/component/basic/portal',\n      )\n    }\n  }\n}\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/portal/portal-host.tsx",
      "content": "/* eslint-disable react/jsx-no-constructed-context-values */\n/* eslint-disable no-unmodified-loop-condition */\n/* eslint-disable @typescript-eslint/explicit-member-accessibility */\n/* eslint-disable @typescript-eslint/consistent-type-definitions */\nimport React, { createContext, Component } from 'react'\nimport type { EmitterSubscription } from 'react-native'\nimport {\n  DeviceEventEmitter,\n  // eslint-disable-next-line import/named\n  NativeEventEmitter,\n  StyleSheet,\n  View,\n} from 'react-native'\n\nimport PortalManager from './portal-manager'\n\nexport type PortalHostProps = {\n  children: React.ReactNode\n}\n\nexport type Operation =\n  | { type: 'mount'; key: number; children: React.ReactNode }\n  | { type: 'update'; key: number; children: React.ReactNode }\n  | { type: 'unmount'; key: number }\n\nexport type PortalMethods = {\n  mount: (children: React.ReactNode) => number\n  update: (key: number, children: React.ReactNode) => void\n  unmount: (key: number) => void\n}\n\nexport const PortalContext = createContext<PortalMethods>(null as any)\n// events\nconst addType = 'REACT_NATIVE_XIAOSHU_ADD_PORTAL'\nconst removeType = 'REACT_NATIVE_XIAOSHU_REMOVE_PORTAL'\n// fix react native web does not support DeviceEventEmitter\nconst TopViewEventEmitter = DeviceEventEmitter || new NativeEventEmitter()\n\nclass PortalGuard {\n  private nextKey = 10000\n  add = (e: React.ReactNode) => {\n    const key = this.nextKey++\n    TopViewEventEmitter.emit(addType, e, key)\n    return key\n  }\n  remove = (key: number) => TopViewEventEmitter.emit(removeType, key)\n}\n/**\n * portal\n */\nexport const portal = new PortalGuard()\n/**\n * Portal host renders all of its children `Portal` elements.\n * For example, you can wrap a screen in `Portal.Host` to render items above the screen.\n * If you're using the `Provider` component, it already includes `Portal.Host`.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Text } from 'react-native';\n * import { Portal } from '@fruits-chain/react-native-xiaoshu';\n *\n * export default class MyComponent extends React.Component {\n *   render() {\n *     return (\n *       <Portal.Host>\n *         <Text>Content of the app</Text>\n *       </Portal.Host>\n *     );\n *   }\n * }\n * ```\n *\n * Here any `Portal` elements under `<App />` are rendered alongside `<App />` and will appear above `<App />` like a `Modal`.\n */\nexport default class PortalHost extends Component<PortalHostProps> {\n  static displayName = 'Portal.Host'\n\n  nextKey = 0\n  queue: Operation[] = []\n  manager: PortalManager | undefined | null\n\n  addTypeEmitter: EmitterSubscription\n  removeTypeEmitter: EmitterSubscription\n\n  componentDidMount() {\n    const manager = this.manager\n    const queue = this.queue\n\n    this.addTypeEmitter = TopViewEventEmitter.addListener(addType, this.mount)\n    this.removeTypeEmitter = TopViewEventEmitter.addListener(\n      removeType,\n      this.unmount,\n    )\n\n    while (queue.length && manager) {\n      const action = queue.pop()\n      if (!action) {\n        continue\n      }\n      // tslint:disable-next-line:switch-default\n      switch (action.type) {\n        case 'mount':\n          manager.mount(action.key, action.children)\n          break\n        case 'update':\n          manager.update(action.key, action.children)\n          break\n        case 'unmount':\n          manager.unmount(action.key)\n          break\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.addTypeEmitter.remove) {\n      this.addTypeEmitter.remove()\n    } else {\n      // TODO 旧版本如何做兼容\n      // @ts-ignore\n      TopViewEventEmitter.removeListener?.(addType, this.mount)\n    }\n\n    if (this.removeTypeEmitter.remove) {\n      this.removeTypeEmitter.remove()\n    } else {\n      // TODO 旧版本如何做兼容\n      // @ts-ignore\n      TopViewEventEmitter.removeListener?.(removeType, this.unmount)\n    }\n  }\n\n  setManager = (manager?: PortalManager | undefined | null) => {\n    this.manager = manager\n  }\n\n  mount = (children: React.ReactNode, _key?: number) => {\n    const key = _key || this.nextKey++\n    if (this.manager) {\n      this.manager.mount(key, children)\n    } else {\n      this.queue.push({ type: 'mount', key, children })\n    }\n\n    return key\n  }\n\n  update = (key: number, children: React.ReactNode) => {\n    if (this.manager) {\n      this.manager.update(key, children)\n    } else {\n      const op: Operation = { type: 'mount', key, children }\n      const index = this.queue.findIndex(\n        o => o.type === 'mount' || (o.type === 'update' && o.key === key),\n      )\n\n      if (index > -1) {\n        this.queue[index] = op\n      } else {\n        this.queue.push(op)\n      }\n    }\n  }\n\n  unmount = (key: number) => {\n    if (this.manager) {\n      this.manager.unmount(key)\n    } else {\n      this.queue.push({ type: 'unmount', key })\n    }\n  }\n\n  render() {\n    return (\n      <PortalContext.Provider\n        value={{\n          mount: this.mount,\n          update: this.update,\n          unmount: this.unmount,\n        }}>\n        {/* Need collapsable=false here to clip the elevations, otherwise they appear above Portal components */}\n        <View style={styles.container} collapsable={false}>\n          {this.props.children}\n        </View>\n        <PortalManager ref={this.setManager} />\n      </PortalContext.Provider>\n    )\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n})\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/portal/portal-manager.tsx",
      "content": "/* eslint-disable @typescript-eslint/explicit-member-accessibility */\nimport React, { PureComponent } from 'react'\nimport { View, StyleSheet } from 'react-native'\n\nexport type State = {\n  portals: Array<{\n    key: number\n    children: React.ReactNode\n  }>\n}\n\n/**\n * Portal host is the component which actually renders all Portals.\n */\nexport default class PortalManager extends PureComponent<{}, State> {\n  state: State = {\n    portals: [],\n  }\n\n  mount = (key: number, children: React.ReactNode) => {\n    this.setState(state => ({\n      portals: [...state.portals, { key, children }],\n    }))\n  }\n\n  update = (key: number, children: React.ReactNode) =>\n    this.setState(state => ({\n      portals: state.portals.map(item => {\n        if (item.key === key) {\n          return { ...item, children }\n        }\n        return item\n      }),\n    }))\n\n  unmount = (key: number) =>\n    this.setState(state => ({\n      portals: state.portals.filter(item => item.key !== key),\n    }))\n\n  render() {\n    return this.state.portals.map(({ key, children }) => (\n      <View\n        key={key}\n        collapsable={\n          false /* Need collapsable=false here to clip the elevations, otherwise they appear above sibling components */\n        }\n        pointerEvents=\"box-none\"\n        style={StyleSheet.absoluteFill}>\n        {children}\n      </View>\n    ))\n  }\n}\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/portal/portal.tsx",
      "content": "/* eslint-disable @typescript-eslint/explicit-member-accessibility */\n/* eslint-disable @typescript-eslint/consistent-type-definitions */\nimport React, { Component } from 'react'\n\nimport PortalConsumer from './portal-consumer'\nimport PortalHost, { portal, PortalContext } from './portal-host'\n\nexport type PortalProps = {\n  /**\n   * Content of the `Portal`.\n   */\n  children?: React.ReactNode\n}\n\n/**\n * Portal allows to render a component at a different place in the parent tree.\n * You can use it to render content which should appear above other elements, similar to `Modal`.\n * It requires a `Portal.Host` component to be rendered somewhere in the parent tree.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Text } from 'react-native';\n * import { Portal } from '@fruits-chain/react-native-xiaoshu';\n *\n * export default class MyComponent extends React.Component {\n *   render() {\n *     const { visible } = this.state;\n *     return (\n *       <Portal>\n *         <Text>This is rendered at a different place</Text>\n *       </Portal>\n *     );\n *   }\n * }\n * ```\n */\nclass Portal extends Component<PortalProps> {\n  static Host = PortalHost\n  static add = portal.add\n  static remove = portal.remove\n  render() {\n    const { children } = this.props\n\n    return (\n      <PortalContext.Consumer>\n        {manager => (\n          <PortalConsumer manager={manager}>{children}</PortalConsumer>\n        )}\n      </PortalContext.Consumer>\n    )\n  }\n}\n\nexport default Portal\n",
      "type": "registry:component"
    }
  ]
}