{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "cell",
  "type": "registry:component",
  "title": "Example cell",
  "author": "@gabimoncha",
  "description": "Displays a button which is always red.",
  "registryDependencies": [
    "https://react-native-component-docs.vercel.app/r/divider.json",
    "https://react-native-component-docs.vercel.app/r/hooks.json",
    "https://react-native-component-docs.vercel.app/r/helpers.json"
  ],
  "files": [
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/cell/cell-group.tsx",
      "content": "import { cva } from 'class-variance-authority';\nimport isNil from 'lodash/isNil';\nimport React, { memo } from 'react';\nimport { View, TouchableWithoutFeedback, Text } from 'react-native';\nimport { cn } from '../../lib/utils';\n\nimport Divider from '../divider';\nimport type { CellGroupProps } from './interface';\n\nconst groupVariants = cva('', {\n  variants: {\n    hasTitle: {\n      true: 'px-4 py-3 bg-fill-1',\n    },\n  },\n  defaultVariants: {\n    hasTitle: false,\n  },\n});\n\n/**\n * CellGroup 单元格组\n * @description 一组单元格，可以设置一个标题。\n */\nconst CellGroup: React.FC<CellGroupProps> = ({\n  children,\n  title,\n  extra,\n  titleClassName,\n  bodyClassName,\n  bodyTopDivider = false,\n  bodyBottomDivider = false,\n  onPressTitle,\n  onPressTitleText,\n  className,\n}) => {\n  const titleContent =\n    typeof title === 'string' ? (\n      <Text className={cn('text-text-3 text-2xl', titleClassName)} onPress={onPressTitleText}>\n        {title}\n      </Text>\n    ) : (\n      title\n    );\n\n  const groupNameContent = (\n    <View className={cn(groupVariants({ hasTitle: !!title || !!extra }), className)}>\n      {titleContent}\n      {extra}\n    </View>\n  );\n\n  const bodyContent = (\n    <>\n      {bodyTopDivider && <Divider />}\n      {children}\n      {bodyBottomDivider && <Divider />}\n    </>\n  );\n\n  return (\n    <>\n      {(titleContent || !isNil(extra)) &&\n        (onPressTitle ? (\n          <TouchableWithoutFeedback onPress={onPressTitle}>\n            {groupNameContent}\n          </TouchableWithoutFeedback>\n        ) : (\n          groupNameContent\n        ))}\n      {bodyClassName ? <View className={bodyClassName}>{bodyContent}</View> : bodyContent}\n    </>\n  );\n};\n\nexport default memo(CellGroup);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/cell/cell.tsx",
      "content": "import { cva } from 'class-variance-authority';\nimport noop from 'lodash/noop';\nimport React, { memo } from 'react';\nimport { Text, View, Pressable } from 'react-native';\nimport { cn } from '../../lib/utils';\n\nimport Divider from '../divider';\nimport type { CellProps } from './interface';\nimport { useDebounceFn } from '../../hooks';\nimport { getArrowOutline } from '../../helpers';\n\nconst cellVariants = cva('bg-fill-white', {\n  variants: {\n    vertical: {\n      true: 'flex-col',\n      false: 'flex-row items-center',\n    },\n    hasExtra: {\n      true: 'pb-3',\n    },\n    center: {\n      true: 'self-center',\n    },\n    pressed: {\n      true: 'bg-fill-2',\n    },\n  },\n  defaultVariants: {\n    vertical: false,\n    hasExtra: false,\n    center: false,\n    pressed: false,\n  },\n});\n\nconst titleVariants = cva('flex-row items-center', {\n  variants: {\n    center: {\n      true: 'self-center',\n    },\n  },\n  defaultVariants: {\n    center: false,\n  },\n});\n\nconst valueVariants = cva('flex-1 min-w-0', {\n  variants: {\n    hasValue: {\n      true: 'min-w-[100px]',\n    },\n    center: {\n      true: 'self-center',\n    },\n    textAlign: {\n      left: 'text-left',\n      right: 'text-right',\n      center: 'text-center',\n    },\n  },\n  defaultVariants: {\n    hasValue: false,\n    center: false,\n    textAlign: 'right',\n  },\n});\n\n/**\n * Cell 单元格\n * @description 单元格为列表中的单个展示项。\n */\nconst Cell: React.FC<CellProps> = ({\n  title,\n  titleClassName,\n  titleTextClassName,\n  titleExtra,\n  value,\n  valueClassName,\n  valueTextClassName,\n  valueExtra,\n  extra,\n  extraTextClassName,\n  contentClassName,\n  divider = true,\n  dividerLeftGap = 8,\n  dividerRightGap = 8,\n  isLink = false,\n  onPressLink,\n  center = false,\n  arrowDirection = 'right',\n  required = false,\n  vertical = false,\n  valueTextNumberOfLines,\n  titleTextNumberOfLines,\n  textAlign = 'right',\n  onPressDebounceWait = 0,\n  className,\n  underlayColor,\n  innerClassName,\n  ...restProps\n}) => {\n  const { run: runOnPress } = useDebounceFn(restProps.onPress || noop, {\n    wait: onPressDebounceWait,\n    leading: true,\n    trailing: false,\n  });\n\n  if (vertical) {\n    textAlign = 'left';\n  }\n\n  const requiredJSX = required ? (\n    <View className='mr-1' testID='CELL_REQUIRED'>\n      <Text className='text-danger-4 text-lg leading-none'>*</Text>\n    </View>\n  ) : null;\n\n  const titleJSX =\n    typeof title === 'string' ? (\n      <Text\n        className={cn('text-text-4 text-2xl', titleTextClassName)}\n        style={{\n          paddingVertical: (32 - 22) / 2,\n        }}\n        numberOfLines={titleTextNumberOfLines}\n      >\n        {title}\n      </Text>\n    ) : (\n      title\n    );\n\n  const valueJSX =\n    typeof value === 'string' ? (\n      <Text\n        className={cn('text-text-3 text-2xl', valueTextClassName)}\n        style={{\n          textAlign,\n          paddingVertical: (32 - 22) / 2,\n        }}\n        numberOfLines={valueTextNumberOfLines}\n      >\n        {value}\n      </Text>\n    ) : (\n      value\n    );\n\n  const extraJSX =\n    typeof extra === 'string' ? (\n      <Text\n        style={{\n          marginHorizontal: 9,\n          paddingBottom: 10,\n        }}\n        className={cn('text-text-3 text-2xl', extraTextClassName)}\n      >\n        {extra}\n      </Text>\n    ) : (\n      extra\n    );\n  const IconArrow = getArrowOutline(arrowDirection);\n  const linkJSX = isLink ? (\n    <IconArrow\n      testID='CELL_LINK_ARROW'\n      size={16}\n      color={'#8C9199'}\n      onPress={onPressLink}\n      className='self-center ml-2'\n    />\n  ) : null;\n\n  const ctxJSX = (\n    <>\n      <View\n        className={cn(\n          'flex-1',\n          valueVariants({ hasValue: !!valueJSX, center, textAlign }),\n          valueClassName\n        )}\n      >\n        {valueJSX}\n      </View>\n      {valueExtra}\n      {linkJSX}\n    </>\n  );\n\n  return (\n    <Pressable\n      {...restProps}\n      onPress={\n        restProps.onPress ? (onPressDebounceWait ? runOnPress : restProps.onPress) : undefined\n      }\n      className={cn('bg-fill-white', className)}\n      style={({ pressed }) => [\n        pressed &&\n        (restProps.onPress || restProps.onLongPress || restProps.onPressIn || restProps.onPressOut)\n          ? {\n              backgroundColor: underlayColor,\n            }\n          : undefined,\n      ]}\n    >\n      <View\n        className={cn(\n          'relative py-3 mx-[9px]',\n          {\n            'flex-row': !vertical,\n            'pb-0': extra,\n          },\n          innerClassName\n        )}\n      >\n        <View\n          className={cn('relative flex-row mr-2 shrink', titleVariants({ center }), titleClassName)}\n        >\n          {requiredJSX}\n          {titleExtra}\n          {titleJSX}\n        </View>\n\n        {vertical ? (\n          <View className={cn('flex-row items-center mt-2', contentClassName)}>{ctxJSX}</View>\n        ) : (\n          ctxJSX\n        )}\n      </View>\n      {extraJSX}\n      {divider && (\n        <Divider\n          style={{\n            marginLeft: dividerLeftGap,\n            marginRight: dividerRightGap,\n          }}\n        />\n      )}\n    </Pressable>\n  );\n};\n\nexport default memo(Cell);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/cell/index.ts",
      "content": "\nimport { attachPropertiesToComponent } from '../../helpers'\nimport Cell from './cell'\nimport CellGroup from './cell-group'\n\nexport default attachPropertiesToComponent(Cell, {\n  Group: CellGroup,\n})\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/cell/interface.ts",
      "content": "import type { PropsWithChildren, ReactNode } from 'react'\nimport type {\n  ViewStyle,\n  TextStyle,\n  TouchableHighlightProps,\n  PressableProps,\n  StyleProp,\n  TextProps,\n  TouchableOpacityProps,\n  TouchableWithoutFeedbackProps,\n} from 'react-native'\n\n\nexport interface CellGroupProps extends PropsWithChildren<{}> {\n  /**\n   * 分组名称\n   */\n  title?: ReactNode\n\n  /**\n   * 头部右侧自定义内容\n   */\n  extra?: ReactNode\n\n  /**\n   * 自定义样式\n   */\n  className?: string\n\n  /**\n   * 分组名称自定义文字样式\n   */\n  titleClassName?: string\n\n  /**\n   * body 区域自定义样式\n   */\n  bodyClassName?: string\n\n  /**\n   * 是否显示 body 区域上方分割线\n   * @default false\n   */\n  bodyTopDivider?: boolean\n\n  /**\n   * 是否显示 body 区域下方分割线\n   * @default false\n   */\n  bodyBottomDivider?: boolean\n\n  /**\n   * 点击分组名称区域的回调函数，包含 title、extra\n   */\n  onPressTitle?: TouchableWithoutFeedbackProps['onPress']\n\n  /**\n   * 点击分组名称文字的回调函数\n   */\n  onPressTitleText?: TextProps['onPress']\n}\n\nexport interface CellPrivateProps {\n  /**\n   * 内部布局样式\n   */\n  innerClassName?: string\n\n  /**\n   * 左侧标题\n   */\n  title?: ReactNode\n\n  /**\n   * 左侧标题样式，作用元素内部有必填标志、titleExtra、title\n   */\n  titleClassName?: string\n\n  /**\n   * 左侧标题样文案式\n   */\n  titleTextClassName?: string\n\n  /**\n   * 标题的左侧自定义内容\n   */\n  titleExtra?: ReactNode\n\n  /**\n   * 右侧内容\n   */\n  value?: ReactNode\n\n  /**\n   * 右侧内容样式，作用元素内部有 value\n   */\n  valueClassName?: string\n\n  /**\n   * 右侧内容文案样式\n   */\n  valueTextClassName?: string\n\n  /**\n   * 右侧内容的右侧自定义内容\n   */\n  valueExtra?: ReactNode\n\n  /**\n   * 单元格下方的描述信息\n   */\n  extra?: ReactNode\n\n  /**\n   * 描述信息文案样式\n   */\n  extraTextClassName?: string\n\n  /**\n   * 垂直模式模式下右侧内容包裹的样式，作用元素内部有 valueStyle、valueExtra、linkJSX\n   */\n  contentClassName?: string\n\n  /**\n   * 是否显示分割线\n   * @default true\n   */\n  divider?: boolean\n\n  /**\n   * 分割线左侧边距\n   * @default cell_group_title_padding_horizontal\n   */\n  dividerLeftGap?: number\n\n  /**\n   * 分割线左侧边距\n   * @default cell_group_title_padding_horizontal\n   */\n  dividerRightGap?: number\n\n  /**\n   * 是否展示右侧箭头\n   * @default false\n   */\n  isLink?: boolean\n\n  /**\n   * 点击右侧箭头图标\n   */\n  onPressLink?: TouchableOpacityProps['onPress']\n\n  /**\n   * 是否使内容垂直居中\n   * @default false\n   */\n  center?: boolean\n\n  /**\n   * 箭头方向\n   * @default 'right'\n   */\n  arrowDirection?: 'left' | 'up' | 'right' | 'down'\n\n  /**\n   * 是否显示表单必填星号\n   * @default false\n   */\n  required?: boolean\n\n  /**\n   * 垂直布局，title 在上，value 在下\n   * @default false\n   */\n  vertical?: boolean\n\n  /**\n   * value 区域 Text 的 numberOfLines\n   */\n  valueTextNumberOfLines?: number\n\n  /**\n   * title 区域 Text 的 numberOfLines\n   */\n  titleTextNumberOfLines?: number\n\n  /**\n   * 文字对齐方向\n   * @default 'right'\n   */\n  textAlign?: 'right' | 'center' | 'left'\n\n  /**\n   * onPress debounce wait\n   * @default 0\n   */\n  onPressDebounceWait?: number\n}\n\nexport interface CellProps\n  extends Omit<PressableProps, 'style' | 'children'>,\n    Pick<TouchableHighlightProps, 'underlayColor'>,\n    CellPrivateProps {\n  style?: StyleProp<ViewStyle>\n}\n",
      "type": "registry:component"
    }
  ]
}