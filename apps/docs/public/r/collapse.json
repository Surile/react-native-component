{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "collapse",
  "type": "registry:component",
  "title": "Example collapse",
  "author": "@gabimoncha",
  "description": "Displays a button which is always red.",
  "registryDependencies": [
    "https://react-native-component-docs.vercel.app/r/card.json",
    "https://react-native-component-docs.vercel.app/r/cell.json",
    "https://react-native-component-docs.vercel.app/r/divider.json",
    "https://react-native-component-docs.vercel.app/r/helpers.json",
    "https://react-native-component-docs.vercel.app/r/hooks.json"
  ],
  "files": [
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/collapse/collapse.tsx",
      "content": "import isUndefined from 'lodash/isUndefined';\nimport React, { useRef, useCallback, useEffect, memo } from 'react';\nimport type { LayoutChangeEvent } from 'react-native';\nimport { Animated, View } from 'react-native';\n\nimport Card from '../card';\nimport Cell from '../cell';\nimport Divider from '../divider';\n\nimport type { CollapseProps } from './interface';\nimport { easing, getArrowOutline, getDefaultValue } from '../../helpers';\nimport { useControllableValue, usePersistFn } from '../../hooks';\nimport { cn } from '../../lib/utils';\n\n/**\n * Collapse 折叠面板\n */\nconst Collapse: React.FC<CollapseProps> = ({\n  children,\n  title,\n  titleClassName,\n  titleTextClassName,\n  iconStyle,\n  iconColor,\n  iconSize,\n  bodyClassName,\n  renderTitle,\n  renderTitleExtra,\n  renderBody,\n  type = 'cell',\n  onAnimationEnd,\n  bodyPadding = true,\n  headerDivider = true,\n  bodyDivider,\n  lazyRender = true,\n  square = true,\n\n  testID,\n\n  ...restProps\n}) => {\n  bodyDivider = getDefaultValue(bodyDivider, type === 'cell');\n\n  const [collapse, onCollapse] = useControllableValue(restProps, {\n    defaultValuePropName: 'defaultCollapse',\n    valuePropName: 'collapse',\n    trigger: 'onCollapse',\n    defaultValue: false,\n  });\n  const onAnimationEndPersistFn = usePersistFn((v: boolean) => {\n    onAnimationEnd?.(v);\n  });\n  /** 记录当前是否可见，在不断 onLayout 的时候可以有一个判断的依据 */\n  const Visible = useRef(collapse);\n  const BodyHeight = useRef(0);\n  const MountedRef = useRef(false);\n  const AnimatedValue = useRef(new Animated.Value(0)).current;\n  const toggleBody = useCallback(\n    (v: boolean, immediately: boolean) => {\n      const action = Animated.timing(AnimatedValue, {\n        toValue: v ? BodyHeight.current : 0,\n        duration: immediately ? 0 : 300,\n        useNativeDriver: false,\n        easing: v ? easing.easeOutCirc : easing.easeInCubic,\n      });\n\n      action.start(({ finished }) => {\n        if (finished) {\n          onAnimationEndPersistFn(v);\n        }\n      });\n    },\n    [AnimatedValue, onAnimationEndPersistFn]\n  );\n\n  // 初始化好组件\n  useEffect(() => {\n    MountedRef.current = true;\n  }, []);\n\n  useEffect(() => {\n    // 同步当前的状态\n    Visible.current = collapse;\n\n    toggleBody(collapse, false);\n  }, [collapse, toggleBody]);\n\n  const onPressTitle = useCallback(() => {\n    onCollapse(!Visible.current);\n  }, [onCollapse]);\n\n  const onLayoutBody = useCallback(\n    (e: LayoutChangeEvent) => {\n      // 有点疑惑，折叠的过程中，高度在动态变化，通过 absolute 布局解决无法完全渲染\n      BodyHeight.current = e.nativeEvent.layout.height;\n      console.log('🚀 ~ Collapse ~ e.nativeEvent.layout.height:', e.nativeEvent.layout.height);\n      // 展开的过程中才会存在动态高度\n      if (Visible.current) {\n        // 当收齐的时候已知高度\n        toggleBody(Visible.current, Visible.current);\n      }\n    },\n    [toggleBody]\n  );\n\n  const ArrowOutline = getArrowOutline(collapse ? 'up' : 'down');\n  const arrowJSX = (\n    <ArrowOutline\n      style={iconStyle}\n      color={!isUndefined(iconColor) ? iconColor : '#8C9199'}\n      size={!isUndefined(iconSize) ? iconSize : 16}\n    />\n  );\n  const titleJSX = renderTitle ? renderTitle(collapse) : title;\n  const titleExtraJSX = renderTitleExtra ? renderTitleExtra(collapse, arrowJSX) : arrowJSX;\n  const bodyJSX =\n    lazyRender && !MountedRef.current && !collapse ? null : renderBody ? renderBody() : children;\n  console.log('🚀 ~ cn ~ AnimatedValue:', AnimatedValue);\n\n  const ctxJSX = (\n    <Animated.View className={cn('overflow-hidden bg-white')} style={{ height: AnimatedValue }}>\n      <View\n        collapsable={false}\n        className={cn('absolute left-0 right-0 top-0')}\n        onLayout={onLayoutBody}\n      >\n        <View\n          className={cn(\n            {\n              'p-3': bodyPadding,\n            },\n            bodyClassName\n          )}\n        >\n          {bodyJSX}\n        </View>\n\n        {bodyDivider ? <Divider type='light' className='mx-3' /> : null}\n      </View>\n    </Animated.View>\n  );\n\n  if (type === 'card') {\n    return (\n      <Card\n        square={square}\n        title={titleJSX}\n        extra={titleExtraJSX}\n        headerDivider={headerDivider}\n        titleClassName={titleClassName}\n        titleTextClassName={titleTextClassName}\n        bodyPadding={false}\n        onPressHeader={onPressTitle}\n        testID={testID}\n      >\n        {ctxJSX}\n      </Card>\n    );\n  }\n\n  return (\n    <>\n      <Cell\n        title={titleJSX}\n        titleClassName={titleClassName}\n        titleTextClassName={titleTextClassName}\n        valueExtra={titleExtraJSX}\n        onPress={onPressTitle}\n        divider={headerDivider}\n        testID={testID}\n      />\n      {ctxJSX}\n    </>\n  );\n};\n\nexport default memo(Collapse);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/collapse/index.ts",
      "content": "\nimport Collapse from './collapse'\n\nexport default Collapse; \n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/collapse/interface.ts",
      "content": "import type { PropsWithChildren, ReactNode } from 'react'\nimport type {\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n  ColorValue,\n  ViewProps,\n} from 'react-native'\n\nexport interface CollapseProps\n  extends PropsWithChildren<{}>,\n    Pick<ViewProps, 'testID'> {\n  /**\n   * 标题\n   */\n  title?: ReactNode\n\n  /**\n   * 标题样式\n   */\n  titleClassName?: string\n\n  /**\n   * 标题文字样式\n   */\n  titleTextClassName?: string\n\n  /**\n   * 标题图标样式\n   */\n  iconStyle?: StyleProp<ViewStyle>\n\n  /**\n   * 标题图标颜色\n   * @default collapse_title_icon_color\n   */\n  iconColor?: ColorValue\n\n  /**\n   * 标题图标大小\n   * @default collapse_title_icon_size\n   */\n  iconSize?: number\n\n  /**\n   * 子元素/内容布局样式\n   */\n  bodyClassName?: string\n\n  /**\n   * 自定义渲染标题\n   */\n  renderTitle?: (collapse: boolean) => ReactNode\n\n  /**\n   * 自定义渲染标题右侧\n   */\n  renderTitleExtra?: (collapse: boolean, arrowJSX: ReactNode) => ReactNode\n\n  /**\n   * 自定义渲染内容，替换 children\n   */\n  renderBody?: () => ReactNode\n\n  /**\n   * 是否展开\n   */\n  collapse?: boolean\n\n  /**\n   * 默认状态是否展开\n   */\n  defaultCollapse?: boolean\n\n  /**\n   * 状态改变的回调\n   */\n  onCollapse?: (collapse: boolean) => void\n\n  /**\n   * 模式、场景\n   * @default 'cell'\n   */\n  type?: 'cell' | 'card'\n\n  /**\n   * 动画结束的回调，注意组件渲染问题，会存在多次回调\n   */\n  onAnimationEnd?: (collapse: boolean) => void\n\n  /**\n   * 内容区域是否有内边距\n   * @default true\n   */\n  bodyPadding?: boolean\n\n  /**\n   * 头部区域是否有分割线\n   * @default true\n   */\n  headerDivider?: boolean\n\n  /**\n   * 内容区域是否有分割线，cell 默认 true，card 默认false\n   */\n  bodyDivider?: boolean\n\n  /**\n   * 是否在展开的时候才渲染子元素\n   * @default true\n   */\n  lazyRender?: boolean\n\n  /**\n   * 是否为方形，仅对 card 类型有效\n   * @default true\n   */\n  square?: boolean\n}\n",
      "type": "registry:component"
    }
  ]
}