{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dropdown",
  "type": "registry:component",
  "title": "Example dropdown",
  "author": "@gabimoncha",
  "description": "Displays a button which is always red.",
  "registryDependencies": [
    "https://react-native-component-docs.vercel.app/r/components.json",
    "https://react-native-component-docs.vercel.app/r/helpers.json",
    "https://react-native-component-docs.vercel.app/r/portal.json",
    "https://react-native-component-docs.vercel.app/r/hooks.json",
    "https://react-native-component-docs.vercel.app/r/popup.json",
    "https://react-native-component-docs.vercel.app/r/tree.json",
    "https://react-native-component-docs.vercel.app/r/date-picker.json",
    "https://react-native-component-docs.vercel.app/r/date-picker-view.json",
    "https://react-native-component-docs.vercel.app/r/button.json"
  ],
  "files": [
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/dropdown/context.ts",
      "content": "import { createContext, useContext } from 'react';\nimport type { DropdownContext } from './interface';\n\nexport const DropdownConfig = createContext<DropdownContext>({} as DropdownContext);\n\nexport const useDropdownConfig = () => useContext(DropdownConfig);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/dropdown/dropdown-badge.tsx",
      "content": "import React, { memo } from 'react';\nimport isNil from 'lodash/isNil';\nimport { Text } from 'react-native';\nimport type { DropdownBadgeProps } from './interface';\nimport { cn } from '../../lib/utils';\n\nconst DropdownBadge: React.FC<DropdownBadgeProps> = ({ count, ...restProps }) => {\n  if (isNil(count)) {\n    return null;\n  }\n\n  if (count === true) {\n    return (\n      <Text {...restProps} className={cn('size-[8px] rounded bg-danger-4', restProps.className)} />\n    );\n  }\n\n  return (\n    <Text {...restProps} className={cn('text-danger-4 text-sm', restProps.className)}>\n      {count}\n    </Text>\n  );\n};\n\nexport default memo(DropdownBadge);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/dropdown/dropdown-filter-panel.tsx",
      "content": "import { memo, ReactNode, useCallback, useEffect, useRef, useState } from 'react';\nimport { pick } from 'lodash';\nimport { Text, TouchableOpacity, View } from 'react-native';\nimport DropdownPopup from './dropdown-popup';\nimport DropdownTypeItems, { DropdownTypeItemsProps } from './dropdown-type-items';\nimport { DropdownPopupProps } from './interface';\nimport { getDefaultValue } from '../../helpers';\nimport { cn } from '../../lib/utils';\nimport { useDropdownConfig } from './context';\nimport Portal from '../portal';\n\ntype FilterTypeButtonProps<T> = {\n  /**\n   * 按钮文本\n   */\n  btnText?: string;\n  /**\n   * 自定义按钮Icon\n   */\n  customIcon?: ReactNode;\n  /**\n   * 自定义整个按钮元素\n   * @param handleShowPanel 操作显示弹窗面板\n   * @returns\n   */\n  children?: ({\n    handleShowPanel,\n  }: {\n    /**\n     * 操作显示弹窗面板\n     */\n    handleShowPanel: () => void;\n  }) => ReactNode;\n} & DropdownTypeItemsProps<T>;\n\n/**\n * 筛选类型按钮（点击弹出筛选面板）\n * @param {FilterTypeButtonProps<T>}\n * @returns\n */\nfunction FilterTypeButton<T>({\n  btnText = '筛选',\n  customIcon,\n  children,\n  ...restConfig\n}: FilterTypeButtonProps<T>) {\n  const ViewRef = useRef<View>(null);\n  const config = useDropdownConfig();\n\n  const handleShowPanel = useCallback(() => {\n    config.MenuRef.current?.measure?.((x, y, width, height, pageX, pageY) => {\n      showFilterPopupPanel?.({\n        targetHeight: height,\n        targetPageY: pageY,\n        ...restConfig,\n      })\n        .then((res) => {\n          restConfig?.onValueChange?.(res);\n        })\n        .catch((error) => {\n          console.log('组件：showFilterPopupPanel 出错', error);\n\n          throw new Error('组件：showFilterPopupPanel 出错');\n        });\n    });\n  }, [config.MenuRef, restConfig]);\n\n  const renderElement = () => {\n    if (!children) {\n      return (\n        <View\n          ref={ViewRef}\n          collapsable={false}\n          className='h-full w-16 flex-row items-center justify-center'\n        >\n          <TouchableOpacity\n            className={cn('flex-row items-center justify-center gap-x-[2px]')}\n            onPress={handleShowPanel}\n            activeOpacity={0.8}\n          >\n            <Text className='text-[14px] font-normal text-[#5E5E5E]'>{btnText}</Text>\n            {/* {customIcon ?? <Icon name='search-solid' className='fill-[#B8B8B8]' />} */}\n          </TouchableOpacity>\n        </View>\n      );\n    }\n\n    return children({ handleShowPanel });\n  };\n\n  return renderElement();\n}\n\ninterface FilterPopupPanelProps<T> extends Omit<DropdownPopupProps, 'visible'> {\n  typeItemProps: DropdownTypeItemsProps<T>;\n}\n\n/**\n * 筛选弹窗面板\n * @param props\n * @param {DropdownTypeItemsProps<T>} props.typeItemProps 筛选类型项配置\n * @param {Omit<DropdownPopupProps, 'visible'>} restProps 弹窗配置\n * @returns\n */\nfunction FilterPopupPanel<T>({\n  typeItemProps,\n  duration,\n  zIndex,\n  closeOnPressOutside,\n  ...rest\n}: FilterPopupPanelProps<T>) {\n  const [visible, setVisible] = useState<boolean>(false);\n\n  const config = useDropdownConfig();\n\n  duration = getDefaultValue(duration, config.duration);\n  zIndex = getDefaultValue(zIndex, config.zIndex);\n  closeOnPressOutside = getDefaultValue(closeOnPressOutside, config.closeOnPressOutside);\n\n  useEffect(() => {\n    setVisible(true);\n  }, []);\n\n  return (\n    <DropdownPopup\n      {...rest}\n      duration={duration}\n      zIndex={zIndex}\n      closeOnPressOutside={closeOnPressOutside}\n      visible={visible}\n      onPressShade={() => setVisible(false)}\n      onPressOverlay={() => setVisible(false)}\n    >\n      <DropdownTypeItems\n        {...typeItemProps}\n        onValueChange={(res) => {\n          typeItemProps.onValueChange?.(res);\n          setVisible(false);\n        }}\n      />\n    </DropdownPopup>\n  );\n}\n\n/**\n * 显示筛选弹窗面板\n * @param options\n * @returns\n */\nexport function showFilterPopupPanel<T = any>(\n  options: { targetHeight: number; targetPageY: number } & DropdownTypeItemsProps<T> &\n    Omit<FilterPopupPanelProps<T>, 'typeItemProps'>\n) {\n  return new Promise<{ action: 'confirm' | 'cancel'; result: Record<string, T | T[]> }>(\n    (resolve) => {\n      const key = Portal.add(\n        <FilterPopupPanel\n          {...options}\n          contentClassName={cn('py-[20px] px-4', options.contentClassName)}\n          typeItemProps={{\n            ...pick(options, ['selectedData', 'options', 'confirmText', 'cancelText']),\n            onValueChange: (res) => {\n              options.onValueChange?.(res);\n              resolve(res);\n            },\n          }}\n          onClose={() => {\n            Portal.remove(key);\n          }}\n        />\n      );\n    }\n  );\n}\n\nexport default memo(FilterTypeButton);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/dropdown/dropdown-item.tsx",
      "content": "import React, { memo, useMemo } from 'react';\nimport isNil from 'lodash/isNil';\nimport { useDropdownConfig } from './context';\nimport DropdownSelector from './dropdown-selector';\nimport DropdownText from './dropdown-text';\nimport type { DropdownItemOption, DropdownItemProps } from './interface';\nimport { getDefaultValue } from '../../helpers';\nimport { useControllableValue, usePersistFn } from '../../hooks';\nimport useState from '../../hooks/useStateUpdate';\n\nconst DropdownItem = <T,>({\n  popupTestID,\n  titleClassName,\n  titleTextClassName,\n  options,\n  duration,\n  zIndex,\n  closeOnPressOutside,\n  loading,\n  placeholder = '',\n\n  search,\n  onSearch,\n  cancellable,\n\n  ...restProps\n}: DropdownItemProps<T>) => {\n  const config = useDropdownConfig();\n  const [active, setActive] = useState(false);\n  const [value, onChange] = useControllableValue<T>(restProps);\n  const _selectOption = useMemo(() => {\n    if (loading) {\n      const x: DropdownItemOption<T> = {\n        label: '加载中...',\n        value: null as any,\n      };\n\n      return x;\n    }\n\n    let selectOption = {} as DropdownItemOption<T>;\n\n    const findX = (list: DropdownItemOption<T>[]) => {\n      list.forEach((item) => {\n        if (item.value === value) {\n          selectOption = item;\n        } else if (item.children?.length) {\n          findX(item.children);\n        }\n      });\n    };\n\n    findX(options);\n\n    return selectOption;\n  }, [loading, options, value]);\n\n  duration = getDefaultValue(duration, config.duration);\n  zIndex = getDefaultValue(zIndex, config.zIndex);\n  closeOnPressOutside = getDefaultValue(closeOnPressOutside, config.closeOnPressOutside);\n\n  const onPressText = usePersistFn(() => {\n    // 计算 Menu 的 Top 和元素高度\n\n    config.MenuRef.current?.measure((x, y, width, height, pageX, pageY) => {\n      setActive(true);\n      DropdownSelector({\n        targetHeight: height,\n        targetPageY: pageY,\n        defaultValue: value,\n        options,\n        duration,\n        zIndex,\n        closeOnPressOutside,\n        activeColor: config.activeColor,\n        search,\n        onSearch,\n        cancellable,\n        testID: popupTestID,\n      })\n        .then((d) => {\n          onChange(d.value as T, d.data[0]);\n        })\n        .catch(() => {})\n        .finally(() => {\n          setActive(false);\n        });\n    });\n  });\n\n  return (\n    <DropdownText\n      {...restProps}\n      className={titleClassName}\n      textClassName={titleTextClassName}\n      title={!isNil(_selectOption.label) ? _selectOption.label : placeholder}\n      badge={_selectOption.badge}\n      active={active}\n      onPress={onPressText}\n      disabled={restProps.disabled || loading}\n    />\n  );\n};\n\nexport default memo(DropdownItem) as <T>(p: DropdownItemProps<T>) => React.ReactElement;\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/dropdown/dropdown-menu.tsx",
      "content": "import React, { memo, useEffect, useMemo, useRef } from 'react';\nimport { BackHandler, Platform, View } from 'react-native';\nimport { DropdownConfig } from './context';\nimport type { DropdownMenuProps } from './interface';\nimport { cn } from '../../lib/utils';\n\n/**\n * DropdownMenu 下拉菜单的横条\n */\nconst DropdownMenu: React.FC<DropdownMenuProps> = ({\n  titleClassName,\n  titleTextClassName,\n  iconClassName,\n  activeColor,\n  direction = 'down',\n  duration,\n  zIndex = 10,\n  closeOnPressOutside = true,\n  divider = true,\n  ...restProps\n}) => {\n  const MenuRef = useRef<View>(null);\n\n  const config = useMemo(\n    () => ({\n      titleClassName,\n      titleTextClassName,\n      iconClassName,\n      activeColor,\n      direction,\n      duration,\n      zIndex,\n      closeOnPressOutside,\n      MenuRef,\n    }),\n    [\n      activeColor,\n      closeOnPressOutside,\n      direction,\n      duration,\n      iconClassName,\n      titleClassName,\n      titleTextClassName,\n      zIndex,\n    ]\n  );\n\n  useEffect(() => {\n    if (Platform.OS === 'ios') {\n      return;\n    }\n\n    const listener = BackHandler.addEventListener('hardwareBackPress', () => {\n      return true;\n    });\n\n    return () => {\n      listener.remove();\n    };\n  }, []);\n\n  return (\n    <DropdownConfig.Provider value={config}>\n      <View\n        {...restProps}\n        collapsable={false}\n        ref={MenuRef}\n        className={cn('flex-row items-center h-[40px] bg-white', restProps.className, {\n          'border-b border-b-[#F5F5F5]': divider,\n        })}\n      />\n    </DropdownConfig.Provider>\n  );\n};\n\nexport default memo(DropdownMenu);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/dropdown/dropdown-multiple.tsx",
      "content": "import React, { memo, useMemo } from 'react';\nimport isNil from 'lodash/isNil';\nimport { useDropdownConfig } from './context';\nimport DropdownSelector from './dropdown-selector';\nimport DropdownText from './dropdown-text';\nimport type { DropdownItemOption, DropdownMultipleProps } from './interface';\nimport { getDefaultValue } from '../../helpers';\nimport { useControllableValue, usePersistFn } from '../../hooks';\nimport useState from '../../hooks/useStateUpdate';\n\nconst DropdownMultiple = <T,>({\n  popupTestID,\n  titleClassName,\n  titleTextClassName,\n  options,\n  duration,\n  zIndex,\n  closeOnPressOutside,\n  loading,\n  placeholder = '',\n  beforeChecked,\n  defaultExpandAll,\n  search,\n  onSearch,\n  cancellable,\n  multipleMode,\n  ...restProps\n}: DropdownMultipleProps<T>) => {\n  const config = useDropdownConfig();\n  const [active, setActive] = useState(false);\n  const [value, onChange] = useControllableValue<T[]>(restProps);\n  const _selectOptionLabel = useMemo(() => {\n    if (loading) {\n      return '加载中...';\n    }\n\n    const _label: string[] = [];\n\n    const findX = (list: DropdownItemOption<T>[]) => {\n      list.forEach((item) => {\n        if (value?.indexOf(item.value) > -1) {\n          _label.push(item.label);\n        }\n\n        if (item.children?.length) {\n          findX(item.children);\n        }\n      });\n    };\n\n    findX(options);\n\n    return _label.join('、');\n  }, [loading, options, value]);\n\n  duration = getDefaultValue(duration, config.duration);\n  zIndex = getDefaultValue(zIndex, config.zIndex);\n  closeOnPressOutside = getDefaultValue(closeOnPressOutside, config.closeOnPressOutside);\n\n  const onPressText = usePersistFn(() => {\n    // 计算 Menu 的 Top 和元素高度\n\n    config.MenuRef.current?.measure((x, y, width, height, pageX, pageY) => {\n      setActive(true);\n      DropdownSelector({\n        targetHeight: height,\n        targetPageY: pageY,\n        defaultValue: !isNil(value) ? value : [],\n        options,\n        duration,\n        zIndex,\n        closeOnPressOutside,\n        activeColor: config.activeColor,\n        search,\n        onSearch,\n        cancellable,\n        multiple: true,\n        multipleMode,\n        testID: popupTestID,\n        beforeChecked,\n        defaultExpandAll,\n      })\n        .then((d) => {\n          onChange(d.value as T[], d.data);\n        })\n        .catch(() => {})\n        .finally(() => {\n          setActive(false);\n        });\n    });\n  });\n\n  return (\n    <DropdownText\n      {...restProps}\n      className={titleClassName}\n      textClassName={titleTextClassName}\n      title={!isNil(_selectOptionLabel) && !!_selectOptionLabel ? _selectOptionLabel : placeholder}\n      active={active}\n      onPress={onPressText}\n      disabled={restProps.disabled || loading}\n    />\n  );\n};\n\nexport default memo(DropdownMultiple) as <T>(p: DropdownMultipleProps<T>) => React.ReactElement;\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/dropdown/dropdown-popup.tsx",
      "content": "import React, { useCallback, useMemo, memo } from 'react';\nimport type { ViewStyle, LayoutChangeEvent } from 'react-native';\nimport { TouchableWithoutFeedback, View, useWindowDimensions } from 'react-native';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\nimport useState from '../../hooks/useStateUpdate';\nimport Popup from '../popup/popup';\n\nimport type { DropdownPopupProps } from './interface';\nimport { cn } from '../../lib/utils';\n\nconst POPUP_STYLE: ViewStyle = { backgroundColor: 'transparent' };\n\nconst DropdownPopup: React.FC<DropdownPopupProps> = ({\n  zIndex,\n  closeOnPressOutside = true,\n  targetHeight,\n  targetPageY,\n  onPressShade,\n  safeAreaInset = true,\n  showShade = true,\n  contentClassName,\n\n  children,\n  ...restProps\n}) => {\n  const insets = useSafeAreaInsets();\n  const { height: windowHeight } = useWindowDimensions();\n\n  const [wrapperStyle, setWrapperStyle] = useState<ViewStyle>({\n    maxHeight: 0,\n  });\n\n  /** 弹出层可以的最大高度 */\n  const onLayoutPlace = useCallback((e: LayoutChangeEvent) => {\n    setWrapperStyle({\n      maxHeight: e.nativeEvent.layout.height,\n    });\n  }, []);\n\n  const [_isBottom, _shadeStyles, _boxStyles] = useMemo(() => {\n    const topHeight = targetPageY - insets.top;\n    const bottomHeight = windowHeight - targetPageY - targetHeight - insets.bottom;\n    const isBottom = topHeight >= bottomHeight;\n\n    const shadeStyles: ViewStyle = {\n      position: 'absolute',\n      left: 0,\n      right: 0,\n      zIndex,\n      ...(isBottom\n        ? { top: targetPageY, bottom: 0 }\n        : { top: 0, height: targetPageY + targetHeight }),\n    };\n\n    const boxStyles: ViewStyle = {\n      position: 'absolute',\n      left: 0,\n      right: 0,\n      zIndex,\n      overflow: 'hidden',\n      ...(isBottom\n        ? { top: 0, height: targetPageY }\n        : { top: targetPageY + targetHeight, bottom: 0 }),\n    };\n\n    return [isBottom, shadeStyles, boxStyles];\n  }, [insets.bottom, insets.top, targetHeight, targetPageY, windowHeight, zIndex]);\n\n  const placeholderHeight = _isBottom ? insets.top : insets.bottom;\n  const placeholderJSX = (\n    <TouchableWithoutFeedback onPress={closeOnPressOutside ? onPressShade : undefined}>\n      <View style={{ height: placeholderHeight }} />\n    </TouchableWithoutFeedback>\n  );\n\n  return (\n    <>\n      {restProps.visible && showShade ? (\n        <TouchableWithoutFeedback onPress={closeOnPressOutside ? onPressShade : undefined}>\n          <View style={_shadeStyles} />\n        </TouchableWithoutFeedback>\n      ) : null}\n\n      <View style={_boxStyles} pointerEvents='box-none' onLayout={onLayoutPlace}>\n        <Popup {...restProps} style={POPUP_STYLE} position={_isBottom ? 'bottom' : 'top'}>\n          <View style={wrapperStyle}>\n            {_isBottom && safeAreaInset ? placeholderJSX : null}\n            <View\n              className={cn('bg-white', contentClassName)}\n              style={[\n                {\n                  maxHeight: (wrapperStyle.maxHeight as number) - placeholderHeight,\n                },\n              ]}\n            >\n              {children}\n            </View>\n            {!_isBottom && safeAreaInset ? placeholderJSX : null}\n          </View>\n        </Popup>\n      </View>\n    </>\n  );\n};\n\nexport default memo(DropdownPopup);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/dropdown/dropdown-selector.tsx",
      "content": "import React, { memo, useCallback, useEffect, useMemo, useState } from 'react';\nimport isNil from 'lodash/isNil';\nimport uniqBy from 'lodash/uniqBy';\nimport { Keyboard, Text, TouchableOpacity, View } from 'react-native';\nimport DropdownBadge from './dropdown-badge';\nimport DropdownPopup from './dropdown-popup';\nimport type { DropdownItemOption, DropdownSelectorMethodProps } from './interface';\nimport { isPromise } from '../../helpers';\nimport { usePersistFn } from '../../hooks';\nimport Portal from '../portal';\nimport Tree from '../tree';\nimport type { TreeOption, TreeValue } from '../tree/interface';\nimport { cn } from '../../lib/utils';\n\nconst DropdownSelectorMethod = <T,>({\n  targetHeight,\n  targetPageY,\n  onConfirm,\n  onCancel,\n  defaultValue,\n  options,\n  duration,\n  zIndex,\n  closeOnPressOutside,\n  onClosed,\n  beforeChecked,\n  search,\n  onSearch,\n  cancellable,\n  multiple,\n  multipleMode,\n  defaultExpandAll,\n  testID,\n}: DropdownSelectorMethodProps<T>) => {\n  const [multipleValue, setMultipleValue] = useState<T[]>(\n    multiple ? (defaultValue as T[]) || [] : []\n  );\n  const allOptions = useMemo(() => {\n    const findNode = (op: DropdownItemOption<T>[]) => {\n      const ooo: DropdownItemOption<T>[] = [];\n\n      op.forEach((o) => {\n        ooo.push(o);\n\n        if (o.children?.length) {\n          ooo.push(...findNode(o.children));\n        }\n      });\n\n      return ooo;\n    };\n\n    return findNode(options);\n  }, [options]);\n\n  const [visible, setVisible] = useState(false);\n  const treeOptions = useMemo(() => {\n    const convertOption = (ops: DropdownItemOption<T>[]) => {\n      const nodes: TreeOption[] = [];\n\n      ops.forEach((item) => {\n        const _opt: TreeOption = {\n          label: item.label,\n          value: item.value as unknown as number | string,\n          children: item.children?.length ? convertOption(item.children) : [],\n          render: isNil(item.badge)\n            ? undefined\n            : (p) => {\n                return (\n                  <View className='flex-1 flex-row items-center'>\n                    <Text\n                      className={cn('text-[15px] text-[#11151A]', {\n                        'text-primary': p.labelHighlight,\n                      })}\n                      numberOfLines={1}\n                    >\n                      {p.label}\n                    </Text>\n                    <DropdownBadge count={item.badge} />\n                  </View>\n                );\n              },\n        };\n\n        nodes.push(_opt);\n      });\n\n      return nodes;\n    };\n\n    return convertOption(options);\n  }, [options]);\n\n  useEffect(() => {\n    setVisible(true);\n  }, []);\n\n  const findNodeByValue = (\n    tree: DropdownItemOption<T>[],\n    value: T\n  ): DropdownItemOption<T> | undefined => {\n    for (const item of tree) {\n      if (item.value === value) {\n        return item;\n      }\n\n      if (item.children) {\n        const _v = findNodeByValue(item.children, value);\n\n        if (_v) {\n          return _v;\n        }\n      }\n    }\n\n    return undefined;\n  };\n\n  const onPressShade = useCallback(() => {\n    setVisible(false);\n    Keyboard.dismiss();\n    onCancel?.();\n  }, [onCancel]);\n\n  const onRequestClose = usePersistFn(() => {\n    onPressShade();\n\n    return true;\n  });\n\n  const onChangePersistFn = usePersistFn(\n    (\n      v: TreeValue | TreeValue[],\n      _: TreeOption[],\n      event: {\n        checked: boolean;\n        option: TreeOption;\n      }\n    ) => {\n      if (multiple) {\n        if (beforeChecked) {\n          const returnVal = beforeChecked({\n            value: [],\n            checked: event.checked,\n            option: event.option,\n          });\n\n          if (isPromise(returnVal)) {\n            returnVal.then((nv) => {\n              setMultipleValue((mv) =>\n                uniqBy(\n                  [...mv.filter((mvi) => mvi !== event.option.value), ...nv],\n\n                  (x) => x\n                )\n              );\n            });\n          } else {\n            setMultipleValue((mv) =>\n              uniqBy([...mv.filter((mvi) => mvi !== event.option.value), ...returnVal], (x) => x)\n            );\n          }\n        } else {\n          setMultipleValue(v as T[]);\n        }\n      } else {\n        setVisible(false);\n        Keyboard.dismiss();\n\n        const _v = v as unknown as T;\n        const _o = findNodeByValue(options, _v);\n\n        onConfirm?.(_v as unknown as T, _o ? [_o] : []);\n      }\n    }\n  );\n\n  const onConfirmMultiple = usePersistFn(() => {\n    setVisible(false);\n    Keyboard.dismiss();\n\n    onConfirm?.(\n      multipleValue,\n      multipleValue.map((item) => {\n        return findNodeByValue(options, item)!;\n      })\n    );\n  });\n\n  return (\n    <DropdownPopup\n      testID={testID}\n      targetHeight={targetHeight}\n      targetPageY={targetPageY}\n      closeOnPressOutside={closeOnPressOutside}\n      duration={duration}\n      zIndex={zIndex}\n      onPressShade={onPressShade}\n      visible={visible}\n      onRequestClose={onRequestClose}\n      onClosed={onClosed}\n      onPressOverlay={onPressShade}\n    >\n      <Tree\n        defaultExpandAll={defaultExpandAll}\n        minHeight={false}\n        search={search}\n        options={treeOptions}\n        onChange={onChangePersistFn}\n        onSearch={onSearch}\n        cancellable={cancellable}\n        multiple={multiple}\n        multipleMode={multipleMode}\n        {...(multiple\n          ? {\n              value: multipleValue as string[],\n            }\n          : {\n              defaultValue: defaultValue as unknown as string,\n            })}\n      />\n      {multiple ? (\n        <View className='h-12.5 flex-row items-center overflow-hidden border-t border-t-[#eff3f9] px-3'>\n          <View className='relative min-h-0 min-w-0 flex-row items-center pr-2'>\n            <TouchableOpacity\n              activeOpacity={0.8}\n              className='h-11 min-w-23 items-center justify-center px-2'\n              onPress={() => {\n                if (allOptions.length !== multipleValue.length) {\n                  setMultipleValue(allOptions.map((i) => i.value));\n                } else {\n                  setMultipleValue([]);\n                }\n              }}\n            >\n              <Text className='text-center text-base text-primary'>\n                {allOptions.length !== multipleValue.length ? '全选' : '全不选'}\n              </Text>\n            </TouchableOpacity>\n            <TouchableOpacity\n              className='h-11 min-w-23  items-center justify-center rounded bg-primary/15'\n              activeOpacity={0.8}\n              onPress={onPressShade}\n            >\n              <Text className='text-center text-base text-primary'>取消</Text>\n            </TouchableOpacity>\n          </View>\n          <View className='flex-1'>\n            <TouchableOpacity\n              className='h-11 items-center justify-center rounded bg-primary'\n              activeOpacity={0.8}\n              onPress={onConfirmMultiple}\n            >\n              <Text className='text-center text-base text-white'>确认</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n      ) : null}\n    </DropdownPopup>\n  );\n};\n\nconst DropdownSelectorMethodMemo = memo(DropdownSelectorMethod) as <T>(\n  p: DropdownSelectorMethodProps<T>\n) => React.ReactElement;\n\nexport default <T,>(opt: Omit<DropdownSelectorMethodProps<T>, 'onClosed'>) => {\n  return new Promise<{ value: T | T[]; data: DropdownItemOption<T>[] }>((resolve, reject) => {\n    const key = Portal.add(\n      <DropdownSelectorMethodMemo<T>\n        {...opt}\n        onCancel={() => {\n          opt.onCancel?.();\n          reject(new Error());\n        }}\n        onConfirm={(v, d) => {\n          opt.onConfirm?.(v, d);\n          resolve({\n            value: v,\n            data: d,\n          });\n        }}\n        onClosed={() => {\n          Portal.remove(key);\n        }}\n      />\n    );\n  });\n};\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/dropdown/dropdown-text.tsx",
      "content": "import React, { memo } from 'react';\nimport isNil from 'lodash/isNil';\nimport { Text, TouchableOpacity, View } from 'react-native';\nimport { useDropdownConfig } from './context';\nimport DropdownBadge from './dropdown-badge';\nimport type { DropdownTextProps } from './interface';\nimport { getArrowOutline } from '../../helpers';\nimport { cn } from '../../lib/utils';\n\nconst DropdownText: React.FC<DropdownTextProps> = ({\n  disabled = false,\n  title,\n  active = false,\n  pressable = true,\n  direction,\n  badge,\n  activeOpacity,\n  activeColor,\n  iconClassName,\n  ...restProps\n}) => {\n  const config = useDropdownConfig();\n\n  const showBadge = !active && !isNil(badge) && badge !== false;\n\n  const ArrowFill = getArrowOutline(active ? (direction === 'up' ? 'down' : 'up') : direction);\n\n  const ctxJSX = (\n    <View className='flex-1 flex-row items-center justify-between'>\n      <View className='max-w-full shrink'>\n        <Text\n          className={cn(\n            'shrink text-[15px]',\n            {\n              'mr-[4px]': !showBadge,\n              'text-[#8C9199]': disabled,\n              'text-primary': active,\n              'text-[#5A6068]': !active,\n            },\n            config.titleTextClassName\n          )}\n          numberOfLines={1}\n        >\n          {title}\n        </Text>\n      </View>\n\n      {showBadge ? <DropdownBadge className='-mt-2 ml-0.5 mr-1' /> : null}\n\n      <ArrowFill className={iconClassName} size={12} color={active ? activeColor : '#8C9199'} />\n    </View>\n  );\n\n  if (pressable) {\n    return (\n      <TouchableOpacity\n        {...restProps}\n        className={cn(\n          'flex-1 flex-row items-center justify-center',\n          config.titleClassName,\n          restProps?.className\n        )}\n        disabled={disabled}\n        activeOpacity={activeOpacity}\n      >\n        {ctxJSX}\n      </TouchableOpacity>\n    );\n  }\n\n  return (\n    <View\n      {...restProps}\n      className={cn(\n        'flex-1 flex-row items-center justify-center',\n        config.titleClassName,\n        restProps?.className\n      )}\n    >\n      {ctxJSX}\n    </View>\n  );\n};\n\nexport default memo(DropdownText);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/dropdown/dropdown-time.tsx",
      "content": "import { memo, useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport dayjs from 'dayjs';\nimport { isArray } from 'lodash';\nimport isNil from 'lodash/isNil';\nimport { View } from 'react-native';\nimport { useDropdownConfig } from './context';\nimport DropdownText from './dropdown-text';\nimport type { DropdownTimeProps } from './interface';\nimport DatePicker from '../date-picker';\nimport { DatePickerRangeValue } from '../date-picker/interface';\nimport DatePickerView from '../date-picker-view';\nimport { getDefaultValue } from '../../helpers';\nimport { useControllableValue, usePersistFn } from '../../hooks';\nimport { Portal, Toast } from '..';\nimport { cn } from '../../lib/utils';\nimport DropdownPopup from './dropdown-popup';\nimport Button from '../button/button';\n\nconst DropdownSelectorMethod = ({\n  targetHeight,\n  targetPageY,\n  onConfirm,\n  diasbledDate,\n  onCancel,\n  duration,\n  zIndex,\n  closeOnPressOutside,\n  onClosed,\n  testID,\n  mode,\n  clearable,\n  clearButtonText,\n  confirmButtonText,\n  method = 'Range',\n  onClear,\n  initialValue,\n  ...restProps\n}: Omit<DropdownTimeProps, 'placeholder'>) => {\n  const [visible, setVisible] = useState(false);\n  const defaultValue =\n    method === 'Range' ? restProps.value || [null, null] : dayjs(restProps?.value as any).toDate();\n\n  const [value, setValue] = useState<DatePickerRangeValue | Date>(defaultValue);\n\n  const Values = useRef<DatePickerRangeValue | Date>(defaultValue);\n\n  useEffect(() => {\n    setVisible(true);\n    Values.current = value as any;\n  }, [value]);\n\n  const onPressShade = useCallback(() => {\n    setVisible(false);\n    onCancel?.();\n  }, [onCancel]);\n\n  const onRequestClose = usePersistFn(() => {\n    onPressShade();\n\n    return true;\n  });\n\n  const onChangePickView = usePersistFn((v) => {\n    console.log('🚀 ~ onChangePickView ~ v:', v);\n    Values.current = v;\n    setValue(Values.current);\n  });\n\n  const onPressClear = usePersistFn(() => {\n    if (method === 'Range') {\n      setValue([null, null]);\n    } else {\n      setValue(new Date());\n    }\n\n    Values.current = value;\n    console.log('🚀 ~ onPressClear ~ Values.current:', Values.current);\n\n    onClear?.(Values.current);\n  });\n\n  const onConfirmTime = usePersistFn(() => {\n    if (isArray(Values.current) && !Values.current?.[1]) {\n      Toast({\n        type: 'text',\n        message: '请选择结束时间',\n      });\n\n      return;\n    }\n\n    if (diasbledDate?.(Values.current)) {\n      return;\n    }\n\n    setVisible(false);\n\n    onConfirm?.(Values.current);\n  });\n\n  return (\n    <DropdownPopup\n      testID={testID}\n      targetHeight={targetHeight}\n      targetPageY={targetPageY}\n      closeOnPressOutside={closeOnPressOutside}\n      duration={duration}\n      zIndex={zIndex}\n      onPressShade={onPressShade}\n      visible={visible}\n      onRequestClose={onRequestClose}\n      onClosed={onClosed}\n      onPressOverlay={onPressShade}\n      contentClassName='py-3'\n    >\n      {method === 'Range' ? (\n        <DatePicker.RangeView\n          onConfirm={onConfirmTime}\n          mode={mode}\n          initialValue={initialValue || [dayjs().toDate(), dayjs().toDate()]}\n          value={value as any}\n          clearButtonText={clearButtonText}\n          clearable={clearable}\n          confirmButtonText={confirmButtonText}\n          min={restProps?.min}\n          max={restProps?.max}\n          onChange={onChangePickView}\n          onClear={onPressClear}\n        />\n      ) : (\n        <>\n          <DatePickerView\n            mode={mode}\n            min={restProps.min}\n            max={restProps.max}\n            value={value as any}\n            onChange={onChangePickView}\n          />\n          <View className='flex-row gap-x-3 px-4'>\n            <View className={cn('flex-1 gap-y-3')}>\n              <Button\n                size='xs'\n                type='outline'\n                text={confirmButtonText ?? '重置'}\n                onPress={onPressClear}\n              ></Button>\n            </View>\n            <View className='flex-1 gap-y-3'>\n              <Button size='xs' onPress={onConfirmTime} text={confirmButtonText ?? '确定'}></Button>\n            </View>\n          </View>\n        </>\n      )}\n    </DropdownPopup>\n  );\n};\n\nconst DropdownTimeMethodMemo = memo(DropdownSelectorMethod);\nconst DropdownTimePopup = (opt: Omit<DropdownTimeProps, 'onClosed'>) => {\n  return new Promise<{ values?: DropdownTimeProps['value']; value?: Date }>((resolve, reject) => {\n    const key = Portal.add(\n      <DropdownTimeMethodMemo\n        {...opt}\n        onClear={(v) => {\n          opt.onConfirm?.(v);\n\n          if (opt.method === 'Range') {\n            resolve({\n              values: v as DatePickerRangeValue,\n            });\n          } else {\n            resolve({\n              value: v as Date,\n            });\n          }\n        }}\n        onCancel={() => {\n          opt.onCancel?.();\n          reject(new Error());\n        }}\n        onConfirm={(v) => {\n          opt.onConfirm?.(v);\n\n          if (opt.method === 'Range') {\n            resolve({\n              values: v as DatePickerRangeValue,\n            });\n          } else {\n            resolve({\n              value: v as Date,\n            });\n          }\n        }}\n        onClosed={() => {\n          Portal.remove(key);\n        }}\n      />\n    );\n  });\n};\n\nconst defaultInitialValue: DatePickerRangeValue = [null, null];\n\nconst DropdownTime = ({\n  popupTestID,\n  titleClassName,\n  titleTextClassName,\n  duration,\n  zIndex,\n  closeOnPressOutside,\n  loading,\n  placeholder = '',\n  defaultValue,\n  initialValue,\n  method,\n  formatStr = 'YYYY-MM-DD',\n  ...restProps\n}: Omit<DropdownTimeProps, 'targetHeight' | 'targetPageY'>) => {\n  const config = useDropdownConfig();\n  const _initialValue = !isNil(initialValue) ? initialValue : defaultInitialValue;\n  const [value, onChange] = useControllableValue<DatePickerRangeValue | Date>(restProps, {\n    defaultValue: method === 'Range' ? [..._initialValue] : new Date(),\n  });\n  const [active, setActive] = useState(false);\n  const _selectOption = useMemo(() => {\n    if (loading) {\n      const x = {\n        label: '加载中...',\n        value: null as any,\n      };\n\n      return x;\n    }\n\n    let selectOption;\n\n    if (isArray(value) && value.some((item) => !!item)) {\n      selectOption = {\n        label: `${dayjs(value?.[0]).format(formatStr)}-${dayjs(value?.[1]).format(formatStr)}`,\n      };\n    } else {\n      selectOption = {\n        label: value ? `${dayjs(value as any).format(formatStr)} ` : '日期',\n      };\n    }\n\n    return selectOption;\n  }, [loading, value, formatStr]);\n\n  duration = getDefaultValue(duration, config.duration);\n  zIndex = getDefaultValue(zIndex, config.zIndex);\n  closeOnPressOutside = getDefaultValue(closeOnPressOutside, config.closeOnPressOutside);\n\n  const onPressText = usePersistFn(() => {\n    // 计算 Menu 的 Top 和元素高度\n    config.MenuRef.current?.measure((x, y, width, height, pageX, pageY) => {\n      setActive(true);\n      DropdownTimePopup({\n        targetHeight: height,\n        targetPageY: pageY,\n        defaultValue,\n        duration,\n        zIndex,\n        closeOnPressOutside,\n        activeColor: config.activeColor,\n        testID: popupTestID,\n        ...restProps,\n        method,\n        value,\n        initialValue,\n      })\n        .then((v) => {\n          // @ts-ignore\n          onChange([...(v.values as any)]);\n        })\n        .catch(() => {})\n        .finally(() => {\n          setActive(false);\n        });\n    });\n  });\n\n  return (\n    <DropdownText\n      {...restProps}\n      className={titleClassName}\n      textClassName={titleTextClassName}\n      title={!isNil(_selectOption?.label) ? _selectOption.label : placeholder}\n      badge={1}\n      active={active}\n      onPress={onPressText}\n      disabled={restProps.disabled || loading}\n    />\n  );\n};\n\nexport default memo(DropdownTime);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/dropdown/dropdown-type-items.tsx",
      "content": "import { type ReactNode, useMemo, useState } from 'react';\nimport { debounce, isObject } from 'lodash';\nimport { ScrollView, TouchableOpacity, View, Text } from 'react-native';\nimport { cn } from '../../lib/utils';\nimport Button from '../button';\nimport { usePersistFn } from '../../hooks';\n\n/**\n * 处理选项数据\n * @param options\n * @returns\n */\nfunction disposeSelectOptions<T>(\n  options: { titleKey: string; value: T | T[] }[]\n): Record<string, T | T[]> {\n  return options.reduce((acc, { titleKey, value }) => {\n    if (!acc[titleKey]) {\n      acc[titleKey] = Array.isArray(value) ? value : [value];\n    } else {\n      // 如果已经是数组 直接添加值\n      if (Array.isArray(acc[titleKey])) {\n        // @ts-ignore\n        acc[titleKey].push(value as T);\n      } else {\n        // 将现有值与新值组合成数组\n        acc[titleKey] = [acc[titleKey] as T, value as T];\n      }\n    }\n\n    // 如果数组长度为1 则返回单个值\n    // @ts-ignore\n    if (Array.isArray(acc[titleKey]) && acc[titleKey].length === 1) {\n      // @ts-ignore\n      acc[titleKey] = acc[titleKey][0] as T;\n    }\n\n    return acc;\n  }, {} as Record<string, T | T[]>);\n}\n\n/**\n * 合并数据\n * @param defaultData 初始的数据\n * @param data 选择的数据\n */\nfunction mergeSelectedData<T>(\n  defaultData: { titleKey: string; value: T | T[] }[],\n  selectedData: { titleKey: string; value: T | T[] }[]\n) {\n  const defaultMap = new Map(\n    defaultData.map(({ titleKey, value }) => [titleKey, { titleKey, value }])\n  );\n\n  selectedData.forEach(({ titleKey, value }) => {\n    if (defaultMap.has(titleKey)) {\n      // 覆盖合并数据\n      defaultMap.set(titleKey, { titleKey, value });\n    }\n  });\n\n  return Array.from(defaultMap.values());\n}\n\nexport type DropdownTypeItemsProps<T = any> = {\n  /**\n   * 选择的值\n   */\n  selectedData: Record<string, T | T[]>;\n  /**\n   * 选项配置\n   */\n  options: {\n    /**\n     * 选项标题\n     */\n    title?: string;\n    /**\n     * 选项标题的key\n     */\n    titleKey: string;\n    /**\n     * 选项默认值（多选模式需要多个默认值时传递数组）\n     */\n    defaultValue?: T | T[];\n    /**\n     * 自定义类名\n     */\n    className?: string;\n    /**\n     * 是否支持多选\n     */\n    multiple?: boolean;\n    /**\n     * 子项\n     */\n    items?: { label: string; value: T }[];\n    /**\n     * 自定义子项渲染节点（与 items 可同时传 key 取的是 titleKey的值）\n     * @param items\n     */\n    customizeNode?: ({\n      items,\n      value,\n      onChange,\n    }: {\n      items: DropdownTypeItemsProps['options'][0]['items'];\n      value?: T | T[];\n      onChange: (value: T) => void;\n    }) => ReactNode;\n    /**\n     * 是否隐藏\n     */\n    hidden?: boolean;\n  }[];\n  /**\n   * 确定按钮文本\n   */\n  confirmText?: string;\n  /**\n   * 取消按钮文本\n   */\n  cancelText?: string;\n  /**\n   * 值改变的回调\n   * @param {confirm | cancel} action 动作类型 cancel 取消 confirm 确定\n   * @param {Record<string, T | T[]>} result 选择结果数据\n   */\n  onValueChange?: ({\n    action,\n    result,\n  }: {\n    action: 'confirm' | 'cancel';\n    result: Record<string, T | T[]>;\n  }) => void;\n};\n\nlet clickType: 'confirm' | 'cancel' | null = null;\n\n/**\n * 类型筛选项 组件\n * @param props\n */\nexport default function DropdownTypeItems<T = any>({\n  selectedData,\n  options,\n  confirmText = '确定筛选',\n  cancelText = '清空筛选',\n  onValueChange,\n}: DropdownTypeItemsProps<T>) {\n  const { defaultSelectedOptions, isSettingDefaultValue } = useMemo<{\n    /** 默认选项 */\n    defaultSelectedOptions: { titleKey: string; value: T | T[] }[];\n    /** 是否设置默认值 */\n    isSettingDefaultValue: boolean;\n  }>(() => {\n    if (!Array.isArray(options) || !options?.length) {\n      return {\n        isSettingDefaultValue: false,\n        defaultSelectedOptions: [],\n      };\n    }\n\n    return {\n      isSettingDefaultValue: options.some(\n        (f) => !!f?.defaultValue || typeof f?.defaultValue !== 'undefined'\n      ),\n      defaultSelectedOptions: options.map((m) => ({\n        titleKey: m.titleKey,\n        value:\n          Array.isArray(m.defaultValue) && !m.multiple\n            ? m.defaultValue[0]\n            : (m.defaultValue as T | T[]),\n      })),\n    };\n  }, [options]);\n\n  const selectedDataOptions = useMemo(\n    () =>\n      isObject(selectedData)\n        ? Object.entries(selectedData).map(([titleKey, value]) => ({ titleKey, value }))\n        : [],\n    [selectedData]\n  );\n\n  const [selectedOptions, setSelectedOptions] = useState<{ titleKey: string; value: T | T[] }[]>(\n    clickType === 'cancel'\n      ? defaultSelectedOptions\n      : mergeSelectedData(defaultSelectedOptions, selectedDataOptions)\n  );\n\n  // 点击操作选择\n  const handleSelected = usePersistFn((titleKey: string, value: T, multiple: boolean) => {\n    setSelectedOptions((pre) => {\n      // 多选模式\n      if (multiple) {\n        // 查找是否有相同 titleKey 的选项\n        const repeatTitleKeyIndex = pre?.findIndex((item) => item.titleKey === titleKey);\n\n        if (repeatTitleKeyIndex > -1) {\n          // 重复 value 索引\n          const repeatValueIndex = pre?.findIndex(\n            (f) => f.titleKey === titleKey && (f.value as T[])?.includes(value as T)\n          );\n\n          // 移除当前选项\n          if (repeatValueIndex > -1) {\n            return pre?.map((m) => ({\n              ...m,\n              value: Array.isArray(m.value) ? m.value?.filter((f) => f !== value) : m.value,\n            }));\n          }\n\n          const existingOption = pre[repeatTitleKeyIndex];\n\n          const newValue = Array.isArray(existingOption.value)\n            ? // 合并重复 value 为数组\n              [...existingOption.value, value]\n            : [existingOption.value, value];\n\n          const updatedOption = { ...existingOption, value: newValue };\n\n          return [\n            ...pre?.slice(0, repeatTitleKeyIndex),\n            updatedOption,\n            ...pre?.slice(repeatTitleKeyIndex + 1),\n          ];\n        } else {\n          return [...pre, { titleKey, value }];\n        }\n      }\n\n      // 默认单选模式\n      return [...pre?.filter((f) => f.titleKey !== titleKey), { titleKey, value }];\n    });\n  });\n\n  // 点击操作按钮\n  const handleClick = useMemo(\n    () =>\n      debounce((action: 'confirm' | 'cancel') => {\n        return new Promise((resolve, reject) => {\n          try {\n            if (action === 'cancel') {\n              setSelectedOptions(isSettingDefaultValue ? defaultSelectedOptions : []);\n            }\n\n            const result = disposeSelectOptions(\n              action === 'cancel' ? defaultSelectedOptions : selectedOptions\n            );\n\n            resolve(onValueChange?.({ action, result }));\n\n            clickType = action;\n          } catch (error) {\n            reject(error);\n\n            console.log('组件：DropdownTypeItems 出错', error);\n\n            throw new Error('组件：DropdownTypeItems 出错');\n          }\n        });\n      }, 200),\n    [defaultSelectedOptions, isSettingDefaultValue, onValueChange, selectedOptions]\n  );\n\n  if (!Array.isArray(options) || !options?.length) {\n    return null;\n  }\n\n  return (\n    <>\n      <ScrollView\n        showsVerticalScrollIndicator={false}\n        showsHorizontalScrollIndicator={false}\n        className='flex'\n        contentContainerClassName='gap-y-6'\n      >\n        {options\n          .filter((f) => Object.keys(f || {})?.length > 0)\n          .map((m, idx) => (\n            <View\n              key={`${m.title}_${m.titleKey}_${idx}`}\n              className={cn('flex gap-y-3 flex-wrap', m.className)}\n            >\n              {m.title ? <Text className='text-base font-medium'>{m.title}</Text> : null}\n              <View className='flex flex-row flex-wrap items-center gap-x-2 gap-y-3'>\n                {m?.items?.map((v, i) => {\n                  const isSelect = selectedOptions?.some(\n                    (f) =>\n                      f.titleKey === m.titleKey &&\n                      (m.multiple ? (f.value as T[])?.includes(v.value) : f.value === v.value)\n                  );\n\n                  return (\n                    <TouchableOpacity\n                      key={`${v.value}_${i}`}\n                      className={cn('rounded bg-black/5', isSelect && 'bg-primary')}\n                      activeOpacity={0.8}\n                      onPress={() => {\n                        handleSelected(m.titleKey, v.value, !!m?.multiple);\n                      }}\n                    >\n                      <View className='rounded px-4 py-2'>\n                        <Text className={cn('text-[#58595B]', isSelect && 'text-white')}>\n                          {v.label}\n                        </Text>\n                      </View>\n                    </TouchableOpacity>\n                  );\n                })}\n                {m.customizeNode?.({\n                  items: m.items,\n                  value: selectedOptions?.find((f) => f.titleKey === m.titleKey)?.value,\n                  onChange: (value: T) => handleSelected(m.titleKey, value, !!m?.multiple),\n                })}\n              </View>\n            </View>\n          ))}\n      </ScrollView>\n      <View className='mt-6 flex-row gap-x-3'>\n        <Button\n          size='xs'\n          type='ghost'\n          className='flex-1'\n          text={cancelText ?? '重置'}\n          onPress={() => {\n            handleClick('cancel');\n          }}\n        ></Button>\n        <Button\n          className='flex-1'\n          size='xs'\n          text={confirmText ?? '确定'}\n          onPress={() => {\n            handleClick('confirm');\n          }}\n        ></Button>\n      </View>\n    </>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/dropdown/index.ts",
      "content": "import { attachPropertiesToComponent } from '../../helpers';\nimport { useDropdownConfig } from './context';\nimport FilterTypeButton from './dropdown-filter-panel';\nimport DropdownItem from './dropdown-item';\nimport DropdownMenu from './dropdown-menu';\nimport DropdownMultiple from './dropdown-multiple';\nimport DropdownPopup from './dropdown-popup';\nimport DropdownText from './dropdown-text';\nimport DropdownTime from './dropdown-time';\nimport DropdownTypeItems from './dropdown-type-items';\n\nexport default attachPropertiesToComponent(DropdownMenu, {\n  Item: DropdownItem,\n  Multiple: DropdownMultiple,\n  Text: DropdownText,\n  Popup: DropdownPopup,\n  Button: FilterTypeButton,\n  Time: DropdownTime,\n  useDropdownConfig,\n  TypeItems: DropdownTypeItems,\n});\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/dropdown/interface.ts",
      "content": "import type { MutableRefObject, PropsWithChildren } from 'react';\nimport type { ColorValue, TextProps, TouchableOpacityProps, View, ViewProps } from 'react-native';\nimport { DatePickerRangeValue, DatePickerRangeViewProps } from '../date-picker/interface';\nimport type { FixHitSlopProps } from '../../helpers/types';\nimport type { PopupPropsCommon } from '../popup/types';\nimport type { TreeOption, TreeProps } from '../tree/interface';\n\nexport interface DropdownBadgeProps extends TextProps {\n  /**\n   * 徽标内容/展示的数字\n   */\n  count?: string | number | boolean;\n}\n\nexport interface DropdownItemOption<T> {\n  /**\n   * 文字\n   */\n  label: string;\n\n  /**\n   * 标识符\n   */\n  value: T;\n\n  /**\n   * 徽章\n   */\n  badge?: number | string | boolean;\n\n  children?: DropdownItemOption<T>[];\n}\n\nexport interface DropdownTextProps extends FixHitSlopProps<TouchableOpacityProps> {\n  /**\n   * 标题文案样式\n   */\n  textClassName?: string;\n\n  /**\n   * 图标样式\n   */\n  iconClassName?: string;\n\n  /**\n   * 是否禁用菜单\n   * @default false\n   */\n  disabled?: boolean;\n\n  /**\n   * 菜单项标题\n   */\n  title: string;\n\n  /**\n   * 是否激活状态\n   * @default false\n   */\n  active?: boolean;\n\n  /**\n   * 是否可点击 配合\n   * @default true\n   */\n  pressable?: boolean;\n\n  /**\n   * 菜单标题和选项的选中态颜色\n   * @default dropdown_active_color\n   */\n  activeColor?: ColorValue;\n\n  /**\n   * 箭头默认朝向\n   * @default 'down'\n   */\n  direction?: 'up' | 'down';\n\n  /**\n   * 徽章\n   */\n  badge?: number | string | boolean;\n}\n\nexport interface DropdownItemProps<T>\n  extends Partial<Pick<DropdownTextProps, 'iconClassName' | 'disabled' | 'testID'>>,\n    Pick<TreeProps, 'search' | 'onSearch' | 'cancellable' | 'defaultExpandAll'> {\n  popupTestID?: DropdownTextProps['testID'];\n  /**\n   * 标题样式\n   */\n  titleClassName?: string;\n\n  /**\n   * 标题文案样式\n   */\n  titleTextClassName?: string;\n\n  /**\n   * 选项数组\n   */\n  options: DropdownItemOption<T>[];\n\n  /**\n   * 当前选中的选项值\n   */\n  value?: T;\n\n  /**\n   * 默认值\n   */\n  defaultValue?: T;\n\n  /**\n   * 点击选项导致 value 变化时触发\n   */\n  onChange?: (v: T, d: DropdownItemOption<T>) => void;\n\n  /**\n   * 动画时长，单位秒\n   * @default animation_duration_fast\n   */\n  duration?: number;\n\n  /**\n   * 菜单栏 z-index 层级\n   * @default 10\n   */\n  zIndex?: number;\n\n  /**\n   * 是否在点击外部元素后关闭菜单\n   * @default true\n   */\n  closeOnPressOutside?: boolean;\n\n  /**\n   * 候选项加载中\n   */\n  loading?: boolean;\n\n  /**\n   * 没有值时提示文案\n   * @default ''\n   */\n  placeholder?: string;\n  /**\n   * 自定义日期范围回调（返回true时不会进行时间选择）\n   * @param date\n   * @returns\n   */\n  diasbledDate?: (date: DatePickerRangeValue | Date) => boolean;\n}\n\nexport interface DropdownMultipleProps<T>\n  extends Omit<DropdownItemProps<T>, 'value' | 'defaultValue' | 'onChange'>,\n    Pick<TreeProps, 'multipleMode' | 'defaultExpandAll'> {\n  /**\n   * 当前选中的选项值\n   */\n  value?: T[];\n\n  /**\n   * 默认值\n   */\n  defaultValue?: T[];\n\n  /**\n   * 点击选项导致 value 变化时触发\n   */\n  onChange?: (v: T[], d: DropdownItemOption<T>[]) => void;\n\n  /**\n   * 多选的条件下，点击某个选项，返回自定义新的数据\n   */\n  beforeChecked?: (event: { value: T[]; option: TreeOption; checked: boolean }) => T[] | Promise<T[]>;\n}\n\nexport interface DropdownTimeProps\n  extends Omit<DropdownItemProps<Date>, 'value' | 'defaultValue' | 'onChange' | 'options'>,\n    Omit<DatePickerRangeViewProps, 'placeholder' | 'value'> {\n  /**\n   * 触发目标高度，计算弹出层应该出现的位置（上面、下面）\n   */\n  targetHeight: number;\n\n  /**\n   * 触发目标 pageY\n   */\n  targetPageY: number;\n  /**\n   * 取消\n   */\n  onCancel?: () => void;\n\n  onClosed?: PopupPropsCommon['onClosed'];\n\n  /**\n   * 菜单标题和选项的选中态颜色\n   * @default dropdown_active_color\n   */\n  activeColor?: ColorValue;\n\n  method?: 'Range' | 'Single';\n\n  value?: DatePickerRangeValue | Date;\n\n  onClear?: (values: DatePickerRangeValue | Date) => void;\n\n  onConfirm?: (values: DatePickerRangeValue | Date) => void;\n\n  formatStr?: string\n}\n\nexport interface DropdownContext\n  extends Partial<Pick<DropdownTextProps, 'iconClassName' | 'activeColor' | 'direction'>>,\n    Partial<\n      Pick<\n        DropdownItemProps<any>,\n        'titleClassName' | 'titleTextClassName' | 'duration' | 'zIndex' | 'closeOnPressOutside'\n      >\n    > {\n  /**\n   * 菜单的 Ref，内部使用不向外暴露\n   */\n  MenuRef: MutableRefObject<View | null>;\n}\n\nexport interface DropdownMenuProps extends Omit<Partial<DropdownContext>, 'MenuRef'>, ViewProps {\n  /**\n   * 是否显示分割线\n   * @default true\n   */\n  divider?: boolean;\n}\n\nexport interface DropdownPopupProps\n  extends Pick<DropdownItemProps<any>, 'zIndex' | 'closeOnPressOutside'>,\n    PopupPropsCommon,\n    PropsWithChildren<{}> {\n  /**\n   * 触发目标高度，计算弹出层应该出现的位置（上面、下面）\n   */\n  targetHeight: number;\n\n  /**\n   * 触发目标 pageY\n   */\n  targetPageY: number;\n\n  /**\n   * 点击非内容的遮罩阴影\n   */\n  onPressShade?: TouchableOpacityProps['onPress'];\n\n  /**\n   * 是否开启顶部/底部安全区适配\n   * @default true\n   */\n  safeAreaInset?: boolean;\n\n  /**\n   * 是否渲染 shade 元素，某些场景不需要遮罩非选项区域\n   * @default true\n   */\n  showShade?: boolean;\n\n  /**\n   * 内容包裹层的样式\n   */\n  contentClassName?: string;\n}\n\nexport interface DropdownSelectorMethodProps<T>\n  extends Omit<\n      DropdownItemProps<T>,\n      | 'iconClassName'\n      | 'disabled'\n      | 'titleClassName'\n      | 'titleTextClassName'\n      | 'value'\n      | 'defaultValue'\n      | 'onChange'\n      | 'loading'\n    >,\n    Pick<DropdownMultipleProps<T>, 'beforeChecked'>,\n    Pick<TreeProps, 'multiple' | 'multipleMode' | 'defaultExpandAll'>,\n    Pick<ViewProps, 'testID'> {\n  defaultValue?: T | T[];\n  /**\n   * 触发目标高度\n   */\n  targetHeight: number;\n\n  /**\n   * 触发目标 pageY\n   */\n  targetPageY: number;\n\n  /**\n   * 类似确定的回调，当选择到最末端时触发，部分业务需要把选项其他值提取出来\n   */\n  onConfirm?: (v: T | T[], d: DropdownItemOption<T>[]) => void;\n\n  /**\n   * 取消\n   */\n  onCancel?: () => void;\n\n  onClosed?: PopupPropsCommon['onClosed'];\n\n  /**\n   * 菜单标题和选项的选中态颜色\n   * @default dropdown_active_color\n   */\n  activeColor?: ColorValue;\n}\n",
      "type": "registry:component"
    }
  ]
}