{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "action-sheet",
  "type": "registry:component",
  "title": "Example action-sheet",
  "author": "@gabimoncha",
  "description": "Displays a button which is always red.",
  "files": [
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/action-sheet/action-sheet-instance.tsx",
      "content": "import React from 'react';\n\nimport Portal from '../portal';\n\nimport ActionSheet from './action-sheet';\nimport ActionSheetMethod from './action-sheet-method';\nimport type { ActionSheetOptions, Action, ActionSheetProps } from './interface';\n\nexport const ActionSheetInstance = (opts: ActionSheetOptions) => {\n  return new Promise<{ item: Action; index: number }>((resolve, reject) => {\n    const key = Portal.add(\n      <ActionSheetMethod\n        {...opts}\n        onClosed={() => {\n          Portal.remove(key);\n\n          opts.onClosed?.();\n        }}\n        onResponse={(action, item, index) => {\n          opts.onResponse?.(action, item, index);\n\n          // 语义上应该是指定某个操作，不会关系是如何取消的，所以 Promise 只关系点击了哪个操作\n          if (action === 'item') {\n            resolve({\n              item: item!,\n              index: index!,\n            });\n          } else {\n            reject(new Error(action));\n          }\n        }}\n      />\n    );\n  });\n};\n\nexport const Component: React.FC<ActionSheetProps> = (props) => (\n  <Portal>\n    <ActionSheet {...props} />\n  </Portal>\n);\n\nexport const ActionSheetComponent = Component;\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/action-sheet/action-sheet-method.tsx",
      "content": "import React, { useState, useEffect, memo } from 'react';\n\nimport ActionSheet from './action-sheet';\nimport type { ActionSheetMethodProps, ActionSheetAction, Action } from './interface';\nimport { callInterceptor } from '../../helpers';\nimport { usePersistFn } from '../../hooks';\n\ninterface LocalAction extends Action {\n  /** 记录谁被点击了 */\n  _loading?: boolean;\n}\n\n/**\n * ActionSheet 动作面板\n * @description 底部弹起的模态面板，包含与当前情境相关的多个选项。\n */\nconst ActionSheetMethod: React.FC<ActionSheetMethodProps> = ({\n  actions,\n  beforeClose,\n  onResponse,\n  ...restProps\n}) => {\n  const [visible, setVisible] = useState(false);\n  const [localActions, setLocalActions] = useState<LocalAction[]>(() => {\n    return actions.map((ac) => {\n      if (typeof ac === 'string') {\n        return { name: ac };\n      }\n      return ac;\n    });\n  });\n\n  const genOnPressBtn = (action: ActionSheetAction) => (item?: Action, index?: number) => {\n    const canceled = () => {\n      setLocalActions((las) =>\n        las.map((ac) => {\n          if (ac._loading) {\n            ac.loading = false;\n            ac._loading = false;\n          }\n          return ac;\n        })\n      );\n    };\n\n    if (action === 'item') {\n      setLocalActions((las) =>\n        las.map((ac, _index) => {\n          if (_index === index) {\n            return {\n              ...ac,\n              loading: true,\n              _loading: true,\n            };\n          }\n\n          return ac;\n        })\n      );\n    }\n\n    callInterceptor(beforeClose, {\n      args: [action, item, index],\n      done: () => {\n        canceled();\n        setVisible(false);\n        onResponse?.(action, item, index);\n      },\n      canceled,\n    });\n  };\n\n  useEffect(() => {\n    setVisible(true);\n  }, []);\n\n  const onRequestClose = usePersistFn(() => {\n    genOnPressBtn('overlay')();\n    return true;\n  });\n\n  return (\n    <ActionSheet\n      {...restProps}\n      onRequestClose={onRequestClose}\n      visible={visible}\n      actions={localActions}\n      onPressOverlay={genOnPressBtn('overlay')}\n      onCancel={genOnPressBtn('cancel')}\n      onSelect={(item, index) => genOnPressBtn('item')(item, index)}\n    />\n  );\n};\n\nexport default memo(ActionSheetMethod);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/action-sheet/action-sheet.tsx",
      "content": "import isNil from 'lodash/isNil';\nimport React, { memo, isValidElement } from 'react';\nimport { Text, View, ScrollView } from 'react-native';\n\nimport Button from '../button';\nimport Divider from '../divider';\nimport Popup from '../popup/popup';\nimport PopupHeader from '../popup/popup-header';\n\nimport type { ActionSheetProps } from './interface';\nimport { useSafeHeight } from '../../hooks';\nimport { cn } from '../../lib/utils';\n\n/**\n * ActionSheet 动作面板\n * @description 底部弹起的模态面板，包含与当前情境相关的多个选项。\n */\nconst ActionSheet: React.FC<ActionSheetProps> = ({\n  actions,\n  title,\n  cancelText,\n  cancelTextStyle,\n  description,\n  descriptionStyle,\n  descriptionClassName,\n  safeAreaInsetTop,\n  round = true,\n  onCancel,\n  onSelect,\n  ...restProps\n}) => {\n  const safeHeight = useSafeHeight({ top: safeAreaInsetTop });\n  const isTitleDef = !isNil(title);\n  const isCancelTextDef = !isNil(cancelText);\n  const isDescriptionDef = !isNil(description);\n\n  /** 描述文案 纯文字或自定义 JSX */\n  const descriptionJSX = isDescriptionDef ? (\n    isValidElement(description) ? (\n      description\n    ) : (\n      <>\n        <Text\n          className={cn(\n            'shrink-0 text-center text-[#5A6068] text-lg pb-3',\n            {\n              'pt-3': !isTitleDef,\n            },\n            descriptionClassName\n          )}\n          style={descriptionStyle}\n          numberOfLines={1}\n        >\n          {description}\n        </Text>\n        <Divider />\n      </>\n    )\n  ) : null;\n\n  return (\n    <Popup {...restProps} safeAreaInsetBottom position='bottom' round={round}>\n      <View style={{ maxHeight: safeHeight }}>\n        {isTitleDef ? <PopupHeader title={title} showClose={false} /> : null}\n        {descriptionJSX}\n\n        <ScrollView bounces={false}>\n          {actions.map((item, index) => {\n            return (\n              <Button\n                accessibilityLabel={item.name}\n                key={`${item.name}_${index}`}\n                text={item.name}\n                disabled={item.disabled}\n                loading={item.loading}\n                type='link'\n                size='xl'\n                textClassName={cn(\n                  'text-2xl font-bold text-[#11151A]',\n                  {\n                    'text-gray-500': item.loading,\n                  },\n                  item.textClassName\n                )}\n                onPress={() => {\n                  if (!item.disabled && !item.loading) {\n                    item.callback?.();\n                    onSelect?.(item, index);\n                  }\n                }}\n              />\n            );\n          })}\n        </ScrollView>\n\n        {isCancelTextDef ? (\n          <>\n            <View className='bg-[#EFF3F9] h-2' />\n            <Button\n              accessibilityLabel={cancelText}\n              text={cancelText}\n              type='link'\n              size='xl'\n              textClassName='text-2xl font-bold text-[#11151A]'\n              onPress={onCancel}\n            />\n          </>\n        ) : null}\n      </View>\n    </Popup>\n  );\n};\n\nexport default memo(ActionSheet);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/action-sheet/index.ts",
      "content": "\nimport { attachPropertiesToComponent } from '../../helpers'\nimport {\n  ActionSheetInstance,\n  Component,\n  ActionSheetComponent,\n} from './action-sheet-instance'\n\nexport default attachPropertiesToComponent(ActionSheetInstance, {\n  Component,\n  ActionSheetComponent,\n})\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/action-sheet/interface.ts",
      "content": "import type React from 'react'\nimport type { ColorValue, StyleProp, TextStyle } from 'react-native'\n\nimport type { PopupPropsCommon } from '../popup/types'\n\nexport type ActionSheetAction = 'cancel' | 'item' | 'overlay'\n\nexport interface Action {\n  /** 标题 */\n  name: string\n  /** 选项文字样式 */\n  textClassName?: string\n\n  /** 是否为加载状态 */\n  loading?: boolean\n\n  /** 是否为禁用状态 */\n  disabled?: boolean\n\n  /** 点击时触发的回调函数 */\n  callback?: () => void\n}\n\nexport interface ActionSheetProps extends PopupPropsCommon {\n  /**\n   * 面板选项列表\n   */\n  actions: Action[]\n\n  /**\n   * 顶部标题\n   */\n  title?: React.ReactNode\n\n  /**\n   * 取消按钮文字\n   */\n  cancelText?: string\n\n  /**\n   * 取消按钮文字样式\n   */\n  cancelTextStyle?: StyleProp<TextStyle>\n\n  /**\n   * 选项上方的描述信息\n   */\n  description?: React.ReactNode\n\n  /**\n   * 选项上方的描述信息样式\n   */\n  descriptionClassName?: string\n\n  /**\n   * 选项上方的描述信息样式\n   */\n  descriptionStyle?: StyleProp<TextStyle>\n\n  /**\n   * 顶部安全高度\n   * @default safeAreaInsets.top\n   */\n  safeAreaInsetTop?: number\n\n  /**\n   * 是否显示圆角\n   * @default true\n   */\n  round?: boolean\n\n  /**\n   * 是否在显示弹层时才渲染节点\n   * @default true\n   */\n  lazyRender?: boolean\n\n  /**\n   * 点击取消按钮时触发\n   */\n  onCancel?: () => void\n\n  /**\n   * 点击选项时触发，禁用或加载状态下不会触发\n   */\n  onSelect?: (action: Action, index: number) => void\n}\n\nexport interface ActionSheetOptions\n  extends Omit<\n    ActionSheetProps,\n    'visible' | 'actions' | 'onCancel' | 'onSelect' | 'onRequestClose'\n  > {\n  /**\n   * 面板选项列表\n   */\n  actions: (string | Action)[]\n\n  /**\n   * 关闭前的回调函数，返回 false 可阻止关闭，支持返回 Promise\n   */\n  beforeClose?: (\n    action: ActionSheetAction,\n    item?: Action,\n    index?: number,\n  ) => boolean | Promise<boolean>\n\n  /**\n   * 触发了某个选项\n   */\n  onResponse?: (\n    action: ActionSheetAction,\n    item?: Action,\n    index?: number,\n  ) => void\n}\n\nexport interface ActionSheetMethodProps extends ActionSheetOptions {}\n\nexport interface ActionSheetInstance {\n  (p: ActionSheetOptions): Promise<{ item: Action; index: number }>\n  Component: React.FC<ActionSheetProps>\n}\n",
      "type": "registry:component"
    }
  ]
}