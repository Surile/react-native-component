{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "date-picker",
  "type": "registry:component",
  "title": "Example date-picker",
  "author": "@gabimoncha",
  "description": "Displays a button which is always red.",
  "registryDependencies": [
    "https://react-native-component-docs.vercel.app/r/hooks.json",
    "https://react-native-component-docs.vercel.app/r/helpers.json",
    "https://react-native-component-docs.vercel.app/r/popup.json",
    "https://react-native-component-docs.vercel.app/r/date-picker-view.json",
    "https://react-native-component-docs.vercel.app/r/button.json"
  ],
  "files": [
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/date-picker/date-picker-range-method.tsx",
      "content": "import React, { memo, useEffect, useRef, useState } from 'react';\nimport { Platform, Text, View } from 'react-native';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport DatePickerRangeView from './date-picker-range-view';\nimport type { DatePickerRangeAction, DatePickerRangeMethodProps } from './interface';\nimport { usePersistFn } from '../../hooks';\nimport { callInterceptor } from '../../helpers';\nimport Popup from '../popup';\nimport { cn } from '../../lib/utils';\n\nconst DatePickerRangeMethod: React.FC<DatePickerRangeMethodProps> = ({\n  title,\n  subTitle,\n  onCancel,\n  onPressOverlay,\n  beforeClose,\n  // DatePickerRangeView\n  mode,\n  defaultValue,\n  confirmButtonText,\n  resetButtonText,\n  placeholder,\n  onConfirm,\n  max,\n  min,\n  renderLabel,\n  onClear,\n  clearable,\n  clearButtonText,\n\n  ...restProps\n}) => {\n  const insets = useSafeAreaInsets();\n\n  const [visible, setVisible] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const Values = useRef<[Date | null, Date | null]>(\n    defaultValue && defaultValue.length === 2 ? defaultValue : [null, null]\n  );\n\n  useEffect(() => {\n    setVisible(true);\n  }, []);\n\n  const onChangeRangeView = usePersistFn((d: [Date, Date]) => {\n    Values.current = d;\n  });\n\n  const doAction = usePersistFn((action: DatePickerRangeAction) => {\n    setLoading(true);\n\n    callInterceptor(beforeClose, {\n      args: [action, Values.current],\n      done: () => {\n        switch (action) {\n          case 'cancel':\n            onCancel?.(Values.current);\n\n            break;\n          case 'confirm':\n            onConfirm?.(Values.current);\n\n            break;\n          case 'overlay':\n            onPressOverlay?.(Values.current);\n\n            break;\n          case 'clear':\n            onClear?.(Values.current);\n\n            break;\n          default:\n            break;\n        }\n\n        setLoading(false);\n        setVisible(false);\n      },\n      canceled: () => {\n        setLoading(false);\n      },\n    });\n  });\n\n  const onPressPopupOverlay = usePersistFn(() => {\n    doAction('overlay');\n  });\n\n  const onPressClose = usePersistFn(() => {\n    doAction('cancel');\n  });\n\n  const onPressConfirm = usePersistFn(() => {\n    doAction('confirm');\n  });\n\n  const onPressClear = usePersistFn(() => {\n    doAction('clear');\n  });\n\n  const onRequestClose = usePersistFn(() => {\n    doAction('overlay');\n\n    return true;\n  });\n\n  const rangeProps = {\n    mode,\n    defaultValue: Values.current,\n    confirmButtonText,\n    resetButtonText,\n    placeholder,\n    onConfirm: onPressConfirm,\n    max,\n    min,\n    renderLabel,\n    clearable,\n    clearButtonText,\n    onClear: onPressClear,\n  };\n\n  return (\n    <Popup\n      {...restProps}\n      onRequestClose={onRequestClose}\n      visible={visible}\n      onPressOverlay={onPressPopupOverlay}\n      position='bottom'\n      round\n    >\n      <Popup.Header title={title} onClose={onPressClose} />\n\n      {subTitle && (\n        <View className='flex flex-row items-center justify-center'>\n          <Text className='mx-auto text-lg text-gray-500/50'>{subTitle}</Text>\n        </View>\n      )}\n\n      <DatePickerRangeView\n        {...rangeProps}\n        onChange={(val) => {\n          // @ts-ignore\n          onChangeRangeView(val);\n        }}\n        loading={loading}\n      />\n\n      <View\n        className={cn(Platform.OS !== 'ios' ? 'h-4' : 'h-0')}\n        style={{ height: insets.bottom }}\n      />\n    </Popup>\n  );\n};\n\nexport default memo(DatePickerRangeMethod);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/date-picker/date-picker-range-view.tsx",
      "content": "import React, { memo, useEffect, useMemo, useRef, useState } from 'react';\nimport isNil from 'lodash/isNil';\nimport { TouchableOpacity, View, Text } from 'react-native';\nimport type { DatePickerRangeValue, DatePickerRangeViewProps } from './interface';\nimport DatePickerView from '../date-picker-view';\nimport { formatDate } from '../date-picker-view/helper';\nimport useDateMinMax from '../date-picker-view/useDateMinMax';\nimport { useControllableValue, usePersistFn } from '../../hooks';\nimport { cn } from '../../lib/utils';\nimport Button from '../button';\n\nconst defaultInitialValue: DatePickerRangeValue = [null, null];\n\nconst getRightDate = (v: Date, min: Date, max: Date) => {\n  if (v.getTime() < min.getTime()) {\n    return min;\n  }\n\n  if (v.getTime() > max.getTime()) {\n    return max;\n  }\n\n  return v;\n};\n\nconst DatePickerRangeView: React.FC<DatePickerRangeViewProps> = ({\n  initialValue,\n  confirmButtonText,\n  resetButtonText,\n  onConfirm,\n  placeholder,\n  clearable,\n  onClear,\n  clearButtonText,\n\n  // DateView\n  mode = 'Y-D',\n  min,\n  max,\n  renderLabel,\n  loading,\n\n  testID,\n  ...restProps\n}) => {\n  const _initialValue = !isNil(initialValue) ? initialValue : defaultInitialValue;\n\n  const [value, onChange] = useControllableValue<DatePickerRangeValue>(restProps, {\n    defaultValue: [..._initialValue],\n  });\n  const [minDateS, maxDateS] = useDateMinMax(mode, min, value[1] || max);\n  const [minDateE, maxDateE] = useDateMinMax(mode, value[0] || min, max);\n  const currentDate = useMemo(() => new Date(), []);\n\n  const [dayActive, setDayActive] = useState<0 | 1>(0);\n  const Values = useRef<DatePickerRangeValue>([...value]);\n  const OriginalValues = useRef<DatePickerRangeValue>([..._initialValue]);\n  const [limitDates, setLimitDates] = useState<DatePickerRangeValue>([\n    min || null,\n    Values.current[1] || max || null,\n  ]);\n\n  // 同步 value，避免外部 value 清空后，触发 onChangePickView 的时候把旧数据带出来\n  useEffect(() => {\n    Values.current = [...value];\n  }, [value]);\n\n  const onChangePickView = usePersistFn((v: Date) => {\n    Values.current[dayActive] = v;\n    onChange([...Values.current]);\n  });\n\n  const onPressConfirm = usePersistFn(() => {\n    onConfirm?.(Values.current);\n  });\n  const onPressClear = usePersistFn(() => {\n    onClear?.(Values.current);\n  });\n\n  const onPressDay1 = usePersistFn(() => {\n    // 切换的时候没有滚动时间做默认选择\n    if (!Values.current[0]) {\n      Values.current[0] = getRightDate(currentDate, minDateE, maxDateE);\n      onChange([...Values.current]);\n    }\n\n    setDayActive(0);\n    setLimitDates([min || null, Values.current[1] || max || null]);\n  });\n\n  const onPressDay2 = usePersistFn(() => {\n    // 切换的时候没有滚动时间做默认选择\n    if (!Values.current[1]) {\n      Values.current[1] = getRightDate(Values.current[0] || new Date(), minDateS, maxDateS);\n      onChange([...Values.current]);\n    }\n\n    setDayActive(1);\n    setLimitDates([Values.current[0] || min || null, max || null]);\n  });\n\n  const onPressReset = usePersistFn(() => {\n    Values.current = [...OriginalValues.current];\n\n    onChange([...Values.current]);\n\n    // 最大最小时间使用了 useMemo，等数据重新计算好后再回到开始时间\n    setTimeout(() => {\n      onPressDay1();\n    }, 0);\n  });\n\n  // 把开时间提前锁定\n  useEffect(() => {\n    onPressDay1();\n  }, [onPressDay1]);\n\n  return (\n    <>\n      <View className='flex-row px-4' testID={testID}>\n        <TouchableOpacity\n          className='flex-1 items-center justify-center'\n          onPress={onPressDay1}\n          activeOpacity={0.8}\n        >\n          <Text className='native:text-lg text-sm'>开始时间</Text>\n          <Text\n            className={cn('native:text-lg mt-1 text-sm text-gray-300', {\n              'text-primary-5 font-semibold': dayActive === 0,\n            })}\n          >\n            {value[0] ? formatDate(mode, value[0]) : placeholder?.[0] ?? '请选择'}\n          </Text>\n        </TouchableOpacity>\n\n        <TouchableOpacity\n          className='flex-1 items-center justify-center'\n          onPress={onPressDay2}\n          activeOpacity={0.8}\n        >\n          <Text className='native:text-lg text-sm text-muted-foreground'>结束时间</Text>\n          <Text\n            className={cn('native:text-lg mt-1 text-sm text-gray-300', {\n              'font-semibold text-primary-5': dayActive === 1,\n            })}\n          >\n            {value[1] ? formatDate(mode, value[1]) : placeholder?.[1] ?? '请选择'}\n          </Text>\n        </TouchableOpacity>\n      </View>\n\n      <DatePickerView\n        mode={mode}\n        value={value[dayActive] || currentDate}\n        renderLabel={renderLabel}\n        onChange={onChangePickView}\n        min={limitDates[0] || undefined}\n        max={limitDates[1] || undefined}\n        loading={loading}\n      />\n\n      <View className='flex-row gap-x-3 px-4'>\n        {clearable ? (\n          <View className='flex-1 gap-y-1.5'>\n            <Button type='hazy' onPress={onPressClear} text={clearButtonText ?? '清空'}></Button>\n          </View>\n        ) : null}\n        <View className={cn('flex-1', clearable ? 'gap-y-1.5' : 'gap-y-3')}>\n          <Button type='hazy' onPress={onPressReset} text={resetButtonText ?? '重置'}></Button>\n        </View>\n        <View className='flex-1 gap-y-3'>\n          <Button text={confirmButtonText ?? '确定'} onPress={onPressConfirm} />\n        </View>\n      </View>\n    </>\n  );\n};\n\nexport default memo(DatePickerRangeView);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/date-picker/date-picker-single-method.tsx",
      "content": "import React, { memo, useCallback, useEffect, useRef, useState } from 'react';\nimport omit from 'lodash/omit';\nimport pick from 'lodash/pick';\nimport { Platform, View, Text } from 'react-native';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport type { DatePickerAction, DatePickerSingleMethodProps } from './interface';\nimport DatePickerView from '../date-picker-view';\nimport type { DatePickerViewProps } from '../date-picker-view/interface';\nimport { usePersistFn } from '../../hooks';\nimport { callInterceptor } from '../../helpers';\nimport Popup from '../popup';\nimport { cn } from '../../lib/utils';\n\nconst DATE_PICKER_VIEW_PROPS_KEYS = ['defaultValue', 'mode', 'min', 'max', 'renderLabel'];\n\nconst DatePickerSingleMethod: React.FC<DatePickerSingleMethodProps> = ({\n  title,\n  confirmButtonText,\n  cancelButtonText,\n  onCancel,\n  onConfirm,\n  onPressOverlay,\n  beforeClose,\n  ...restProps\n}) => {\n  const insets = useSafeAreaInsets();\n\n  const [visible, setVisible] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const Value = useRef<Date>(restProps.defaultValue || new Date());\n\n  useEffect(() => {\n    setVisible(true);\n  }, []);\n\n  const onChange = useCallback((v: Date) => {\n    Value.current = v;\n  }, []);\n\n  const doAction = usePersistFn((action: DatePickerAction) => {\n    setLoading(true);\n\n    callInterceptor(beforeClose, {\n      args: [action, Value.current],\n      done: () => {\n        switch (action) {\n          case 'cancel':\n            onCancel?.(Value.current);\n\n            break;\n          case 'confirm':\n            onConfirm?.(Value.current);\n\n            break;\n          case 'overlay':\n            onPressOverlay?.(Value.current);\n\n            break;\n          default:\n            break;\n        }\n\n        setLoading(false);\n        setVisible(false);\n      },\n      canceled: () => {\n        setLoading(false);\n      },\n    });\n  });\n\n  const onPressCancel = useCallback(() => {\n    doAction('cancel');\n  }, [doAction]);\n\n  const onPressConfirm = useCallback(() => {\n    doAction('confirm');\n  }, [doAction]);\n\n  const onPressPopupOverlay = useCallback(() => {\n    doAction('overlay');\n  }, [doAction]);\n\n  const onRequestClose = useCallback(() => {\n    onPressPopupOverlay();\n\n    return true;\n  }, [onPressPopupOverlay]);\n\n  const dataPickerViewProps = pick(restProps, DATE_PICKER_VIEW_PROPS_KEYS) as DatePickerViewProps;\n  const popupProps = omit(restProps, DATE_PICKER_VIEW_PROPS_KEYS);\n\n  return (\n    <Popup\n      {...popupProps}\n      onRequestClose={onRequestClose}\n      visible={visible}\n      onPressOverlay={onPressPopupOverlay}\n      position='bottom'\n      round\n    >\n      <Popup.Header\n        showClose={false}\n        title={title}\n        leftExtra={\n          <Text\n            suppressHighlighting\n            className='text-2xl text-[#5E5E5E]'\n            onPress={loading ? undefined : onPressCancel}\n          >\n            {cancelButtonText ?? '取消'}\n          </Text>\n        }\n        rightExtra={\n          <Text\n            suppressHighlighting\n            className='text-2xl text-primary-5'\n            onPress={loading ? undefined : onPressConfirm}\n          >\n            {confirmButtonText ?? '确定'}\n          </Text>\n        }\n      />\n\n      <DatePickerView {...dataPickerViewProps} loading={loading} onChange={onChange} />\n\n      <View\n        className={cn(Platform.OS !== 'ios' ? 'h-4' : 'h-0')}\n        style={{ height: insets.bottom }}\n      />\n    </Popup>\n  );\n};\n\nexport default memo(DatePickerSingleMethod);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/date-picker/index.tsx",
      "content": "import DatePickerRangeMethodView from './date-picker-range-method';\nimport DatePickerRangeViewView from './date-picker-range-view';\nimport DatePickerSingleMethodView from './date-picker-single-method';\nimport type { DatePickerInstance } from './interface';\nimport Portal from '../portal';\n\nconst DatePicker: DatePickerInstance = (opts) => {\n  return new Promise((resolve) => {\n    const key = Portal.add(\n      <DatePickerSingleMethodView\n        {...opts}\n        onCancel={(v) => {\n          opts.onCancel?.(v);\n          resolve({\n            action: 'cancel',\n            value: v,\n          });\n        }}\n        onConfirm={(v) => {\n          opts.onConfirm?.(v);\n          resolve({\n            action: 'confirm',\n            value: v,\n          });\n        }}\n        onPressOverlay={(v) => {\n          opts.onPressOverlay?.(v);\n          resolve({\n            action: 'overlay',\n            value: v,\n          });\n        }}\n        onClosed={() => {\n          opts.onClosed?.();\n          Portal.remove(key);\n        }}\n      />\n    );\n  });\n};\n\nDatePicker.RangeView = DatePickerRangeViewView;\n\nDatePicker.range = (opts) => {\n  return new Promise((resolve) => {\n    const key = Portal.add(\n      <DatePickerRangeMethodView\n        {...opts}\n        onCancel={(v) => {\n          opts.onCancel?.(v);\n          resolve({\n            action: 'cancel',\n            values: v,\n          });\n        }}\n        onConfirm={(v) => {\n          opts.onConfirm?.(v);\n          resolve({\n            action: 'confirm',\n            values: v,\n          });\n        }}\n        onPressOverlay={(v) => {\n          opts.onPressOverlay?.(v);\n          resolve({\n            action: 'overlay',\n            values: v,\n          });\n        }}\n        onClear={(v) => {\n          opts.onClear?.(v);\n          resolve({\n            action: 'clear',\n            values: v,\n          });\n        }}\n        onClosed={() => {\n          opts.onClosed?.();\n          Portal.remove(key);\n        }}\n      />\n    );\n  });\n};\n\nexport default DatePicker;\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/date-picker/interface.ts",
      "content": "import type { DatePickerColumnMode, DatePickerViewProps } from '../date-picker-view/interface';\nimport type { PopupPropsCommon } from '../popup/types';\n\nexport type DatePickerAction = 'cancel' | 'confirm' | 'overlay';\n\nexport type DatePickerRangeAction = 'cancel' | 'confirm' | 'overlay' | 'clear';\n\nexport type DatePickerRangeValue = [Date | null, Date | null];\n\nexport interface DatePickerSingleMethodProps\n  extends Omit<DatePickerViewProps, 'value' | 'onChange' | 'loading'>,\n    Omit<PopupPropsCommon, 'onPressOverlay' | 'visible' | 'onRequestClose'> {\n  /**\n   * 顶部标题\n   */\n  title?: React.ReactNode;\n\n  /**\n   * 确认按钮文字\n   * @default '确认'\n   */\n  confirmButtonText?: string;\n\n  /**\n   * 取消按钮文字\n   * @default '取消'\n   */\n  cancelButtonText?: string;\n\n  /**\n   * 点击取消\n   */\n  onCancel?: (value: Date) => void;\n\n  /**\n   * 点击确定\n   */\n  onConfirm?: (value: Date) => void;\n\n  /**\n   * 点击遮罩层\n   */\n  onPressOverlay?: (value: Date) => void;\n\n  /**\n   * 关闭前的回调函数，返回 false 可阻止关闭，支持返回 Promise\n   */\n  beforeClose?: (action: DatePickerAction, value: Date) => boolean | Promise<boolean>;\n}\n\nexport interface DatePickerRangeViewProps\n  extends Omit<DatePickerViewProps, 'value' | 'defaultValue' | 'onChange' | 'mode'> {\n  /**\n   * 日期选择的类型\n   * @default 'Y-D'\n   */\n  mode?: DatePickerColumnMode;\n\n  /**\n   * 默认时间组\n   */\n  defaultValue?: DatePickerRangeValue;\n\n  /**\n   * 选中时间组\n   */\n  value?: DatePickerRangeValue;\n\n  /**\n   * 初始值，只有初始化以及重置时生效\n   * @default [null, null]\n   */\n  initialValue?: DatePickerRangeValue;\n\n  /**\n   * 确认按钮文字\n   * @default '确认'\n   */\n  confirmButtonText?: string;\n\n  /**\n   * 重置按钮文字\n   * @default '重置'\n   */\n  resetButtonText?: string;\n\n  /**\n   * 占位文案\n   * @default ['请选择', '请选择']\n   */\n  placeholder?: [string, string];\n\n  /**\n   * 点击确定\n   */\n  onConfirm?: (values: DatePickerRangeValue) => void;\n\n  /**\n   * 变化时的回调函数\n   */\n  onChange?: (values: DatePickerRangeValue) => void;\n\n  /**\n   * 显示清空按钮\n   * @default false\n   */\n  clearable?: boolean;\n\n  /**\n   * 点击清空按钮\n   */\n  onClear?: (values: DatePickerRangeValue) => void;\n\n  /**\n   * 清空按钮文字\n   * @default '清空'\n   */\n  clearButtonText?: string;\n}\n\nexport interface DatePickerRangeMethodProps\n  extends Omit<DatePickerRangeViewProps, 'loading' | 'value' | 'onChange' | 'onConfirm'>,\n    Omit<PopupPropsCommon, 'visible' | 'onPressOverlay' | 'onRequestClose'> {\n  /**\n   * 顶部标题\n   */\n  title?: React.ReactNode;\n\n  /**\n   * 副标题\n   */\n  subTitle?: React.ReactNode;\n\n  /**\n   * 点击取消\n   */\n  onCancel?: (values: DatePickerRangeValue) => void;\n\n  /**\n   * 点击确定\n   */\n  onConfirm?: (values: DatePickerRangeValue) => void;\n\n  /**\n   * 点击遮罩层\n   */\n  onPressOverlay?: (values: DatePickerRangeValue) => void;\n\n  /**\n   * 关闭前的回调函数，返回 false 可阻止关闭，支持返回 Promise\n   */\n  beforeClose?: (action: DatePickerRangeAction, value: DatePickerRangeValue) => boolean | Promise<boolean>;\n}\n\nexport interface DatePickerInstance {\n  range: (p: DatePickerRangeMethodProps) => Promise<{\n    action: DatePickerRangeAction;\n    values: DatePickerRangeValue;\n  }>;\n  RangeView: React.FC<DatePickerRangeViewProps>;\n\n  (p: DatePickerSingleMethodProps): Promise<{\n    action: DatePickerAction;\n    value: Date;\n  }>;\n}\n",
      "type": "registry:component"
    }
  ]
}