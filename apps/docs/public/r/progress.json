{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "progress",
  "type": "registry:component",
  "title": "Example progress",
  "author": "@gabimoncha",
  "description": "Displays a button which is always red.",
  "files": [
    {
      "path": "./node_modules/@rnr/example-library/src/components/progress/progress.tsx",
      "content": "import React, { useState, useCallback, useRef, useEffect, memo } from 'react';\nimport type { LayoutChangeEvent, ViewStyle } from 'react-native';\nimport { View, Text, Animated } from 'react-native';\n\nimport type { ProgressProps } from './interface';\nimport { usePersistFn } from '../../hooks';\nimport { easing, getDefaultValue } from '../../helpers';\n\ntype ViewLayout = { width: number; height: number };\n\n/**\n * Progress 进度条\n */\nconst Progress: React.FC<ProgressProps> = ({\n  testID,\n  percentage = 0,\n  pivotText,\n  color,\n  trackColor,\n  pivotColor,\n  textColor,\n  strokeHeight,\n  inactive = false,\n  showPivot = true,\n  square = false,\n  animated = false,\n  animationDuration,\n  onAnimationEnd,\n}) => {\n  const AnimatedValue = useRef(new Animated.Value(0)).current;\n  const StartPercentage = useRef(percentage);\n  const onAnimationEndPersistFn = usePersistFn((n: number) => {\n    onAnimationEnd?.(n);\n  });\n\n  // 默认值\n  color = getDefaultValue(color, '#4080FF');\n\n  if (inactive) {\n    color = '#cacaca';\n  }\n\n  trackColor = getDefaultValue(trackColor, '#EDEFF2');\n  pivotColor = getDefaultValue(pivotColor, color);\n  textColor = getDefaultValue(textColor, '#FFFFFF');\n  pivotText = getDefaultValue(pivotText, `${percentage}%`);\n  strokeHeight = getDefaultValue(strokeHeight, 4)!;\n  animationDuration = getDefaultValue(animationDuration, 300);\n\n  const borderRadius = square ? 0 : strokeHeight / 2;\n\n  const [progressLayout, setProgressLayout] = useState<ViewLayout>({\n    width: 0,\n    height: 0,\n  });\n  const [textLayout, setTextLayout] = useState<ViewLayout>({\n    width: 0,\n    height: 0,\n  });\n\n  useEffect(() => {\n    const action = Animated.timing(AnimatedValue, {\n      toValue: (progressLayout.width * percentage) / 100,\n      duration: animated ? animationDuration : 0,\n      easing: easing.easeInCubic,\n      useNativeDriver: false,\n    });\n\n    action.start(({ finished }) => {\n      if (finished) {\n        onAnimationEndPersistFn(percentage);\n      }\n    });\n\n    return () => {\n      action.stop();\n    };\n  }, [\n    AnimatedValue,\n    percentage,\n    animationDuration,\n    progressLayout.width,\n    animated,\n    onAnimationEndPersistFn,\n  ]);\n\n  const barStyle: ViewStyle = {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    width: AnimatedValue as unknown as number,\n    height: strokeHeight,\n    backgroundColor: color,\n    borderRadius: borderRadius,\n  };\n  const textBoxStyle: ViewStyle = {\n    position: 'absolute',\n    left: AnimatedValue as unknown as number,\n    top: 0,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: pivotColor,\n    paddingHorizontal: 4,\n    borderRadius: 9999,\n    transform: [\n      {\n        translateX: -textLayout.width / 2,\n      },\n      {\n        translateY: -(textLayout.height - strokeHeight) / 2,\n      },\n    ],\n  };\n\n  const onLayoutProgress = useCallback(\n    (e: LayoutChangeEvent) => {\n      AnimatedValue.setValue((e.nativeEvent.layout.width * StartPercentage.current) / 100);\n      setProgressLayout(e.nativeEvent.layout);\n    },\n    [AnimatedValue]\n  );\n\n  const onLayoutText = useCallback((e: LayoutChangeEvent) => {\n    setTextLayout(e.nativeEvent.layout);\n  }, []);\n\n  return (\n    <View\n      testID={testID}\n      onLayout={onLayoutProgress}\n      style={{\n        height: strokeHeight,\n        backgroundColor: trackColor,\n        borderRadius: borderRadius,\n      }}\n    >\n      <Animated.View style={barStyle} />\n      {showPivot ? (\n        <Animated.View onLayout={onLayoutText} style={textBoxStyle}>\n          <Text\n            style={{\n              color: textColor,\n              fontSize: 12,\n              lineHeight: 1.6 * 12,\n            }}\n          >\n            {pivotText}\n          </Text>\n        </Animated.View>\n      ) : null}\n    </View>\n  );\n};\n\nexport default memo(Progress);\n",
      "type": "registry:component"
    }
  ]
}