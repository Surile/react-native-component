{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "progress",
  "type": "registry:component",
  "title": "Example progress",
  "author": "@gabimoncha",
  "description": "Displays a button which is always red.",
  "registryDependencies": [
    "http://localhost:3000/r/helpers.json",
    "http://localhost:3000/r/button.json",
    "http://localhost:3000/r/result.json",
    "http://localhost:3000/r/space.json",
    "http://localhost:3000/r/hooks.json"
  ],
  "files": [
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/progress/index.ts",
      "content": "\nimport { attachPropertiesToComponent } from '../../helpers'\nimport Progress from './progress'\nimport ProgressPage from './progress-page'\n\nexport default attachPropertiesToComponent(Progress, {\n  Page: ProgressPage,\n})\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/progress/interface.ts",
      "content": "import type { PropsWithChildren, ReactNode } from 'react'\nimport type { ColorValue, ViewProps } from 'react-native'\n\nexport interface ProgressProps extends Pick<ViewProps, 'testID'> {\n  /**\n   * 进度百分比\n   * @default 0\n   */\n  percentage?: number\n\n  /**\n   * 进度条粗细\n   * @default progress_height\n   */\n  strokeHeight?: number\n\n  /**\n   * 进度条颜色\n   * @default progress_color\n   */\n  color?: ColorValue\n\n  /**\n   * 轨道颜色\n   *\n   * @default progress_background_color\n   */\n  trackColor?: ColorValue\n\n  /**\n   * 进度文字内容\n   * @default `${percentage}%`\n   */\n  pivotText?: string\n\n  /**\n   * 进度文字背景色\n   * @default 同进度条颜色\n   */\n  pivotColor?: ColorValue\n\n  /**\n   * 进度文字颜色\n   * @default progress_pivot_text_color\n   */\n  textColor?: ColorValue\n\n  /**\n   * 是否置灰\n   * @default false\n   */\n  inactive?: boolean\n\n  /**\n   * 是否显示进度文字\n   * @default true\n   */\n  showPivot?: boolean\n\n  /**\n   * 是否为方形按钮\n   * @default false\n   */\n  square?: boolean\n\n  /**\n   * 是否开启进度条变动动画\n   * @default false\n   */\n  animated?: boolean\n\n  /**\n   * 动画持续时间\n   * @description animation_duration_base\n   */\n  animationDuration?: number\n\n  /**\n   * 动画结束时的回调函数\n   */\n  onAnimationEnd?: (percentage: number) => void\n}\n\nexport interface ProgressPageProps extends PropsWithChildren<{}> {\n  /**\n   * 页面是否在加载中\n   * @default false\n   */\n  loading?: boolean\n\n  /**\n   * 初始起点进度百分值\n   * @default 10\n   */\n  defaultPercentage?: number\n\n  /**\n   * 背景色，默认会占满个屏幕\n   * @default progress_page_background_color\n   */\n  backgroundColor?: ColorValue\n\n  /**\n   * 加载出错\n   */\n  fail?: boolean\n\n  /**\n   * 加载失败提示\n   * @default '加载失败，请稍后再试～'\n   */\n  failMessage?: ReactNode\n\n  /**\n   * 自定义加载出错的图标\n   */\n  failIcon?: ReactNode\n\n  /**\n   * 加载失败点击重新加载\n   */\n  onPressReload?: () => void\n\n  /**\n   * 刷新按钮文案\n   * @default '点击刷新'\n   */\n  refreshText?: string\n\n  /**\n   * 加载失败额外扩展区域\n   */\n  failExtra?: ReactNode\n\n  /**\n   * loading 时自定义显示扩展元素\n   */\n  extraLoading?: ReactNode\n\n  /**\n   * 同步渲染 children 遮罩层的 zIndex\n   * @default 1000\n   */\n  overlayZIndex?: number\n\n  /**\n   * 同步渲染 children\n   * @default false\n   */\n  syncRenderChildren?: boolean\n}\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/progress/progress-page.tsx",
      "content": "import React, { useState, useCallback, useEffect, memo, isValidElement } from 'react';\nimport type { ViewStyle } from 'react-native';\nimport { View, Text, StyleSheet } from 'react-native';\n\nimport Button from '../button';\nimport Result from '../result';\nimport Space from '../space';\n\nimport type { ProgressPageProps } from './interface';\nimport Progress from './progress';\nimport { getDefaultValue } from '../../helpers';\nimport { usePersistFn } from '../../hooks';\n\nconst ProgressPage: React.FC<ProgressPageProps> = ({\n  children,\n  loading: loadingOut,\n  backgroundColor,\n  defaultPercentage = 10,\n  fail,\n  failMessage,\n  failIcon,\n  onPressReload,\n  refreshText,\n  failExtra,\n  extraLoading,\n  overlayZIndex = 1000,\n  syncRenderChildren = false,\n}) => {\n  backgroundColor = getDefaultValue(backgroundColor, '#FFFFFF');\n\n  const [state, setState] = useState({\n    loading: loadingOut,\n    percentage: defaultPercentage,\n    duration: 0,\n    animated: false,\n  });\n\n  const onAnimationEnd = useCallback((n: number) => {\n    if (n === 100) {\n      // 延迟更改状态更顺畅，进度条是完整走完的\n      setTimeout(() => {\n        setState((s) => ({\n          ...s,\n          loading: false,\n        }));\n      }, 0);\n    }\n  }, []);\n\n  const onPressReloadPersistFn = usePersistFn(() => {\n    onPressReload?.();\n  });\n\n  useEffect(() => {\n    setState((s) => {\n      const isReload = !s.loading && loadingOut;\n\n      if (isReload) {\n        return {\n          ...s,\n          loading: loadingOut,\n          percentage: defaultPercentage,\n          duration: 0,\n          animated: false,\n        };\n      }\n\n      return { ...s };\n    });\n  }, [defaultPercentage, loadingOut]);\n\n  useEffect(() => {\n    // 做一个延迟，避免上下两次操作状态合并在一个中，reload 的时候丢失过渡状态\n    setTimeout(() => {\n      setState((s) => {\n        return {\n          ...s,\n          percentage: loadingOut ? 90 : 100,\n          duration: loadingOut ? 1500 : 100,\n          animated: true,\n        };\n      });\n    }, 0);\n  }, [loadingOut]);\n\n  const placeholderStyle: ViewStyle = {\n    flex: 1,\n    backgroundColor: backgroundColor,\n  };\n\n  const placeholderJSX = state.loading ? (\n    <View style={placeholderStyle}>\n      <Progress\n        percentage={state.percentage}\n        showPivot={false}\n        animated={state.animated}\n        animationDuration={state.duration}\n        onAnimationEnd={onAnimationEnd}\n        square\n      />\n      {extraLoading}\n    </View>\n  ) : null;\n\n  const errorJSX =\n    !state.loading && fail ? (\n      <Result\n        style={{\n          justifyContent: 'center',\n        }}\n        className='bg-white flex-1'\n        status='warning'\n        subtitle={\n          <Space head gap='l' align='center'>\n            {isValidElement(failMessage) ? (\n              failMessage\n            ) : (\n              <Text className='text-xl text-gray-500'>\n                {failMessage ?? '加载失败，请稍后再试～'}\n              </Text>\n            )}\n\n            {onPressReload ? (\n              <Button\n                className='w-[156px]'\n                text={refreshText ?? '点击刷新'}\n                onPress={onPressReloadPersistFn}\n              />\n            ) : null}\n\n            {failExtra}\n          </Space>\n        }\n        renderIcon={() => {\n          if (failIcon) {\n            return failIcon;\n          }\n\n          return <Result.IconWarning />;\n        }}\n      />\n    ) : null;\n\n  if (syncRenderChildren) {\n    return (\n      <>\n        {children}\n\n        {state.loading || fail ? (\n          <View\n            style={{\n              ...StyleSheet.absoluteFillObject,\n              zIndex: overlayZIndex,\n            }}\n          >\n            {placeholderJSX}\n            {errorJSX}\n          </View>\n        ) : null}\n      </>\n    );\n  }\n\n  return (\n    <>\n      {!loadingOut && !state.loading && !fail ? children : null}\n      {placeholderJSX}\n      {errorJSX}\n    </>\n  );\n};\n\nexport default memo(ProgressPage);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/progress/progress.tsx",
      "content": "import React, { useState, useCallback, useRef, useEffect, memo } from 'react';\nimport type { LayoutChangeEvent, ViewStyle } from 'react-native';\nimport { View, Text, Animated } from 'react-native';\n\nimport type { ProgressProps } from './interface';\nimport { usePersistFn } from '../../hooks';\nimport { easing, getDefaultValue } from '../../helpers';\n\ntype ViewLayout = { width: number; height: number };\n\n/**\n * Progress 进度条\n */\nconst Progress: React.FC<ProgressProps> = ({\n  testID,\n  percentage = 0,\n  pivotText,\n  color,\n  trackColor,\n  pivotColor,\n  textColor,\n  strokeHeight,\n  inactive = false,\n  showPivot = true,\n  square = false,\n  animated = false,\n  animationDuration,\n  onAnimationEnd,\n}) => {\n  const AnimatedValue = useRef(new Animated.Value(0)).current;\n  const StartPercentage = useRef(percentage);\n  const onAnimationEndPersistFn = usePersistFn((n: number) => {\n    onAnimationEnd?.(n);\n  });\n\n  // 默认值\n  color = getDefaultValue(color, '#4080FF');\n\n  if (inactive) {\n    color = '#cacaca';\n  }\n\n  trackColor = getDefaultValue(trackColor, '#EDEFF2');\n  pivotColor = getDefaultValue(pivotColor, color);\n  textColor = getDefaultValue(textColor, '#FFFFFF');\n  pivotText = getDefaultValue(pivotText, `${percentage}%`);\n  strokeHeight = getDefaultValue(strokeHeight, 4)!;\n  animationDuration = getDefaultValue(animationDuration, 300);\n\n  const borderRadius = square ? 0 : strokeHeight / 2;\n\n  const [progressLayout, setProgressLayout] = useState<ViewLayout>({\n    width: 0,\n    height: 0,\n  });\n  const [textLayout, setTextLayout] = useState<ViewLayout>({\n    width: 0,\n    height: 0,\n  });\n\n  useEffect(() => {\n    const action = Animated.timing(AnimatedValue, {\n      toValue: (progressLayout.width * percentage) / 100,\n      duration: animated ? animationDuration : 0,\n      easing: easing.easeInCubic,\n      useNativeDriver: false,\n    });\n\n    action.start(({ finished }) => {\n      if (finished) {\n        onAnimationEndPersistFn(percentage);\n      }\n    });\n\n    return () => {\n      action.stop();\n    };\n  }, [\n    AnimatedValue,\n    percentage,\n    animationDuration,\n    progressLayout.width,\n    animated,\n    onAnimationEndPersistFn,\n  ]);\n\n  const barStyle: ViewStyle = {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    width: AnimatedValue as unknown as number,\n    height: strokeHeight,\n    backgroundColor: color,\n    borderRadius: borderRadius,\n  };\n  const textBoxStyle: ViewStyle = {\n    position: 'absolute',\n    left: AnimatedValue as unknown as number,\n    top: 0,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: pivotColor,\n    paddingHorizontal: 4,\n    borderRadius: 9999,\n    transform: [\n      {\n        translateX: -textLayout.width / 2,\n      },\n      {\n        translateY: -(textLayout.height - strokeHeight) / 2,\n      },\n    ],\n  };\n\n  const onLayoutProgress = useCallback(\n    (e: LayoutChangeEvent) => {\n      AnimatedValue.setValue((e.nativeEvent.layout.width * StartPercentage.current) / 100);\n      setProgressLayout(e.nativeEvent.layout);\n    },\n    [AnimatedValue]\n  );\n\n  const onLayoutText = useCallback((e: LayoutChangeEvent) => {\n    setTextLayout(e.nativeEvent.layout);\n  }, []);\n\n  return (\n    <View\n      testID={testID}\n      onLayout={onLayoutProgress}\n      style={{\n        height: strokeHeight,\n        backgroundColor: trackColor,\n        borderRadius: borderRadius,\n      }}\n    >\n      <Animated.View style={barStyle} />\n      {showPivot ? (\n        <Animated.View onLayout={onLayoutText} style={textBoxStyle}>\n          <Text\n            style={{\n              color: textColor,\n              fontSize: 12,\n              lineHeight: 1.6 * 12,\n            }}\n          >\n            {pivotText}\n          </Text>\n        </Animated.View>\n      ) : null}\n    </View>\n  );\n};\n\nexport default memo(Progress);\n",
      "type": "registry:component"
    }
  ]
}