{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dialog",
  "type": "registry:component",
  "title": "Example dialog",
  "author": "@gabimoncha",
  "description": "Displays a button which is always red.",
  "registryDependencies": [
    "https://react-native-component-docs.vercel.app/r/hooks.json",
    "https://react-native-component-docs.vercel.app/r/number-input.json",
    "https://react-native-component-docs.vercel.app/r/text-input.json",
    "https://react-native-component-docs.vercel.app/r/helpers.json",
    "https://react-native-component-docs.vercel.app/r/portal.json",
    "https://react-native-component-docs.vercel.app/r/popup.json",
    "https://react-native-component-docs.vercel.app/r/icons.json"
  ],
  "files": [
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/dialog/dialog-input.tsx",
      "content": "import isNil from 'lodash/isNil';\nimport React, { useEffect, useRef, memo, useCallback } from 'react';\nimport { View, Keyboard } from 'react-native';\n\nimport useState from '../../hooks/useStateUpdate';\nimport NumberInput from '../number-input';\nimport TextInput from '../text-input';\nimport type { TextInputInstance } from '../text-input/interface';\n\nimport DialogKeyboard from './dialog-keyboard';\nimport type { DialogInputProps, DialogAction, DialogInputState } from './interface';\nimport { getDefaultValue, callInterceptor } from '../../helpers';\nimport { usePersistFn } from '../../hooks';\n\n/**\n * Dialog 弹出框\n * @description 配合函数的使用\n */\nconst DialogInput: React.FC<DialogInputProps> = ({\n  showCancelButton = true,\n  duration,\n  beforeClose,\n  onPressCancel,\n  onPressConfirm,\n\n  defaultValue,\n  placeholder,\n  type = 'text',\n  autoFocus = true,\n  textInput: { value: textInputValue, onChangeText, ...resetTextInputProps } = {},\n\n  numberInput: { value: numberInputValue, onChange, ...resetNumberInputProps } = {},\n\n  ...restProps\n}) => {\n  const isInputText = type === 'textarea' || type === 'text';\n  const realValue = isInputText ? textInputValue : numberInputValue;\n\n  const TextInputRef = useRef<TextInputInstance>(null);\n\n  const [state, setState] = useState<DialogInputState>({\n    visible: false,\n    value: defaultValue || '',\n    cancel: false,\n    confirm: false,\n    overlay: false,\n  });\n\n  duration = getDefaultValue(duration, 300);\n\n  const onChangeTextPersistFn = usePersistFn((t: string) => {\n    setState({\n      value: t,\n    });\n    onChangeText?.(t);\n  });\n\n  const onChangePersistFn = usePersistFn((t: number) => {\n    setState({\n      value: t,\n    });\n    onChange?.(t);\n  });\n\n  const genOnPressBtn = (action: Exclude<DialogAction, 'overlay'>) => () => {\n    Keyboard.dismiss();\n\n    setState({\n      [action]: true,\n    });\n\n    const actionCallback = action === 'confirm' ? onPressConfirm : onPressCancel;\n\n    const finalValue = !isNil(state.value) ? `${state.value}` : '';\n\n    callInterceptor(beforeClose, {\n      args: [action, finalValue],\n      done: () => {\n        callInterceptor(actionCallback, {\n          args: [finalValue],\n          done: () => {\n            setState({\n              [action]: false,\n              visible: false,\n            });\n          },\n          canceled: () => {\n            setState({\n              [action]: false,\n            });\n          },\n        });\n      },\n      canceled: () => {\n        setState({\n          [action]: false,\n        });\n      },\n    });\n  };\n\n  useEffect(() => {\n    setState({\n      visible: true,\n    });\n\n    // 当对话框完全显示的时候再去聚焦\n    if (autoFocus) {\n      setTimeout(() => {\n        TextInputRef.current?.focus();\n      }, duration);\n    }\n  }, [duration, autoFocus]);\n\n  useEffect(() => {\n    if (!isNil(realValue)) {\n      setState({\n        value: realValue,\n      });\n    }\n  }, [realValue]);\n\n  const onPressClose = useCallback(() => {\n    setState({\n      visible: false,\n    });\n  }, []);\n\n  return (\n    <DialogKeyboard\n      {...restProps}\n      showCancelButton={showCancelButton}\n      closeOnPressOverlay={false}\n      visible={state.visible}\n      onPressConfirm={genOnPressBtn('confirm')}\n      onPressCancel={genOnPressBtn('cancel')}\n      cancelButtonLoading={state.cancel}\n      confirmButtonLoading={state.confirm}\n      onPressClose={onPressClose}\n    >\n      <View className='mx-4 mt-2 pb-1 overflow-hidden max-h-[200px]'>\n        {type === 'textarea' || type === 'text' ? (\n          <TextInput\n            size='xl'\n            {...resetTextInputProps}\n            ref={TextInputRef}\n            type={type}\n            placeholder={placeholder}\n            value={state.value as string}\n            onChangeText={onChangeTextPersistFn}\n            bordered\n          />\n        ) : (\n          <NumberInput\n            size='xl'\n            {...resetNumberInputProps}\n            ref={TextInputRef}\n            type={type}\n            placeholder={placeholder}\n            value={state.value as number}\n            onChange={onChangePersistFn}\n            bordered\n          />\n        )}\n      </View>\n    </DialogKeyboard>\n  );\n};\n\nexport default memo(DialogInput);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/dialog/dialog-instance.tsx",
      "content": "import React from 'react'\n\nimport Portal from '../portal'\n\nimport Dialog from './dialog'\nimport DialogInput from './dialog-input'\nimport DialogKeyboard from './dialog-keyboard'\nimport DialogMethod from './dialog-method'\nimport type {\n  DialogOptions,\n  DialogAction,\n  DialogInputOptions,\n  DialogProps,\n  DialogKeyboardProps,\n} from './interface'\n\nexport const Instance = (opts: DialogOptions) => {\n  return new Promise<DialogAction>(resolve => {\n    const key = Portal.add(\n      <DialogMethod\n        {...opts}\n        onClosed={() => {\n          Portal.remove(key)\n\n          opts.onClosed?.()\n        }}\n        onResponse={action => {\n          resolve(action)\n        }}\n      />,\n    )\n  })\n}\n\nexport const confirm = (options: Omit<DialogOptions, 'showCancelButton'>) =>\n  Instance({\n    showCancelButton: true,\n    ...options,\n  })\n\nexport const input = (opts: DialogInputOptions) => {\n  const key = Portal.add(\n    <DialogInput\n      {...opts}\n      onClosed={() => {\n        Portal.remove(key)\n        opts.onClosed?.()\n      }}\n    />,\n  )\n}\n\nexport const Component: React.FC<\n  React.PropsWithChildren<DialogProps>\n> = props => (\n  <Portal>\n    <Dialog {...props} />\n  </Portal>\n)\n\nexport const DialogComponent = Dialog\n\nexport const Keyboard: React.FC<\n  React.PropsWithChildren<DialogKeyboardProps>\n> = props => (\n  <Portal>\n    <DialogKeyboard {...props} />\n  </Portal>\n)\n\nexport const KeyboardComponent = DialogKeyboard\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/dialog/dialog-keyboard.tsx",
      "content": "import React, { useState, useMemo, useEffect, memo } from 'react'\nimport type { ViewStyle } from 'react-native'\nimport { Keyboard } from 'react-native'\nimport { useSafeAreaInsets } from 'react-native-safe-area-context'\n\nimport Dialog from './dialog'\nimport type { DialogKeyboardProps } from './interface'\n\nconst DialogKeyboard: React.FC<DialogKeyboardProps> = ({\n  style,\n  safeAreaTop,\n  ...restProps\n}) => {\n  const insets = useSafeAreaInsets()\n  const [keyboardShow, setKeyboardShow] = useState(false)\n  const dialogStyle = useMemo<ViewStyle>(\n    () => ({\n      position: 'absolute',\n      top: safeAreaTop ?? insets.top,\n    }),\n    [insets.top, safeAreaTop],\n  )\n\n  useEffect(() => {\n    const keyboardDidShow = Keyboard.addListener('keyboardDidShow', () => {\n      setKeyboardShow(true)\n    })\n    const keyboardDidHide = Keyboard.addListener('keyboardDidHide', () => {\n      setKeyboardShow(false)\n    })\n\n    return () => {\n      keyboardDidShow.remove()\n      keyboardDidHide.remove()\n    }\n  }, [])\n\n  return (\n    <Dialog\n      {...restProps}\n      style={\n        keyboardShow ? (style ? [dialogStyle, style] : dialogStyle) : style\n      }\n    />\n  )\n}\n\nexport default memo(DialogKeyboard)\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/dialog/dialog-method.tsx",
      "content": "import React, { useEffect, memo } from 'react';\n\nimport { callInterceptor } from '../../helpers';\nimport useState from '../../hooks/useStateUpdate';\n\nimport Dialog from './dialog';\nimport type { DialogMethodProps, DialogAction, DialogMethodState } from './interface';\n\n/**\n * Dialog 弹出框\n * @description 配合函数的使用\n */\nconst DialogMethod: React.FC<DialogMethodProps> = ({ beforeClose, onResponse, ...restProps }) => {\n  const [state, setState] = useState<DialogMethodState>({\n    visible: false,\n    cancel: false,\n    confirm: false,\n    overlay: false,\n  });\n\n  const genOnPressBtn = (action: DialogAction) => () => {\n    setState({\n      [action]: true,\n    });\n\n    callInterceptor(beforeClose, {\n      args: [action],\n      done: () => {\n        onResponse?.(action);\n        setState({\n          [action]: false,\n          visible: false,\n        });\n      },\n      canceled: () => {\n        setState({\n          [action]: false,\n        });\n      },\n    });\n  };\n\n  useEffect(() => {\n    setState({\n      visible: true,\n    });\n  }, []);\n\n  const onRequestClose = () => {\n    genOnPressBtn('overlay')();\n    return true;\n  };\n\n  const onPressClose = () => {\n    setState({\n      visible: false,\n    });\n  };\n\n  return (\n    <Dialog\n      {...restProps}\n      onRequestClose={onRequestClose}\n      visible={state.visible}\n      onPressConfirm={genOnPressBtn('confirm')}\n      onPressCancel={genOnPressBtn('cancel')}\n      onPressOverlay={genOnPressBtn('overlay')}\n      cancelButtonLoading={state.cancel}\n      confirmButtonLoading={state.confirm}\n      onPressClose={onPressClose}\n    />\n  );\n};\n\nexport default memo(DialogMethod);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/dialog/dialog.tsx",
      "content": "import isNil from 'lodash/isNil';\nimport React, { useRef, useCallback, memo, isValidElement } from 'react';\nimport { View, Text, Animated } from 'react-native';\n\nimport Button from '../button';\nimport Popup from '../popup/popup';\n\nimport type { DialogProps } from './interface';\nimport { easing, getDefaultValue, renderTextLikeJSX } from '../../helpers';\nimport { usePersistFn } from '../../hooks';\nimport { cn } from '../../lib/utils';\nimport { CrossOutline } from '../icons';\n\nconst defaultOnRequestClose = () => {\n  return true;\n};\n\n/**\n * Dialog 弹出框\n * @description 弹出模态框，常用于消息提示、消息确认，或在当前页面内完成特定的交互操作。\n * @description 弹出框组件支持函数调用和组件调用两种方式。\n */\nconst Dialog: React.FC<DialogProps> = ({\n  children,\n  style,\n  title,\n  message,\n  width,\n  messageAlign = 'center',\n  showConfirmButton = true,\n  showCancelButton = false,\n  confirmButtonText,\n  cancelButtonText,\n  confirmTextClassName,\n  confirmButtonTextBold = true,\n  cancelTextClassName,\n  cancelButtonTextBold = false,\n  confirmButtonLoading = false,\n  cancelButtonLoading = false,\n  showClose = false,\n  onPressClose,\n  buttonReverse = false,\n  onPressCancel,\n  onPressConfirm,\n  duration,\n  onOpen: onOpenFn,\n  onClose: onCloseFn,\n  onRequestClose = defaultOnRequestClose,\n  ...resetProps\n}) => {\n  const fadeAnim = useRef(new Animated.Value(0)).current;\n  const fadeInstance = useRef<Animated.CompositeAnimation | null>(null);\n\n  width = getDefaultValue(width, 300);\n  duration = getDefaultValue(duration, 300);\n\n  const showDialog = useCallback(\n    (show: boolean) => {\n      if (fadeInstance.current) {\n        fadeInstance.current.stop();\n        fadeInstance.current = null;\n      }\n\n      fadeInstance.current = Animated.timing(\n        fadeAnim, // 动画中的变量值\n        {\n          toValue: show ? 1 : 0,\n          duration: duration,\n          useNativeDriver: true,\n          easing: show ? easing.easeOutCirc : easing.easeInCubic,\n        }\n      );\n\n      fadeInstance.current.start();\n    },\n    [duration, fadeAnim]\n  );\n  const onOpenPersistFn = usePersistFn(() => {\n    showDialog(true);\n    onOpenFn?.();\n  });\n  const onClosePersistFn = usePersistFn(() => {\n    showDialog(false);\n    onCloseFn?.();\n  });\n\n  const titleJSX = renderTextLikeJSX(\n    title,\n    cn('text-center text-4xl px-6 pt-6 pb-4 text-gray-800', {\n      'pb-0': isNil(message),\n    })\n  );\n  const messageJSX = !isNil(message) ? (\n    isValidElement(message) ? (\n      message\n    ) : (\n      <Text\n        className={cn('px-6 text-4xl text-gray-800')}\n        style={{\n          textAlign: messageAlign,\n        }}\n      >\n        {message}\n      </Text>\n    )\n  ) : null;\n\n  const cancelButtonProps = {\n    text: cancelButtonText ?? '取消',\n    loading: cancelButtonLoading,\n    onPress: onPressCancel,\n  };\n\n  const confirmButtonProps = {\n    text: confirmButtonText ?? '确认',\n    loading: confirmButtonLoading,\n    onPress: onPressConfirm,\n  };\n\n  // TODO 优化逆转按钮变量变换\n  const _showCancelButton = buttonReverse ? showConfirmButton : showCancelButton;\n  const _showConfirmButton = buttonReverse ? showCancelButton : showConfirmButton;\n  const _cancelButtonTextBold = buttonReverse ? confirmButtonTextBold : cancelButtonTextBold;\n  const _confirmButtonTextBold = buttonReverse ? cancelButtonTextBold : confirmButtonTextBold;\n  const _cancelButtonProps = buttonReverse ? confirmButtonProps : cancelButtonProps;\n  const _confirmButtonProps = buttonReverse ? cancelButtonProps : confirmButtonProps;\n\n  console.log('🚀 ~ cn ~ confirmTextClassName:', confirmTextClassName);\n\n  return (\n    <Popup\n      {...resetProps}\n      duration={duration}\n      onOpen={onOpenPersistFn}\n      onClose={onClosePersistFn}\n      onRequestClose={onRequestClose}\n    >\n      <Animated.View\n        className='overflow-hidden bg-white rounded-2xl'\n        style={[\n          style,\n          {\n            width,\n            transform: [\n              {\n                scale: fadeAnim.interpolate({\n                  inputRange: [0, 0.01, 0.98, 1],\n                  outputRange: [0, 0.9, 1.02, 1],\n                }),\n              },\n            ],\n          },\n        ]}\n      >\n        {showClose ? (\n          <CrossOutline\n            className='absolute top-4 right-4'\n            onPress={onPressClose}\n            color='#11151A'\n            size={20}\n          />\n        ) : null}\n\n        {titleJSX}\n\n        {titleJSX ? (\n          messageJSX\n        ) : (\n          <View className='pt-6 items-center justify-center'>{messageJSX}</View>\n        )}\n\n        {children}\n\n        {_showCancelButton || _showConfirmButton ? (\n          <View className='flex-row border-t border-gray-200 mt-4'>\n            {_showCancelButton ? (\n              <Button\n                {..._cancelButtonProps}\n                type='link'\n                size='xl'\n                square\n                className='flex-1 m-0'\n                textClassName={cn(\n                  {\n                    'font-bold': _cancelButtonTextBold,\n                  },\n                  cancelTextClassName\n                )}\n              />\n            ) : null}\n            {_showConfirmButton ? (\n              <Button\n                {..._confirmButtonProps}\n                type='link'\n                size='xl'\n                square\n                className={cn('flex-1 m-0', {\n                  'border-l border-gray-200': _showCancelButton,\n                })}\n                textClassName={cn(\n                  {\n                    'font-bold': _confirmButtonTextBold,\n                  },\n                  confirmTextClassName\n                )}\n              />\n            ) : null}\n          </View>\n        ) : null}\n      </Animated.View>\n    </Popup>\n  );\n};\n\nexport default memo(Dialog);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/dialog/index.ts",
      "content": "\nimport { attachPropertiesToComponent } from '../../helpers'\nimport {\n  Instance,\n  confirm,\n  input,\n  Component,\n  DialogComponent,\n  Keyboard,\n  KeyboardComponent,\n} from './dialog-instance'\n\nexport default attachPropertiesToComponent(Instance, {\n  confirm,\n  input,\n  Component,\n  DialogComponent,\n  Keyboard,\n  KeyboardComponent,\n})\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/dialog/interface.ts",
      "content": "import type { PropsWithChildren, ReactNode } from 'react'\nimport type {\n  ColorValue,\n  StyleProp,\n  ViewStyle,\n  TouchableWithoutFeedbackProps,\n  DimensionValue,\n} from 'react-native'\n\nimport type { NumberInputProps } from '../number-input/interface'\nimport type { PopupPropsCommon } from '../popup/types'\nimport type { TextInputProps } from '../text-input/interface'\n\n\nexport type DialogType = 'alert' | 'confirm'\n\ntype MessageAlign = 'center' | 'left' | 'right'\n\nexport type DialogAction = 'cancel' | 'confirm' | 'overlay'\n\ninterface DialogCommon extends PopupPropsCommon {\n  style?: StyleProp<ViewStyle>\n\n  /**\n   * 标题\n   */\n  title?: ReactNode\n\n  /**\n   * 弹窗宽度\n   * @default 300\n   */\n  width?: DimensionValue\n\n  /**\n   * 文本内容，支持通过\\n换行\n   */\n  message?: ReactNode\n\n  /**\n   * 内容对齐方式，可选值为`'center' | 'left' | 'right'`\n   * @default 'center'\n   */\n  messageAlign?: MessageAlign\n\n  /**\n   * 是否展示确认按钮\n   * @default true\n   */\n  showConfirmButton?: boolean\n\n  /**\n   * 是否展示取消按钮\n   * @default false\n   */\n  showCancelButton?: boolean\n\n  /**\n   * 确认按钮文案\n   * @default '确认'\n   */\n  confirmButtonText?: string\n\n  /**\n   * 确认按钮颜色\n   */\n  confirmTextClassName?: ColorValue\n\n  /**\n   * 确认按钮文案 粗体\n   * @default true\n   */\n  confirmButtonTextBold?: boolean\n\n  /**\n   * 取消按钮文案\n   * @default '取消'\n   */\n  cancelButtonText?: string\n\n  /**\n   * 取消按钮颜色\n   */\n  cancelTextClassName?: ColorValue\n\n  /**\n   * 取消按钮文案 粗体\n   * @default false\n   */\n  cancelButtonTextBold?: boolean\n\n  /**\n   * 是否显示关闭按钮\n   * @default false\n   */\n  showClose?: boolean\n\n  /**\n   * 点击关闭按钮\n   */\n  onPressClose?: TouchableWithoutFeedbackProps['onPress']\n\n  /**\n   * 按钮翻转顺序\n   * @default false\n   */\n  buttonReverse?: boolean\n}\n\nexport interface DialogProps extends DialogCommon, PropsWithChildren<{}> {\n  /**\n   * 取消按钮加载中\n   * @default false\n   */\n  cancelButtonLoading?: boolean\n\n  /**\n   * 确定按钮加载中\n   * @default false\n   */\n  confirmButtonLoading?: boolean\n\n  /**\n   * 点击取消\n   */\n  onPressCancel?: () => void\n\n  /**\n   * 点击确定\n   */\n  onPressConfirm?: () => void\n}\n\n/** 对话框函数使用时的组件内部状态 */\nexport type DialogMethodState = {\n  visible: boolean\n  cancel: boolean\n  confirm: boolean\n  overlay: boolean\n}\n\n/** 对话框函数使用时的组件需要的属性 */\nexport interface DialogMethodProps\n  extends Omit<DialogCommon, 'visible' | 'onPressOverlay' | 'onPressClose'> {\n  /**\n   * 关闭前的回调函数，返回 false 可阻止关闭，支持返回 Promise\n   */\n  beforeClose?: (action: DialogAction) => boolean | Promise<boolean>\n\n  /**\n   * 操作完成后的回调\n   */\n  onResponse?: (action: DialogAction) => void\n}\n\nexport interface DialogOptions\n  extends Omit<DialogMethodProps, 'onResponse' | 'onRequestClose'> {}\n\nexport interface DialogKeyboardProps extends DialogProps {\n  safeAreaTop?: number\n}\n\nexport type DialogInputState = {\n  value: string | number\n} & DialogMethodState\n\nexport interface DialogInputProps\n  extends Omit<\n      DialogCommon,\n      'visible' | 'onPressOverlay' | 'messageAlign' | 'onPressClose'\n    >,\n    Pick<DialogKeyboardProps, 'safeAreaTop'> {\n  /**\n   * 关闭前的回调函数，返回 false 可阻止关闭，支持返回 Promise\n   */\n  beforeClose?: (\n    action: Exclude<DialogAction, 'overlay'>,\n    text: string,\n  ) => boolean | Promise<boolean>\n\n  /**\n   * 点击取消\n   */\n  onPressCancel?: (\n    text: string,\n    // eslint-disable-next-line @typescript-eslint/no-invalid-void-type\n  ) => boolean | Promise<boolean> | void | Promise<void>\n\n  /**\n   * 点击确定\n   */\n  onPressConfirm?: (\n    text: string,\n    // eslint-disable-next-line @typescript-eslint/no-invalid-void-type\n  ) => boolean | Promise<boolean> | void | Promise<void>\n\n  /**\n   * 默认值\n   */\n  defaultValue?: string\n\n  /**\n   * 提示文案\n   */\n  placeholder?: string\n\n  /**\n   * 输入框类型\n   * @default 'text'\n   */\n  type?: TextInputProps['type'] | NumberInputProps['type']\n\n  /**\n   * @default true\n   */\n  autoFocus?: boolean\n\n  /**\n   * 自定义 TextInput 属性\n   */\n  textInput?: Omit<\n    TextInputProps,\n    'defaultValue' | 'placeholder' | 'type' | 'autoFocus'\n  >\n\n  /**\n   * 自定义 NumberInput 属性\n   */\n  numberInput?: Omit<\n    NumberInputProps,\n    'defaultValue' | 'placeholder' | 'type' | 'autoFocus'\n  >\n}\n\nexport interface DialogInputOptions extends DialogInputProps {}\n",
      "type": "registry:component"
    }
  ]
}