{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "popup",
  "type": "registry:component",
  "title": "Example popup",
  "author": "@gabimoncha",
  "description": "Displays a button which is always red.",
  "registryDependencies": [
    "https://react-native-component-docs.vercel.app/r/portal.json",
    "https://react-native-component-docs.vercel.app/r/helpers.json",
    "https://react-native-component-docs.vercel.app/r/hooks.json",
    "https://react-native-component-docs.vercel.app/r/icons.json",
    "https://react-native-component-docs.vercel.app/r/overlay.json",
    "https://react-native-component-docs.vercel.app/r/navbar.json"
  ],
  "files": [
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/popup/helper.ts",
      "content": "import type { ViewStyle } from 'react-native'\nimport { Dimensions } from 'react-native'\n\nimport type { PopupPosition } from './types'\n\nconst isTopOrBottom = (position: PopupPosition) =>\n  position === 'top' || position === 'bottom'\n\nexport const getTransform = (\n  position: PopupPosition,\n  value: any,\n): ViewStyle => {\n  if (position === 'center') {\n    return {\n      opacity: value,\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0,\n      // transform: [\n      //   {\n      //     translateX: 0,\n      //   },\n      //   {\n      //     translateY: 0,\n      //   },\n      // ],\n    }\n  }\n\n  const isY = isTopOrBottom(position)\n\n  return {\n    transform: [\n      isY\n        ? {\n            translateY: value,\n          }\n        : {\n            translateX: value,\n          },\n    ],\n  }\n}\n\nexport const getPosition = (visible: boolean, position: PopupPosition) => {\n  if (position === 'center') {\n    return visible ? 1 : 0\n  }\n\n  if (visible) {\n    return 0\n  }\n\n  const screen = Dimensions.get('window')\n\n  const x = screen.width * (visible ? 0 : 1)\n  const y = screen.height * (visible ? 0 : 1)\n\n  switch (position) {\n    case 'top':\n      return -y\n\n    case 'bottom':\n      return y\n\n    case 'left':\n      return -x\n\n    case 'right':\n      return x\n\n    default:\n      return 0\n  }\n}\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/popup/index.tsx",
      "content": "import React, { memo } from 'react';\nimport Popup from './popup';\nimport PopupHeader from './popup-header';\nimport PopupPage from './popup-page';\nimport type { PopupPageProps, PopupProps } from './types';\nimport Portal from '../portal';\nimport { attachPropertiesToComponent } from '../../helpers';\nimport PopupKeyboardShim from './popup-keyboard-shim';\n\n/**\n * Popup 弹出层\n * @description 弹出层容器，用于展示弹窗、信息提示等内容，支持多个弹出层叠加展示。\n */\nconst PopupContainer: React.FC<PopupProps> = (props) => {\n  return (\n    <Portal>\n      <Popup {...props} />\n    </Portal>\n  );\n};\n\nconst PopupPageContainer: React.FC<PopupPageProps> = (props) => {\n  return (\n    <Portal>\n      <PopupPage {...props} />\n    </Portal>\n  );\n};\n\nexport default attachPropertiesToComponent(memo(PopupContainer), {\n  PopupComponent: Popup,\n  Page: PopupPageContainer,\n  Header: PopupHeader,\n  PageComponent: PopupPage,\n  KeyboardShim: PopupKeyboardShim,\n});\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/popup/popup-header.tsx",
      "content": "import React, { memo } from 'react';\nimport noop from 'lodash/noop';\nimport type { PopupHeaderProps } from './types';\nimport NavBar from '../navbar';\nimport { usePersistFn } from '../../hooks';\nimport { CrossOutline } from '../icons';\n\nconst PopupHeader: React.FC<PopupHeaderProps> = ({\n  showClose = true,\n  onClose,\n  rightExtra,\n  ...restProps\n}) => {\n  const onClosePersistFn = usePersistFn(onClose || noop);\n\n  const rightExtraJSX = (\n    <>\n      {rightExtra}\n      {showClose ? <CrossOutline onPress={onClosePersistFn} /> : null}\n    </>\n  );\n\n  return <NavBar {...restProps} rightExtra={rightExtraJSX} showBackArrow={false} divider={false} />;\n};\n\nexport default memo(PopupHeader);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/popup/popup-keyboard-shim.tsx",
      "content": "import React, { memo, useEffect, useRef } from 'react';\nimport { Animated, Keyboard, Platform, useWindowDimensions } from 'react-native';\nimport type { KeyboardEvent, KeyboardEventName, View } from 'react-native';\n\nimport type { PopupKeyboardShimProps } from './types';\n\nconst listenerEventType: { show: KeyboardEventName; hide: KeyboardEventName } = Platform.select({\n  ios: {\n    show: 'keyboardWillShow',\n    hide: 'keyboardWillHide',\n  },\n  android: {\n    show: 'keyboardDidShow',\n    hide: 'keyboardDidHide',\n  },\n  default: {\n    show: 'keyboardWillShow',\n    hide: 'keyboardWillHide',\n  },\n});\n\nconst PopupKeyboardShim: React.FC<PopupKeyboardShimProps> = ({\n  allowOnAndroid = false,\n  ...props\n}) => {\n  const KeyboardHeight = useRef(new Animated.Value(0));\n  const ViewHeight = useRef<View>(null);\n  const { height } = useWindowDimensions();\n\n  useEffect(() => {\n    if (\n      // iOS 软键盘出来覆盖内容区域\n      Platform.OS === 'ios' ||\n      // Android 根据自身应用配置不同，软键盘可能挤压内容区域，也可能覆盖内容区域\n      (allowOnAndroid && Platform.OS === 'android')\n    ) {\n      const keyboardDidShow = (e: KeyboardEvent) => {\n        // eslint-disable-next-line max-params\n        ViewHeight.current?.measure(\n          // eslint-disable-next-line max-params\n          (_x, _y, _width, _height, _pageX, pageY) => {\n            Animated.timing(KeyboardHeight.current, {\n              toValue: e.endCoordinates.height - (height - pageY - _height),\n              duration: 300,\n              useNativeDriver: false,\n            }).start();\n          }\n        );\n\n        Animated.timing(KeyboardHeight.current, {\n          toValue: e.endCoordinates.height,\n          duration: 300,\n          useNativeDriver: false,\n        }).start();\n      };\n      const keyboardDidHide = () => {\n        Animated.timing(KeyboardHeight.current, {\n          toValue: 0,\n          duration: 300,\n          useNativeDriver: false,\n        }).start();\n      };\n      const _keyboardDidShow = Keyboard.addListener(listenerEventType.show, keyboardDidShow);\n      const _keyboardDidHide = Keyboard.addListener(listenerEventType.hide, keyboardDidHide);\n\n      return () => {\n        // TODO 旧版本如何做兼容\n        // @ts-ignore\n        if (Keyboard.removeListener) {\n          // @ts-ignore\n          Keyboard.removeListener(listenerEventType.show, keyboardDidShow);\n          // @ts-ignore\n          Keyboard.removeListener(listenerEventType.hide, keyboardDidHide);\n        } else {\n          _keyboardDidShow.remove?.();\n          _keyboardDidHide.remove?.();\n        }\n      };\n    }\n  }, [height, allowOnAndroid]);\n\n  return (\n    <Animated.View\n      {...props}\n      ref={ViewHeight}\n      style={[{ height: KeyboardHeight.current }, props.style]}\n    />\n  );\n};\n\nexport default memo(PopupKeyboardShim);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/popup/popup-page.tsx",
      "content": "import React, { memo } from 'react';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport Popup from './popup';\nimport { PopupPageProps } from './types';\nimport { getDefaultValue } from '../../helpers';\n\nconst PopupPage: React.FC<PopupPageProps> = ({ safeAreaInsetTop, style, ...restProps }) => {\n  const insets = useSafeAreaInsets();\n\n  const _safeAreaInsetTop = getDefaultValue(safeAreaInsetTop, insets.top);\n\n  return <Popup {...restProps} style={[{ top: _safeAreaInsetTop }, style]} position='bottom' />;\n};\n\nexport default memo(PopupPage);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/popup/popup.tsx",
      "content": "import React, { memo, useCallback, useEffect, useRef, useState } from 'react';\nimport { cva } from 'class-variance-authority';\nimport noop from 'lodash/noop';\nimport { Animated, BackHandler, Easing, StyleProp, ViewStyle } from 'react-native';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport { getPosition, getTransform } from './helper';\nimport { PopupProps, State } from './types';\nimport { cn } from '../../lib/utils';\nimport { usePersistFn } from '../../hooks';\nimport * as helpers from '../../helpers';\nimport Overlay from '../overlay';\n\nconst popupPositionVariants = cva('absolute h-auto', {\n  variants: {\n    position: {\n      center: 'inset-0 size-full items-center justify-center bg-transparent opacity-100',\n      left: 'inset-y-0 left-0 w-1/2',\n      right: 'inset-y-0 right-0 w-1/2',\n      top: 'inset-x-0 top-0',\n      bottom: 'inset-x-0 bottom-0',\n    },\n  },\n  defaultVariants: {\n    position: 'center',\n  },\n});\n\n/**\n * Popup 弹出层\n * @description 弹出层容器，用于展示弹窗、信息提示等内容，支持多个弹出层叠加展示。\n */\nconst Popup: React.FC<PopupProps> = ({\n  children,\n  style,\n  className,\n  visible = false,\n  overlay = true,\n  duration,\n  closeOnPressOverlay = true,\n  position = 'center',\n  round = false,\n  safeAreaInsetBottom = false,\n  safeAreaInsetTop = false,\n  lazyRender = true,\n  destroyOnClosed = false,\n  onPressOverlay: onPressOverlayFn,\n  onOpen: onOpenFn,\n  onOpened: onOpenedFn,\n  onClose: onCloseFn,\n  onClosed: onClosedFn,\n  onRequestClose,\n  overlayClassName,\n}) => {\n  const insets = useSafeAreaInsets();\n  const onPressOverlayPersistFn = usePersistFn(onPressOverlayFn || noop);\n  const onOpenPersistFn = usePersistFn(onOpenFn || noop);\n  const onOpenedPersistFn = usePersistFn(onOpenedFn || noop);\n  const onClosePersistFn = usePersistFn(onCloseFn || noop);\n  const onClosedPersistFn = usePersistFn(onClosedFn || noop);\n\n  duration = helpers.getDefaultValue(duration, 300);\n\n  const [state, setState] = useState<State>({\n    visible,\n    // 遮罩层显示、隐藏单独管理，避免弹出层完成后才触发关闭，两个组件应该同时变化\n    overlayVisible: visible,\n    zIndex: helpers.getNextZIndex(),\n    lazyRender,\n  });\n\n  const MountedRef = useRef(false);\n\n  const fadeAnim = useRef(new Animated.Value(getPosition(visible, position))).current;\n  const fadeInstance = useRef<Animated.CompositeAnimation | null>(null);\n\n  duration = helpers.getDefaultValue(duration, 300);\n\n  // 监听状态变化，执行动画\n  useEffect(() => {\n    if (visible) {\n      // 弹出弹出，立即响应\n      setState({\n        visible,\n        zIndex: helpers.getNextZIndex(),\n        lazyRender: false,\n      });\n    }\n\n    // 遮罩层状态实时显示\n    setState({\n      overlayVisible: visible,\n    });\n\n    if (MountedRef.current) {\n      fadeAnim.setValue(getPosition(!visible, position));\n\n      if (visible) {\n        onOpenPersistFn();\n      } else {\n        onClosePersistFn();\n      }\n\n      console.log('getPosition(visible, position)', getPosition(visible, position));\n\n      fadeInstance.current = Animated.timing(\n        fadeAnim, // 动画中的变量值\n        {\n          toValue: getPosition(visible, position),\n          duration,\n          useNativeDriver: true,\n          easing: visible\n            ? Easing.bezier(0.075, 0.82, 0.165, 1.0)\n            : Easing.bezier(0.075, 0.82, 0.165, 1.0),\n        }\n      );\n\n      fadeInstance.current.start(({ finished }) => {\n        if (finished) {\n          fadeInstance.current = null;\n\n          if (!visible) {\n            setState({ visible, lazyRender: destroyOnClosed });\n            onClosedPersistFn();\n          } else {\n            onOpenedPersistFn();\n          }\n        }\n      });\n    }\n\n    return () => {\n      // 停止动画\n      if (fadeInstance.current) {\n        fadeInstance.current.stop();\n        fadeInstance.current = null;\n      }\n    };\n  }, [\n    destroyOnClosed,\n    duration,\n    fadeAnim,\n    position,\n    onClosedPersistFn,\n    onClosePersistFn,\n    onOpenedPersistFn,\n    onOpenPersistFn,\n    visible,\n  ]);\n\n  /** 点击遮罩层 */\n  const onPressOverlay = useCallback(() => {\n    if (closeOnPressOverlay) {\n      // 关闭弹层\n      onPressOverlayPersistFn();\n    }\n  }, [closeOnPressOverlay, onPressOverlayPersistFn]);\n\n  // 初始化好组件\n  useEffect(() => {\n    MountedRef.current = true;\n  }, []);\n\n  // Android 返回按钮\n  useEffect(() => {\n    const backHandler = BackHandler.addEventListener('hardwareBackPress', () => {\n      if (typeof onRequestClose === 'function' && visible) {\n        return onRequestClose();\n      }\n\n      return false;\n    });\n\n    return () => backHandler.remove();\n  }, [onRequestClose, visible]);\n\n  if (state.lazyRender) {\n    return null;\n  }\n\n  const popupStyles: StyleProp<ViewStyle> = [\n    {\n      paddingBottom: visible && safeAreaInsetBottom ? insets.bottom : 0,\n      paddingTop: visible && safeAreaInsetTop ? insets.top : 0,\n    },\n    style,\n    getTransform(position, fadeAnim),\n  ];\n\n  return (\n    <>\n      {overlay ? (\n        <Overlay\n          overlayClassName={overlayClassName}\n          visible={state.overlayVisible}\n          duration={duration}\n          onPress={onPressOverlay}\n        />\n      ) : null}\n\n      <Animated.View\n        style={popupStyles}\n        className={cn(\n          'relative h-0 overflow-hidden bg-white z-10',\n          popupPositionVariants({ position }),\n          {\n            'rounded-tl-2xl': (position === 'bottom' && round) || (position === 'right' && round),\n            'rounded-tr-2xl': (position === 'bottom' && round) || (position === 'left' && round),\n            'rounded-bl-2xl': (position === 'top' && round) || (position === 'right' && round),\n            'rounded-br-2xl': (position === 'top' && round) || (position === 'left' && round),\n          },\n          className\n        )}\n        pointerEvents={position !== 'center' ? undefined : 'box-none'}\n      >\n        {children}\n      </Animated.View>\n    </>\n  );\n};\n\nexport default memo(Popup);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/popup/types.ts",
      "content": "// import type React from 'react'\nimport type { PropsWithChildren } from 'react';\nimport type { StyleProp, ViewProps, ViewStyle } from 'react-native';\nimport { NavBarProps } from '../navbar/interface';\n\nexport type PopupPosition = 'top' | 'bottom' | 'right' | 'left' | 'center';\n\ntype PopupPropsCommonCallback = () => void;\n\n/** popup 通用的 props */\nexport interface PopupPropsCommon {\n  /**\n   * 是否显示\n   * @default false\n   */\n  visible: boolean;\n\n  /**\n   * 动画时长，单位毫秒\n   * @default animation_duration_base\n   */\n  duration?: number;\n\n  /**\n   * 是否显示遮罩层\n   * @default true\n   */\n  overlay?: boolean;\n\n  /**\n   * 受控组件：用于阻止 overlay onPress 事件；函数调用：可以用来阻碍弹出层消失\n   * @default true\n   */\n  closeOnPressOverlay?: boolean;\n\n  /**\n   * 点击遮罩层时触发\n   */\n  onPressOverlay?: PopupPropsCommonCallback;\n\n  /**\n   * 打开弹出层时触发\n   */\n  onOpen?: PopupPropsCommonCallback;\n\n  /**\n   * 打开弹出层且动画结束后触发\n   */\n  onOpened?: PopupPropsCommonCallback;\n\n  /**\n   * 关闭弹出层时触发\n   */\n  onClose?: PopupPropsCommonCallback;\n\n  /**\n   * 关闭弹出层且动画结束后触发\n   */\n  onClosed?: PopupPropsCommonCallback;\n\n  /**\n   * 当点击返回按钮时触发\n   * @support Android\n   */\n  onRequestClose?: () => boolean;\n\n  /**\n   * Used to locate this view in end-to-end tests.\n   */\n  testID?: string | undefined;\n\n  overlayClassName?: string\n}\n\nexport interface PopupProps extends PopupPropsCommon, PropsWithChildren<{}> {\n  /**\n   * 最外层样式\n   */\n  style?: StyleProp<ViewStyle>;\n  className?: string;\n\n  /**\n   * 弹出位置，可选值为 `'top' | 'bottom' | 'right' | 'left' | 'center'`\n   * @default 'center'\n   */\n  position?: PopupPosition;\n\n  /**\n   * 是否显示圆角\n   * @default false\n   */\n  round?: boolean;\n\n  /**\n   * 是否开启底部安全区适配\n   * @default false\n   */\n  safeAreaInsetBottom?: boolean;\n\n  /**\n   * 是否开启顶部安全区适配\n   * @default false\n   */\n  safeAreaInsetTop?: boolean;\n\n  /**\n   * 是否在显示弹层时才渲染节点\n   * @default true\n   */\n  lazyRender?: boolean;\n\n  /**\n   * 关闭时销毁 Popup，回退到 lazyRender 的状态\n   * @default false\n   */\n  destroyOnClosed?: boolean;\n}\n\nexport interface PopupPageProps extends Omit<PopupProps, 'position' | 'safeAreaInsetTop'> {\n  /**\n   * 顶部安全高度\n   * @default safeAreaInsets.top\n   */\n  safeAreaInsetTop?: number;\n}\n\nexport type State = {\n  visible?: boolean;\n  overlayVisible?: boolean;\n  zIndex?: number;\n  lazyRender?: boolean;\n};\n\nexport interface PopupHeaderProps\n  extends Omit<\n    NavBarProps,\n    'showBackArrow' | 'backArrowColor' | 'backArrowSize' | 'onPressBackArrow' | 'border' | 'theme'\n  > {\n  /**\n   * 点击关闭\n   */\n  onClose?: () => void;\n\n  /**\n   * 是否显示关闭按钮\n   * @default true\n   */\n  showClose?: boolean;\n}\n\nexport interface PopupKeyboardShimProps extends ViewProps {\n  /**\n   * 是否在 Android 设备中生效\n   * @default false\n   * @description 在 Android 端开启 android:windowSoftInputMode=\"adjustResize\"，软键盘出现，App 可视区域会自动收缩。\n   */\n  allowOnAndroid?: boolean\n}\n",
      "type": "registry:component"
    }
  ]
}