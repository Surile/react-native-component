{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "popup",
  "type": "registry:component",
  "title": "Example popup",
  "author": "@gabimoncha",
  "description": "Displays a button which is always red.",
  "files": [
    {
      "path": "./node_modules/@rnr/example-library/src/components/popup/popup.tsx",
      "content": "import React, { memo, useCallback, useEffect, useRef, useState } from 'react';\nimport { cva } from 'class-variance-authority';\nimport noop from 'lodash/noop';\nimport { Animated, BackHandler, Easing, StyleProp, ViewStyle } from 'react-native';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport { getPosition, getTransform } from './helper';\nimport { PopupProps, State } from './types';\nimport { cn } from '../../lib/utils';\nimport { usePersistFn } from '../../hooks';\nimport * as helpers from '../../helpers';\nimport Overlay from '../overlay';\n\nconst popupPositionVariants = cva('absolute h-auto', {\n  variants: {\n    position: {\n      center: 'inset-0 size-full items-center justify-center bg-transparent opacity-100',\n      left: 'inset-y-0 left-0 w-1/2',\n      right: 'inset-y-0 right-0 w-1/2',\n      top: 'inset-x-0 top-0',\n      bottom: 'inset-x-0 bottom-0',\n    },\n  },\n  defaultVariants: {\n    position: 'center',\n  },\n});\n\n/**\n * Popup 弹出层\n * @description 弹出层容器，用于展示弹窗、信息提示等内容，支持多个弹出层叠加展示。\n */\nconst Popup: React.FC<PopupProps> = ({\n  children,\n  style,\n  className,\n  visible = false,\n  overlay = true,\n  duration,\n  closeOnPressOverlay = true,\n  position = 'center',\n  round = false,\n  safeAreaInsetBottom = false,\n  safeAreaInsetTop = false,\n  lazyRender = true,\n  destroyOnClosed = false,\n  onPressOverlay: onPressOverlayFn,\n  onOpen: onOpenFn,\n  onOpened: onOpenedFn,\n  onClose: onCloseFn,\n  onClosed: onClosedFn,\n  onRequestClose,\n  overlayClassName,\n}) => {\n  const insets = useSafeAreaInsets();\n  const onPressOverlayPersistFn = usePersistFn(onPressOverlayFn || noop);\n  const onOpenPersistFn = usePersistFn(onOpenFn || noop);\n  const onOpenedPersistFn = usePersistFn(onOpenedFn || noop);\n  const onClosePersistFn = usePersistFn(onCloseFn || noop);\n  const onClosedPersistFn = usePersistFn(onClosedFn || noop);\n\n  duration = helpers.getDefaultValue(duration, 300);\n\n  const [state, setState] = useState<State>({\n    visible,\n    // 遮罩层显示、隐藏单独管理，避免弹出层完成后才触发关闭，两个组件应该同时变化\n    overlayVisible: visible,\n    zIndex: helpers.getNextZIndex(),\n    lazyRender,\n  });\n\n  const MountedRef = useRef(false);\n\n  const fadeAnim = useRef(new Animated.Value(getPosition(visible, position))).current;\n  const fadeInstance = useRef<Animated.CompositeAnimation | null>(null);\n\n  duration = helpers.getDefaultValue(duration, 300);\n\n  // 监听状态变化，执行动画\n  useEffect(() => {\n    if (visible) {\n      // 弹出弹出，立即响应\n      setState({\n        visible,\n        zIndex: helpers.getNextZIndex(),\n        lazyRender: false,\n      });\n    }\n\n    // 遮罩层状态实时显示\n    setState({\n      overlayVisible: visible,\n    });\n\n    if (MountedRef.current) {\n      fadeAnim.setValue(getPosition(!visible, position));\n\n      if (visible) {\n        onOpenPersistFn();\n      } else {\n        onClosePersistFn();\n      }\n\n      console.log('getPosition(visible, position)', getPosition(visible, position));\n\n      fadeInstance.current = Animated.timing(\n        fadeAnim, // 动画中的变量值\n        {\n          toValue: getPosition(visible, position),\n          duration,\n          useNativeDriver: true,\n          easing: visible\n            ? Easing.bezier(0.075, 0.82, 0.165, 1.0)\n            : Easing.bezier(0.075, 0.82, 0.165, 1.0),\n        }\n      );\n\n      fadeInstance.current.start(({ finished }) => {\n        if (finished) {\n          fadeInstance.current = null;\n\n          if (!visible) {\n            setState({ visible, lazyRender: destroyOnClosed });\n            onClosedPersistFn();\n          } else {\n            onOpenedPersistFn();\n          }\n        }\n      });\n    }\n\n    return () => {\n      // 停止动画\n      if (fadeInstance.current) {\n        fadeInstance.current.stop();\n        fadeInstance.current = null;\n      }\n    };\n  }, [\n    destroyOnClosed,\n    duration,\n    fadeAnim,\n    position,\n    onClosedPersistFn,\n    onClosePersistFn,\n    onOpenedPersistFn,\n    onOpenPersistFn,\n    visible,\n  ]);\n\n  /** 点击遮罩层 */\n  const onPressOverlay = useCallback(() => {\n    if (closeOnPressOverlay) {\n      // 关闭弹层\n      onPressOverlayPersistFn();\n    }\n  }, [closeOnPressOverlay, onPressOverlayPersistFn]);\n\n  // 初始化好组件\n  useEffect(() => {\n    MountedRef.current = true;\n  }, []);\n\n  // Android 返回按钮\n  useEffect(() => {\n    const backHandler = BackHandler.addEventListener('hardwareBackPress', () => {\n      if (typeof onRequestClose === 'function' && visible) {\n        return onRequestClose();\n      }\n\n      return false;\n    });\n\n    return () => backHandler.remove();\n  }, [onRequestClose, visible]);\n\n  if (state.lazyRender) {\n    return null;\n  }\n\n  const popupStyles: StyleProp<ViewStyle> = [\n    {\n      paddingBottom: visible && safeAreaInsetBottom ? insets.bottom : 0,\n      paddingTop: visible && safeAreaInsetTop ? insets.top : 0,\n    },\n    style,\n    getTransform(position, fadeAnim),\n  ];\n\n  return (\n    <>\n      {overlay ? (\n        <Overlay\n          overlayClassName={overlayClassName}\n          visible={state.overlayVisible}\n          duration={duration}\n          onPress={onPressOverlay}\n        />\n      ) : null}\n\n      <Animated.View\n        style={popupStyles}\n        className={cn(\n          'relative h-0 overflow-hidden bg-white z-10',\n          popupPositionVariants({ position }),\n          {\n            'rounded-tl-2xl': (position === 'bottom' && round) || (position === 'right' && round),\n            'rounded-tr-2xl': (position === 'bottom' && round) || (position === 'left' && round),\n            'rounded-bl-2xl': (position === 'top' && round) || (position === 'right' && round),\n            'rounded-br-2xl': (position === 'top' && round) || (position === 'left' && round),\n          },\n          className\n        )}\n        pointerEvents={position !== 'center' ? undefined : 'box-none'}\n      >\n        {children}\n      </Animated.View>\n    </>\n  );\n};\n\nexport default memo(Popup);\n",
      "type": "registry:component"
    }
  ]
}