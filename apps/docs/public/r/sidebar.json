{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "sidebar",
  "type": "registry:component",
  "title": "Example sidebar",
  "author": "@gabimoncha",
  "description": "Displays a button which is always red.",
  "files": [
    {
      "path": "./node_modules/@rnr/example-library/src/components/sidebar/sidebar.tsx",
      "content": "import React, { memo } from 'react';\nimport isNil from 'lodash/isNil';\nimport isUndefined from 'lodash/isUndefined';\nimport { ScrollView, Text, TouchableHighlight, View } from 'react-native';\nimport type { SidebarProps } from './interface';\nimport { useControllableValue } from '../../hooks';\nimport { cn } from '../../lib/utils';\nimport Badge from '../badge';\nimport Loading from '../loading';\nimport Result from '../result';\nimport ResultIconEmpty from '../result/icons/result-icon-empty';\n\nconst Sidebar: React.FC<SidebarProps> = ({\n  className,\n  loading,\n  options,\n  empty,\n  renderItem,\n  itemClassName,\n  activeItemClassName,\n  showIndicator = true,\n  underlayColor = '#EDEFF2',\n  ...restProps\n}) => {\n  const [value, onChange] = useControllableValue(restProps, {\n    valuePropName: 'activeValue',\n    defaultValuePropName: 'defaultActiveValue',\n  });\n\n  const isEmpty = loading || options.length === 0;\n  const curIndex = options.findIndex((o) => o.value === value);\n\n  return (\n    <View\n      {...restProps}\n      className={cn(\n        'flex-1 w-[88px]',\n        {\n          'bg-[#EDEFF2]': isEmpty,\n        },\n        className\n      )}\n    >\n      <ScrollView\n        bounces={false}\n        contentContainerClassName={cn(isEmpty ? 'flex-1 items-center justify-center' : '')}\n      >\n        {loading ? <Loading vertical>加载中...</Loading> : null}\n\n        {!loading && options.length === 0 ? (\n          isUndefined(empty) ? (\n            <Result\n              status='warning'\n              subtitle='暂无数据'\n              renderIcon={() => {\n                return <ResultIconEmpty width={60} height={60} />;\n              }}\n            />\n          ) : (\n            empty\n          )\n        ) : null}\n\n        {!loading && options.length > 0 ? (\n          <View className={cn('bg-white', itemClassName)}>\n            {options.map((item, index) => {\n              const isActive = value === item.value;\n              const isPrev = index + 1 === curIndex;\n              const isNext = index - 1 === curIndex;\n              const textJSX = renderItem ? (\n                renderItem(item, isActive)\n              ) : (\n                <Text\n                  className={cn('text-[14px] leading-[20px]', {\n                    'text-[#11151A]': isActive,\n                    'text-[#5A6068]': !isActive,\n                    'text-[#B9BEC5]': item.disabled,\n                  })}\n                >\n                  {item.label}\n                </Text>\n              );\n\n              return (\n                <TouchableHighlight\n                  key={item.value}\n                  underlayColor={underlayColor}\n                  onPress={() => {\n                    onChange(item.value);\n                  }}\n                  disabled={item.disabled}\n                  className={cn(\n                    'overflow-hidden flex-row ',\n                    {\n                      'bg-[#EDEFF2]': isActive,\n                      'rounded-br-lg': isPrev,\n                      'rounded-tr-lg': isNext,\n                    },\n                    isActive && activeItemClassName ? activeItemClassName : ''\n                  )}\n                >\n                  <View className='flex-1'>\n                    {showIndicator && isActive ? (\n                      <View className='absolute left-[-3px] top-1/2 mt-[-13px] h-6.5 w-1.5 rounded bg-primary' />\n                    ) : null}\n\n                    <View className='p-3'>\n                      {!isNil(item.badge) ? <Badge {...item.badge}>{textJSX}</Badge> : textJSX}\n                    </View>\n                  </View>\n                </TouchableHighlight>\n              );\n            })}\n          </View>\n        ) : null}\n      </ScrollView>\n    </View>\n  );\n};\n\nexport default memo(Sidebar);\n",
      "type": "registry:component"
    }
  ]
}