{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "notify",
  "type": "registry:component",
  "title": "Example notify",
  "author": "@gabimoncha",
  "description": "Displays a button which is always red.",
  "registryDependencies": [
    "https://react-native-component-docs.vercel.app/r/portal.json",
    "https://react-native-component-docs.vercel.app/r/helpers.json",
    "https://react-native-component-docs.vercel.app/r/popup.json"
  ],
  "files": [
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/notify/index.ts",
      "content": "import { attachPropertiesToComponent } from '../../helpers'\nimport { Instance, Component, NotifyComponent } from './notify-instance'\n\nexport default attachPropertiesToComponent(Instance, {\n  Component,\n  NotifyComponent,\n})\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/notify/notify-method.tsx",
      "content": "import React, {\n  useState,\n  useEffect,\n  useImperativeHandle,\n  forwardRef,\n  memo,\n} from 'react'\n\nimport type { NotifyMethodProps, NotifyMethods } from './interface'\nimport Notify from './notify'\n\n/**\n * Notify 消息提示\n * @description 在页面顶部展示消息提示，支持函数调用和组件调用两种方式。\n */\nconst NotifyMethod = forwardRef<NotifyMethods, NotifyMethodProps>(\n  ({ duration = 3000, message, ...restProps }, ref) => {\n    const [visible, setVisible] = useState(false)\n    const [msg, setMsg] = useState(message)\n\n    useEffect(() => {\n      setVisible(true)\n\n      let timer: ReturnType<typeof setTimeout>\n\n      if (duration !== 0) {\n        timer = setTimeout(() => {\n          // 隐藏弹窗\n          setVisible(false)\n        }, duration)\n      }\n\n      return () => {\n        clearTimeout(timer)\n      }\n    }, [duration])\n\n    // 向外暴露函数\n    useImperativeHandle(\n      ref,\n      () => ({\n        close: () => {\n          setVisible(false)\n        },\n        setMessage: s => {\n          setMsg(s)\n        },\n      }),\n      [],\n    )\n\n    return <Notify {...restProps} visible={visible} message={msg} />\n  },\n)\n\nexport default memo(NotifyMethod)\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/notify/notify-instance.tsx",
      "content": "import React, { createRef } from 'react'\n\nimport Portal from '../portal'\n\nimport type {\n  NotifyProps,\n  NotifyMethodProps,\n  NotifyMethods,\n  NotifyOptions,\n} from './interface'\nimport Notify from './notify'\nimport NotifyMethod from './notify-method'\n\nexport const Instance = (options: NotifyMethodProps | string) => {\n  const opts: NotifyOptions =\n    typeof options === 'string' ? { message: options } : options\n  const NotifyRef = createRef<NotifyMethods>()\n  const key = Portal.add(\n    <NotifyMethod\n      {...opts}\n      ref={NotifyRef}\n      onClosed={() => {\n        Portal.remove(key)\n        opts.onClosed?.()\n      }}\n    />,\n  )\n\n  return {\n    close: () => {\n      NotifyRef.current?.close()\n    },\n    setMessage: (m: React.ReactNode) => {\n      NotifyRef.current?.setMessage(m)\n    },\n  }\n}\n\nexport const Component: React.FC<NotifyProps> = props => (\n  <Portal>\n    <Notify {...props} />\n  </Portal>\n)\n\nexport const NotifyComponent = Notify\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/notify/notify.tsx",
      "content": "import isNil from 'lodash/isNil';\nimport React, { isValidElement, memo } from 'react';\nimport { View, Text, TouchableWithoutFeedback } from 'react-native';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\nimport Popup from '../popup/popup';\n\nimport type { NotifyProps } from './interface';\nimport { cn } from '../../lib/utils';\nimport { cva } from 'class-variance-authority';\n\nconst notifyTypeVar = cva('', {\n  variants: {\n    type: {\n      primary: 'bg-primary-5',\n      success: 'bg-success-5',\n      error: 'bg-danger-5',\n      warning: 'bg-warning-5',\n    },\n  },\n  defaultVariants: {\n    type: 'primary',\n  },\n});\n\n/**\n * Notify 消息提示\n * @description 在页面顶部展示消息提示，支持函数调用和组件调用两种方式。\n * @description 原计划 Notify 的 Props 继承 TouchableWithoutFeedbackProps，更贴近 React Native 提供的组件，这里需要把 Popup 中通用的属性提取出来，如果以后涉及到改动，有点麻烦，等大部分组件完整后看看怎么优化。\n */\nconst Notify: React.FC<React.PropsWithChildren<NotifyProps>> = ({\n  children,\n  theme,\n  style,\n  textClassName,\n  type = 'primary',\n  message,\n  color,\n  backgroundColor,\n  onPress,\n  ...restProps\n}) => {\n  const insets = useSafeAreaInsets();\n\n  const messageJSX = !isNil(message) ? (\n    isValidElement(message) ? (\n      message\n    ) : (\n      <Text\n        className={cn('text-xl', textClassName)}\n        style={{\n          color: !isNil(color) ? color : 'white',\n        }}\n        numberOfLines={1}\n      >\n        {message}\n      </Text>\n    )\n  ) : (\n    children\n  );\n\n  return (\n    <Popup {...restProps} overlay={false} position='top'>\n      <TouchableWithoutFeedback onPress={onPress}>\n        <View\n          className={cn('items-center justify-center px-4 py-2', notifyTypeVar({ type }))}\n          style={[\n            {\n              paddingTop: insets.top > 8 ? insets.top : 8,\n            },\n            !isNil(backgroundColor) && {\n              backgroundColor,\n            },\n            style,\n          ]}\n        >\n          {messageJSX}\n        </View>\n      </TouchableWithoutFeedback>\n    </Popup>\n  );\n};\n\nexport default memo(Notify);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/notify/interface.ts",
      "content": "import type React from 'react'\nimport type {\n  ViewStyle,\n  TextStyle,\n  StyleProp,\n  ColorValue,\n  TouchableWithoutFeedbackProps,\n} from 'react-native'\n\nimport type { PopupPropsCommon } from '../popup/types'\n\nimport type { NotifyTheme } from './style'\n\nexport type NotifyType = 'primary' | 'success' | 'error' | 'warning'\n\nexport type NotifyMethods = {\n  close: () => void\n  setMessage: (s: React.ReactNode) => void\n}\n\nexport interface NotifyProps\n  extends Omit<\n    PopupPropsCommon,\n    'overlay' | 'closeOnClickOverlay' | 'onPressOverlay' | 'duration'\n  > {\n  theme?: Partial<NotifyTheme>\n  /**\n   * 最外层样式\n   */\n  style?: StyleProp<ViewStyle>\n\n  /**\n   * 文字样式\n   */\n  textClassName?: string\n\n  /**\n   * 类型，可选值为 `'primary' | 'success' | 'error' | 'warning'`\n   *\n   * @default 'primary'\n   */\n  type?: NotifyType\n\n  /**\n   * 展示文案\n   */\n  message?: React.ReactNode\n\n  /**\n   * 字体颜色\n   */\n  color?: ColorValue\n\n  /**\n   * 背景颜色\n   */\n  backgroundColor?: ColorValue\n\n  /**\n   * 点击时的回调函数\n   */\n  onPress?: TouchableWithoutFeedbackProps['onPress']\n}\n\nexport interface NotifyOptions extends Omit<NotifyProps, 'visible'> {\n  /**\n   * 展示时长(ms)，值为 0 时，notify 不会消失\n   * @default 3000\n   */\n  duration?: number\n}\n\nexport interface NotifyMethodProps extends NotifyOptions {}\n",
      "type": "registry:component"
    }
  ]
}