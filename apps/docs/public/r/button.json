{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "button",
  "type": "registry:component",
  "title": "Example button",
  "author": "@gabimoncha",
  "description": "Displays a button which is always red.",
  "registryDependencies": [
    "http://localhost:3000/r/flex.json",
    "http://localhost:3000/r/helpers.json",
    "http://localhost:3000/r/space.json",
    "http://localhost:3000/r/hooks.json"
  ],
  "files": [
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/button/button-option-group.tsx",
      "content": "import omit from 'lodash/omit';\nimport { ScrollView } from 'react-native';\n\nimport Space from '../space';\n\nimport ButtonOption from './button-option';\nimport type { ButtonOptionGroupProps } from './interface';\nimport { useControllableValue } from '../../hooks';\n\nfunction ButtonOptionGroup<T = any>({\n  theme,\n  activeHighlight = true,\n  type = 'hazy',\n  round = false,\n  editable = true,\n  scrollable = false,\n  deselect = true,\n  options,\n  multiple,\n  ...restProps\n}: ButtonOptionGroupProps<T>) {\n  const [value, onChange] = useControllableValue<T | T[] | null>(restProps, {\n    defaultValue: multiple ? [] : undefined,\n  });\n\n  const contentJSX = (\n    <Space {...omit(restProps, ['value', 'defaultValue', 'onChange'])} direction='horizontal'>\n      {options.map((item) => {\n        const selected = multiple\n          ? ((value as T[]) || []).indexOf(item.value) > -1\n          : value === item.value;\n\n        return (\n          <ButtonOption\n            key={`${item.value}`}\n            type={type}\n            round={round}\n            text={item.label}\n            badge={item.badge}\n            disabled={item.disabled}\n            activeHighlight={activeHighlight}\n            active={selected}\n            onPress={() => {\n              if (!editable) {\n                return;\n              }\n\n              if (multiple) {\n                const oldValue = (value as T[]) || [];\n                const _value = oldValue.filter((v) => v !== item.value);\n                const newValue =\n                  _value.length === oldValue.length ? [item.value, ...oldValue] : _value;\n                const newOptions = newValue.map((v) => {\n                  const optionIndex = options.findIndex((o) => o.value === v);\n\n                  return {\n                    ...options[optionIndex],\n                  };\n                });\n\n                onChange(newValue, newOptions);\n              } else {\n                if (item.value === value) {\n                  if (deselect) {\n                    onChange(null, []);\n                  }\n                } else {\n                  onChange(\n                    item.value,\n                    options.filter((o) => o.value === item.value)\n                  );\n                }\n              }\n            }}\n          />\n        );\n      })}\n    </Space>\n  );\n\n  if (scrollable && !restProps.wrap) {\n    return (\n      <ScrollView horizontal bouncesZoom={false} showsHorizontalScrollIndicator={false}>\n        {contentJSX}\n      </ScrollView>\n    );\n  }\n\n  return contentJSX;\n}\n\nexport default ButtonOptionGroup;\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/button/button-option.tsx",
      "content": "import { cva } from 'class-variance-authority';\nimport isNil from 'lodash/isNil';\nimport React, { isValidElement, memo } from 'react';\nimport { View, TouchableOpacity, Text } from 'react-native';\nimport { ButtonOptionProps } from './interface';\nimport { cn } from '../../lib/utils';\n\nconst buttonVariants = cva('items-center justify-center', {\n  variants: {\n    type: {\n      hazy: 'bg-gray-100 border border-gray-100',\n      outline: 'bg-white border border-primary-5',\n      white: 'bg-white border border-white',\n    },\n    size: {\n      xs: 'h-6 px-2 text-xs',\n      s: 'h-8 px-3 text-sm',\n      m: 'h-10 px-4 text-base',\n      l: 'h-12 px-5 text-lg',\n      xl: 'h-14 px-6 text-xl',\n    },\n    round: {\n      true: 'rounded-full',\n      false: 'rounded',\n    },\n    active: {\n      true: 'bg-primary-1 border-primary-1',\n    },\n    disabled: {\n      true: 'opacity-50',\n    },\n  },\n  defaultVariants: {\n    type: 'hazy',\n    size: 's',\n    round: false,\n    active: false,\n    disabled: false,\n  },\n});\n\nconst textVariants = cva('', {\n  variants: {\n    disabled: {\n      true: 'text-gray-300',\n      false: 'text-gray-800',\n    },\n    active: {\n      true: 'text-primary-5',\n    },\n  },\n  defaultVariants: {\n    disabled: false,\n    active: false,\n  },\n});\n\nconst ButtonOption: React.FC<ButtonOptionProps> = ({\n  active,\n  activeHighlight = true,\n  badge,\n  type = 'hazy',\n  text,\n  size = 's',\n  round = false,\n  className,\n  children,\n  disabled,\n  ...restProps\n}) => {\n  const childrenJSX = isValidElement(children) ? (\n    children\n  ) : !isNil(children) ? (\n    <Text\n      className={textVariants({\n        disabled,\n        active: active && activeHighlight,\n      })}\n    >\n      {children}\n    </Text>\n  ) : (\n    <Text\n      className={textVariants({\n        disabled,\n        active: active && activeHighlight,\n      })}\n    >\n      {text}\n    </Text>\n  );\n\n  const badgeJSX = !isNil(badge) ? (\n    <View className='absolute -top-1 -right-1 min-w-4 h-4 px-1 bg-red-500 rounded-full'>\n      <Text className='text-xs text-white text-center'>{badge}</Text>\n    </View>\n  ) : null;\n\n  return (\n    <TouchableOpacity\n      accessibilityRole='button'\n      {...restProps}\n      disabled={disabled}\n      activeOpacity={0.7}\n      className={cn(\n        buttonVariants({\n          type,\n          size,\n          round,\n          active: active && activeHighlight,\n          disabled,\n        }),\n        className\n      )}\n    >\n      {childrenJSX}\n      {badgeJSX}\n    </TouchableOpacity>\n  );\n};\n\nexport default memo(ButtonOption);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/button/button.tsx",
      "content": "import isNil from 'lodash/isNil';\nimport isUndefined from 'lodash/isUndefined';\nimport noop from 'lodash/noop';\nimport React, { memo } from 'react';\nimport { Text, TouchableOpacity } from 'react-native';\n\nimport Flex from '../flex';\nimport Loading from '../loading';\nimport type { ButtonProps } from './interface';\nimport { useDebounceFn } from '../../hooks';\nimport { cn } from '../../lib/utils';\nimport { cva } from 'class-variance-authority';\nimport { renderTextLikeJSX } from '../../helpers';\n\nconst buttonSizeVariants = cva('items-center justify-center border-solid px-2 rounded flex-col', {\n  variants: {\n    size: {\n      xl: 'h-[52px]',\n      l: 'h-[44px]',\n      m: 'h-[40px]',\n      s: 'h-[32px]',\n      xs: 'h-[24px]',\n    },\n  },\n  defaultVariants: {\n    size: 'l',\n  },\n});\n\nconst buttonTypeVariants = cva('', {\n  variants: {\n    type: {\n      primary: 'bg-primary-5',\n      hazy: 'bg-primary-5/15',\n      outline: 'bg-white border border-gray-200',\n      ghost: 'bg-transparent border border-primary-5',\n      link: '',\n    },\n    danger: {\n      true: 'bg-danger-5',\n      false: '',\n    },\n    hairline: {\n      true: 'border-hairline',\n      false: '',\n    },\n    disabled: {\n      true: 'opacity-40',\n      false: '',\n    },\n    loading: {\n      true: 'opacity-40',\n      false: '',\n    },\n    square: {\n      true: 'rounded-none',\n      false: '',\n    },\n    round: {\n      true: 'rounded-full',\n    },\n  },\n  compoundVariants: [\n    {\n      type: 'primary',\n      danger: true,\n      className: 'bg-danger-5',\n    },\n    {\n      type: 'hazy',\n      danger: true,\n      className: 'bg-danger-5/15',\n    },\n    {\n      type: 'outline',\n      danger: true,\n      className: 'bg-white border',\n    },\n    {\n      type: 'ghost',\n      danger: true,\n      className: 'bg-transparent border border-danger-5',\n    },\n    {\n      type: 'link',\n      danger: true,\n      className: 'bg-transparent',\n    },\n    {\n      type: 'ghost',\n      hairline: true,\n      className: 'border-hairline border-primary-5',\n    },\n    {\n      type: 'ghost',\n      hairline: true,\n      danger: true,\n      className: 'border-hairline border-danger-5',\n    },\n    {\n      type: 'outline',\n      hairline: true,\n      className: 'border-hairline border-gray-200',\n    },\n    {\n      type: 'outline',\n      hairline: true,\n      danger: true,\n      className: 'border-hairline border-gray-200',\n    },\n  ],\n});\n\nconst buttonTextVariants = cva('', {\n  variants: {\n    type: {\n      primary: 'text-white',\n      hazy: 'text-primary-5',\n      outline: 'text-primary-5',\n      ghost: 'text-primary-5',\n      link: 'text-primary-5',\n    },\n    size: {\n      xl: 'text-4xl',\n      l: 'text-2xl',\n      m: 'text-xl',\n      s: 'text-lg',\n      xs: 'text-lg',\n    },\n    danger: {\n      true: '',\n      false: '',\n    },\n  },\n  compoundVariants: [\n    {\n      type: ['hazy', 'outline', 'ghost', 'link'],\n      danger: true,\n      className: 'text-danger-5',\n    },\n  ],\n});\n\nconst loadingSize = {\n  xl: 18,\n  l: 16,\n  m: 15,\n  s: 14,\n  xs: 14,\n};\n\n/**\n * Button 按钮\n * @description 按钮用于触发一个操作，如提交表单。\n */\nconst Button: React.FC<ButtonProps> = ({\n  children,\n  style,\n  text,\n  subtext,\n  textClassName,\n  type = 'primary',\n  danger = false,\n  size = 'l',\n  hairline = false,\n  disabled = false,\n  loading = false,\n  loadingText,\n  loadingIcon,\n  square = false,\n  round = false,\n  renderLeftIcon,\n  color,\n  onPressDebounceWait = 0,\n  className,\n  ...restProps\n}) => {\n  const { run: runOnPress } = useDebounceFn(restProps.onPress || noop, {\n    wait: onPressDebounceWait,\n    leading: true,\n    trailing: false,\n  });\n\n  const leftIconColor = danger ? '#ffffff' : color || '#4080FF';\n\n  const contextJSX = loading ? (\n    <Loading size={loadingSize[size]} textSize={12} loadingIcon={loadingIcon}>\n      <Text className={cn(textClassName, buttonTextVariants({ size, type, danger }), 'ml-2')}>\n        {isUndefined(loadingText) ? text : loadingText}\n      </Text>\n    </Loading>\n  ) : (\n    <>\n      <Flex direction='row' align='center' justify='center'>\n        {renderLeftIcon && renderLeftIcon(leftIconColor, loadingSize[size])}\n        <Text\n          className={cn(\n            {\n              'ml-1': !!renderLeftIcon,\n            },\n            buttonTextVariants({ type, size, danger }),\n            textClassName\n          )}\n          numberOfLines={1}\n        >\n          {!isNil(text) ? text : children}\n        </Text>\n      </Flex>\n      {renderTextLikeJSX(subtext, cn('text-md opacity-70', buttonTextVariants({ type })), {\n        numberOfLines: 1,\n      })}\n    </>\n  );\n\n  return (\n    <TouchableOpacity\n      accessibilityRole='button'\n      {...restProps}\n      disabled={disabled || loading}\n      style={style}\n      activeOpacity={0.7}\n      className={cn(\n        buttonSizeVariants({ size }),\n        buttonTypeVariants({ type, danger, hairline, disabled, loading, square, round }),\n        className\n      )}\n      onPress={\n        restProps.onPress ? (onPressDebounceWait ? runOnPress : restProps.onPress) : undefined\n      }\n    >\n      {contextJSX}\n    </TouchableOpacity>\n  );\n};\n\nexport default memo(Button);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/button/index.ts",
      "content": "import { attachPropertiesToComponent } from '../../helpers';\nimport Button from './button';\nimport ButtonOption from './button-option';\nimport ButtonOptionGroup from './button-option-group';\n\nexport default attachPropertiesToComponent(Button, {\n  Option: ButtonOption,\n  OptionGroup: ButtonOptionGroup,\n});\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/button/interface.ts",
      "content": "import type React from 'react'\nimport type {\n  TextStyle,\n  TouchableHighlightProps,\n  StyleProp,\n  ColorValue,\n  TouchableOpacityProps,\n} from 'react-native'\n\nimport type { LoadingProps } from '../loading/interface'\nimport type { SpaceProps } from '../space/interface'\n\nexport interface ButtonProps\n  extends Omit<TouchableHighlightProps, 'underlayColor' | 'activeOpacity'>,\n    Pick<LoadingProps, 'loadingIcon' | 'color'> {\n  /**\n   * 按钮文案\n   */\n  text?: string\n\n  /**\n   * 按钮子文案\n   */\n  subtext?: string\n\n  /**\n   * 文字自定义样式\n   */\n  textClassName?: string\n\n  /**\n   * 大小\n   * @default 'l'\n   */\n  size?: 'xl' | 'l' | 'm' | 's' | 'xs'\n\n  /**\n   * 类型\n   * @default 'primary'\n   */\n  type?: 'primary' | 'hazy' | 'outline' | 'ghost' | 'link'\n\n  /**\n   * 设置危险按钮\n   * @default false\n   */\n  danger?: boolean\n\n  /**\n   * 细边框\n   * @default false\n   */\n  hairline?: boolean\n\n  /**\n   * 是否禁用按钮\n   * @default false\n   */\n  disabled?: boolean\n\n  /**\n   * 是否显示为加载状态\n   * @default false\n   */\n  loading?: boolean\n\n  /**\n   * 加载状态提示文字\n   */\n  loadingText?: string\n\n  /**\n   * 是否为方形按钮\n   * @default false\n   */\n  square?: boolean\n\n  /**\n   * 是否为圆形按钮\n   * @default false\n   */\n  round?: boolean\n\n  /**\n   * 渲染左侧图标\n   */\n  renderLeftIcon?: (color: ColorValue, size: number) => React.ReactElement\n  /**\n   * onPress debounce wait\n   * @default 0\n   */\n  onPressDebounceWait?: number\n}\n\nexport interface ButtonOptionProps\n  extends Omit<TouchableHighlightProps, 'underlayColor' | 'activeOpacity'>,\n    Pick<ButtonProps, 'text' | 'textClassName' | 'size' | 'hairline' | 'round'> {\n  /**\n   * 是否选中、高亮\n   */\n  active?: boolean\n\n  /**\n   * 选中状态文案颜色、背景色高亮\n   * @default true\n   */\n  activeHighlight?: boolean\n\n  /**\n   * 显示的数量\n   */\n  badge?: React.ReactNode\n\n  /**\n   * 类型\n   * @default 'hazy'\n   */\n  type?: 'hazy' | 'outline' | 'white'\n}\n\nexport interface ButtonOptionGroupProps<TValue = any>\n  extends Omit<SpaceProps, 'direction'> {\n  /**\n   * 选中状态文案颜色、背景色高亮\n   * @default true\n   */\n  activeHighlight?: boolean\n\n  /**\n   * 类型\n   * @default 'hazy'\n   */\n  type?: ButtonOptionProps['type']\n\n  /**\n   * 是否为圆形按钮\n   * @default false\n   */\n  round?: boolean\n\n  options: {\n    value: TValue\n    label: string\n    disabled?: boolean\n    badge?: React.ReactNode\n  }[]\n\n  /**\n   * 是否多选\n   * @default false\n   */\n  multiple?: boolean\n\n  value?: TValue | TValue[]\n\n  defaultValue?: TValue | TValue[]\n\n  onChange?: (\n    value: TValue[] | TValue,\n    options: {\n      value: TValue\n      label: string\n      disabled?: boolean\n      badge?: React.ReactNode\n    }[],\n  ) => void\n  /**\n   * 是否可以编辑，readonly 相似，保持 TextInput 自带的属性效果\n   * @default true\n   */\n  editable?: boolean\n\n  /**\n   * 是否可滚动\n   * @default false\n   */\n  scrollable?: boolean\n\n  /**\n   * 单选的情况下是否可以取消选择\n   * @default true\n   */\n  deselect?: boolean\n}\n",
      "type": "registry:component"
    }
  ]
}