{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "field",
  "type": "registry:component",
  "title": "Example field",
  "author": "@gabimoncha",
  "description": "Displays a button which is always red.",
  "registryDependencies": [
    "http://localhost:3000/r/button.json",
    "http://localhost:3000/r/cell.json",
    "http://localhost:3000/r/checkbox.json",
    "http://localhost:3000/r/date-picker.json",
    "http://localhost:3000/r/date-picker-view.json",
    "http://localhost:3000/r/text-input.json",
    "http://localhost:3000/r/helpers.json",
    "http://localhost:3000/r/hooks.json",
    "http://localhost:3000/r/icons.json",
    "http://localhost:3000/r/number-input.json",
    "http://localhost:3000/r/password-input.json",
    "http://localhost:3000/r/selector.json",
    "http://localhost:3000/r/loading.json",
    "http://localhost:3000/r/switch.json"
  ],
  "files": [
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/field/field-button-option.tsx",
      "content": "import React, { memo } from 'react';\n\nimport ButtonOptionGroup from '../button/button-option-group';\nimport Cell from '../cell';\n\nimport { pickCellProps } from './helper';\nimport type { FieldButtonOptionProps } from './interface';\n\nconst FieldButtonOption: React.FC<FieldButtonOptionProps> = (restProps) => {\n  const { cellProps, otherProps } = pickCellProps(restProps);\n\n  return (\n    <Cell\n      {...cellProps}\n      center={!restProps.vertical}\n      value={\n        <ButtonOptionGroup\n          {...otherProps}\n          justify={restProps.vertical ? 'start' : 'end'}\n          align='center'\n          wrap={restProps.vertical}\n        />\n      }\n    />\n  );\n};\n\nexport default memo(FieldButtonOption);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/field/field-checkbox.tsx",
      "content": "import React, { memo } from 'react';\n\nimport Cell from '../cell';\nimport CheckboxGroup from '../checkbox/checkbox-group';\n\nimport { pickCellProps } from './helper';\nimport type { FieldCheckboxProps } from './interface';\n\nconst FieldCheckbox: React.FC<FieldCheckboxProps> = (restProps) => {\n  const { cellProps, otherProps } = pickCellProps(restProps);\n\n  return (\n    <Cell\n      {...cellProps}\n      center={!restProps.vertical}\n      value={\n        <CheckboxGroup\n          {...otherProps}\n          direction='horizontal'\n          gapHorizontal={24}\n          justify={restProps.vertical ? 'flex-start' : 'flex-end'}\n          align='center'\n        />\n      }\n    />\n  );\n};\n\nexport default memo(FieldCheckbox);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/field/field-date-range.tsx",
      "content": "import isUndefined from 'lodash/isUndefined';\nimport omit from 'lodash/omit';\nimport React, { useMemo, memo } from 'react';\nimport type { TextStyle, StyleProp } from 'react-native';\nimport { Keyboard } from 'react-native';\n\nimport Cell from '../cell';\nimport DatePicker from '../date-picker';\nimport type { DatePickerRangeValue } from '../date-picker/interface';\nimport { formatDate } from '../date-picker-view/helper';\nimport TextInputClear from '../text-input/text-input-clear';\n\nimport type { FieldDateRangeProps } from './interface';\nimport { getDefaultValue, renderTextLikeJSX } from '../../helpers';\nimport { useControllableValue, usePersistFn } from '../../hooks';\nimport { SwapRightOutline } from '../icons';\nimport { cn } from '../../lib/utils';\n\nconst FieldDateRange: React.FC<FieldDateRangeProps> = ({\n  mode = 'Y-D',\n  min,\n  max,\n  renderLabel,\n  confirmButtonText,\n  resetButtonText,\n  formatValueText,\n  datePickerTitle,\n  dataPickerBeforeClose,\n  datePickerCustomOption,\n  isLink = true,\n  editable = true,\n  clearable = false,\n  placeholder,\n  placeholderTextColor,\n\n  valueClassName,\n  valueTextClassName,\n  textAlign = 'right',\n  ...restProps\n}) => {\n  if (restProps.vertical) {\n    textAlign = 'left';\n  }\n\n  // 修正数据\n  placeholderTextColor = getDefaultValue(placeholderTextColor, '#B9BEC5');\n\n  const [value, onChange] = useControllableValue<DatePickerRangeValue | undefined>(restProps);\n  const valueTexts = useMemo<[string, string] | undefined>(\n    () =>\n      value?.[0] && value[1] ? [formatDate(mode, value[0]), formatDate(mode, value[1])] : undefined,\n    [value, mode]\n  );\n\n  const hasValue = !isUndefined(valueTexts);\n\n  const valueTextStyles = useMemo<StyleProp<TextStyle>>(() => {\n    return [\n      !hasValue\n        ? {\n            color: placeholderTextColor,\n          }\n        : null,\n    ];\n  }, [hasValue, placeholderTextColor]);\n\n  const onPress = usePersistFn(() => {\n    Keyboard.dismiss();\n\n    const option = {\n      defaultValue: value,\n      confirmButtonText,\n      resetButtonText,\n      mode,\n      min,\n      max,\n      renderLabel,\n      title: datePickerTitle,\n      beforeClose: dataPickerBeforeClose,\n    };\n\n    DatePicker.range(datePickerCustomOption ? datePickerCustomOption(option) : option).then(\n      ({ action, values: _values }) => {\n        if (action === 'confirm') {\n          onChange(_values);\n        }\n      }\n    );\n  });\n\n  const swapRightJSX = (\n    <SwapRightOutline\n      size={16}\n      color={'#8C9199'}\n      // eslint-disable-next-line react-native/no-inline-styles\n      style={{\n        alignItems: 'center',\n        justifyContent: 'center',\n        marginHorizontal: 2,\n      }}\n    />\n  );\n  const showTexts =\n    hasValue && formatValueText && value\n      ? formatValueText(value, mode, valueTexts)\n      : (valueTexts as [string, string]);\n\n  return (\n    <Cell\n      {...omit(restProps, ['value', 'defaultValue', 'onChange'])}\n      disabled={!editable}\n      onPress={onPress}\n      valueClassName={cn(\n        'flex-row items-center',\n        {\n          'justify-end': textAlign === 'right',\n          'justify-center': textAlign === 'center',\n          'justify-start': textAlign === 'left',\n        },\n        valueClassName\n      )}\n      value={\n        hasValue ? (\n          <>\n            {renderTextLikeJSX(showTexts[0], cn(valueTextClassName, 'text-gray-700 text-2xl'), {\n              style: valueTextStyles,\n            })}\n            {swapRightJSX}\n            {renderTextLikeJSX(showTexts[1], cn(valueTextClassName, 'text-gray-700 text-2xl'), {\n              style: valueTextStyles,\n            })}\n          </>\n        ) : (\n          <>\n            {placeholder?.[0]\n              ? renderTextLikeJSX(\n                  placeholder[0],\n                  cn(valueTextClassName, 'text-gray-700 text-2xl'),\n                  {\n                    style: valueTextStyles,\n                  }\n                )\n              : null}\n            {swapRightJSX}\n            {placeholder?.[1]\n              ? renderTextLikeJSX(\n                  placeholder[1],\n                  cn(valueTextClassName, 'text-gray-700 text-2xl'),\n                  {\n                    style: valueTextStyles,\n                  }\n                )\n              : null}\n          </>\n        )\n      }\n      isLink={value && clearable ? false : isLink}\n      valueExtra={\n        value && clearable ? (\n          <>\n            {restProps.valueExtra}\n            <TextInputClear\n              onPress={() => {\n                onChange(undefined);\n              }}\n            />\n          </>\n        ) : (\n          restProps.valueExtra\n        )\n      }\n    />\n  );\n};\n\nexport default memo(FieldDateRange);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/field/field-date.tsx",
      "content": "import isUndefined from 'lodash/isUndefined';\nimport omit from 'lodash/omit';\nimport React, { useMemo, memo } from 'react';\nimport { Keyboard } from 'react-native';\n\nimport DatePicker from '../date-picker';\nimport { formatDate } from '../date-picker-view/helper';\nimport TextInputClear from '../text-input/text-input-clear';\n\nimport FieldText from './field-text';\nimport type { FieldDateProps } from './interface';\nimport { useControllableValue, usePersistFn } from '../../hooks';\n\nconst FieldDate: React.FC<FieldDateProps> = ({\n  mode = 'Y-m',\n  min,\n  max,\n  renderLabel,\n  confirmButtonText,\n  cancelButtonText,\n  formatValueText,\n  datePickerTitle,\n  datePickerCustomOption,\n  isLink = true,\n  editable = true,\n  clearable = false,\n\n  ...restProps\n}) => {\n  const [value, onChange] = useControllableValue<Date | null>(restProps);\n  const valueText = useMemo(() => (value ? formatDate(mode, value) : undefined), [value, mode]);\n\n  const onPress = usePersistFn(() => {\n    Keyboard.dismiss();\n\n    const option = {\n      defaultValue: value || new Date(),\n      confirmButtonText,\n      cancelButtonText,\n      mode,\n      min,\n      max,\n      renderLabel,\n      title: datePickerTitle,\n    };\n\n    DatePicker(datePickerCustomOption ? datePickerCustomOption(option) : option).then(\n      ({ action, value: _value }) => {\n        if (action === 'confirm') {\n          onChange(_value);\n        }\n      }\n    );\n  });\n\n  return (\n    <FieldText\n      {...omit(restProps, ['value', 'defaultValue', 'onChange'])}\n      disabled={!editable}\n      onPress={onPress}\n      value={\n        formatValueText && !isUndefined(valueText) && value\n          ? formatValueText(value, mode, valueText)\n          : valueText\n      }\n      isLink={value && clearable ? false : isLink}\n      valueExtra={\n        value && clearable ? (\n          <>\n            {restProps.valueExtra}\n            <TextInputClear\n              onPress={() => {\n                onChange(null);\n              }}\n            />\n          </>\n        ) : (\n          restProps.valueExtra\n        )\n      }\n    />\n  );\n};\n\nexport default memo(FieldDate);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/field/field-number-input.tsx",
      "content": "import React, { memo } from 'react';\n\nimport Cell from '../cell';\nimport NumberInput from '../number-input';\n\nimport { pickCellProps } from './helper';\nimport type { FieldNumberInputProps } from './interface';\nimport { cn } from '../../lib/utils';\n\n/**\n * Field 输入框\n * @description 表单中的输入框组件。\n */\nconst FieldNumberInput: React.FC<FieldNumberInputProps> = ({\n  // TextInput 属性\n  textAlign = 'right',\n  textInputStyle,\n  textInputBordered,\n  ...restProps\n}) => {\n  const { cellProps, otherProps } = pickCellProps(restProps);\n\n  if (cellProps.vertical) {\n    textAlign = 'left';\n  }\n\n  return (\n    <Cell\n      {...cellProps}\n      valueClassName={cn(cellProps.valueClassName, cellProps.vertical && 'mt-2')}\n      value={\n        <NumberInput\n          {...otherProps}\n          style={textInputStyle}\n          bordered={textInputBordered}\n          textAlign={textAlign}\n        />\n      }\n    />\n  );\n};\n\nexport default memo(FieldNumberInput);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/field/field-password.tsx",
      "content": "import React, { memo } from 'react';\n\nimport Cell from '../cell';\nimport PasswordInput from '../password-input';\n\nimport { pickCellProps } from './helper';\nimport type { FieldPasswordInputProps } from './interface';\nimport { cn } from '../../lib/utils';\n\n/**\n * Field 密码输入\n * @description 表单中的密码输入组件。\n */\nconst FieldPasswordInput: React.FC<FieldPasswordInputProps> = ({\n  // TextInput 属性\n  textAlign = 'right',\n  textInputStyle,\n  textInputBordered,\n  ...restProps\n}) => {\n  const { cellProps, otherProps } = pickCellProps(restProps);\n\n  if (cellProps.vertical) {\n    textAlign = 'left';\n  }\n\n  return (\n    <Cell\n      {...cellProps}\n      valueClassName={cn(cellProps.valueClassName, cellProps.vertical && 'mt-2')}\n      value={\n        <PasswordInput\n          {...otherProps}\n          style={textInputStyle}\n          bordered={textInputBordered}\n          textAlign={textAlign}\n        />\n      }\n    />\n  );\n};\n\nexport default memo(FieldPasswordInput);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/field/field-selector.tsx",
      "content": "import isArray from 'lodash/isArray';\nimport isUndefined from 'lodash/isUndefined';\nimport React, { memo } from 'react';\nimport { Keyboard, View } from 'react-native';\n\nimport Selector from '../selector';\nimport type { SelectorValue } from '../selector/interface';\nimport TextInputClear from '../text-input/text-input-clear';\nimport type { TreeOption } from '../tree/interface';\n\nimport FieldText from './field-text';\nimport type { FieldSelectorProps } from './interface';\nimport { usePersistFn } from '../../hooks';\nimport LoadingSpinner from '../loading/loading-spinner';\n\n/**\n * 输入框 选择输入\n */\nconst FieldSelector: React.FC<FieldSelectorProps> = ({\n  value,\n  options,\n  multiple,\n  onChange,\n  optionsLoading = false,\n  editable = true,\n  clearable = false,\n  selectorTitle,\n  renderResultText,\n  search,\n  optionsLoadingSpinnerColorClassName,\n  isLink = true,\n  ...restProps\n}) => {\n  const onPressCell = usePersistFn(() => {\n    Keyboard.dismiss();\n    if (editable) {\n      Selector({\n        title: selectorTitle ?? '请选择',\n        multiple,\n        options,\n        value,\n        search,\n        onChange,\n      }).catch(() => {});\n    }\n  });\n  const hasValue = multiple\n    ? isArray(value as SelectorValue[]) && (value as SelectorValue[]).length > 0\n    : !isUndefined(value as SelectorValue);\n  const _value = hasValue ? ((multiple ? value : [value]) as SelectorValue[]) : undefined;\n  const _option =\n    (_value\n      ?.map((o) => {\n        const index = options.findIndex((ops) => ops.value === o);\n        if (index >= 0) {\n          return options[index];\n        }\n        return null;\n      })\n      .filter(Boolean) as TreeOption[]) ?? [];\n  const value2text = hasValue\n    ? renderResultText\n      ? renderResultText(_value, _option)\n      : _option.map((o) => o.label).join('、')\n    : undefined;\n\n  return (\n    <FieldText\n      {...restProps}\n      onPress={optionsLoading ? undefined : onPressCell}\n      value={value2text}\n      isLink={optionsLoading || (hasValue && clearable) ? false : isLink}\n      valueExtra={\n        optionsLoading || (hasValue && clearable) ? (\n          <>\n            {restProps.valueExtra}\n            {optionsLoading ? (\n              <View className='ml-2 justify-center items-center'>\n                <LoadingSpinner\n                  colorClassName={optionsLoadingSpinnerColorClassName}\n                  testID='FIELD_SELECTOR_LOADING'\n                  size={16}\n                />\n              </View>\n            ) : (\n              <TextInputClear\n                onPress={() => {\n                  // TODO 修复类型报错\n                  onChange?.((multiple ? [] : undefined) as any, []);\n                }}\n              />\n            )}\n          </>\n        ) : (\n          restProps.valueExtra\n        )\n      }\n    />\n  );\n};\n\nexport default memo(FieldSelector);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/field/field-switch.tsx",
      "content": "import { JSX, memo } from 'react';\n\nimport Cell from '../cell';\nimport Switch from '../switch';\n\nimport { pickCellProps } from './helper';\nimport type { FieldSwitchProps } from './interface';\nimport { cn } from '../../lib/utils';\n\nfunction FieldSwitch<ActiveValueT = boolean, InactiveValueT = boolean>(\n  props: FieldSwitchProps<ActiveValueT, InactiveValueT>\n) {\n  const { cellProps, otherProps } = pickCellProps(props);\n\n  return (\n    <Cell\n      {...cellProps}\n      valueClassName={cn('flex-row items-center justify-end', cellProps.valueClassName)}\n      value={<Switch<ActiveValueT, InactiveValueT> {...otherProps} />}\n    />\n  );\n}\n\nexport default memo(FieldSwitch) as <ActiveValueT = boolean, InactiveValueT = boolean>(\n  p: FieldSwitchProps<ActiveValueT, InactiveValueT>\n) => JSX.Element;\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/field/field-text-input.tsx",
      "content": "import React, { memo } from 'react';\n\nimport TextInput from '../text-input';\n\nimport { pickCellProps } from './helper';\nimport type { FieldTextInputProps } from './interface';\nimport Cell from '../cell';\nimport { cn } from '../../lib/utils';\n\n/**\n * Field 输入框\n * @description 表单中的输入框组件。\n * @description TODO 自定义输入项\n * @description TODO 解决多行输入高度没对齐的问题\n */\nconst FieldTextInput: React.FC<FieldTextInputProps> = ({\n  // TextInput 属性\n  textAlign = 'right',\n  type,\n  textInputStyle,\n  textInputBordered,\n  ...restProps\n}) => {\n  const { cellProps, otherProps } = pickCellProps(restProps);\n\n  if (cellProps.vertical) {\n    textAlign = 'left';\n    type = 'textarea';\n  }\n\n  if (type === 'textarea') {\n    textAlign = 'left';\n    textInputBordered = true;\n    cellProps.vertical = true;\n  }\n\n  return (\n    <Cell\n      {...cellProps}\n      valueClassName={cn(\n        {\n          'mt-2': cellProps.vertical,\n        },\n        cellProps.valueClassName\n      )}\n      value={\n        <TextInput\n          {...otherProps}\n          style={textInputStyle}\n          type={type}\n          bordered={textInputBordered}\n          textAlign={textAlign}\n        />\n      }\n    />\n  );\n};\n\nexport default memo(FieldTextInput);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/field/field-text.tsx",
      "content": "import isNil from 'lodash/isNil';\nimport React, { memo } from 'react';\n\nimport Cell from '../cell';\n\nimport type { FieldTextProps } from './interface';\n\n/**\n * 输入框 纯文字方式\n */\nconst FieldText: React.FC<FieldTextProps> = ({\n  placeholder,\n  value,\n\n  valueTextClassName,\n  ...restProps\n}) => {\n  const hasValue = !isNil(value);\n  const text = hasValue ? value : placeholder;\n\n  return <Cell {...restProps} value={text} valueTextClassName={valueTextClassName} />;\n};\n\nexport default memo(FieldText);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/field/helper.ts",
      "content": "import isUndefined from 'lodash/isUndefined'\n\nimport type { FieldTextCellPropsUsed } from './interface'\n\nexport const pickCellProps = <T extends FieldTextCellPropsUsed>(\n  {\n    innerClassName,\n    title,\n    titleClassName,\n    titleTextClassName,\n    titleExtra,\n    valueClassName,\n    valueExtra,\n    extra,\n    extraTextClassName,\n    contentClassName,\n    divider,\n    dividerLeftGap,\n    dividerRightGap,\n    isLink,\n    onPressLink,\n    center,\n    arrowDirection,\n    required,\n    vertical,\n    titleTextNumberOfLines,\n    style,\n    testID,\n    ...otherProps\n  }: T,\n  defaultProps?: Partial<T>,\n) => {\n  const cellProps: Partial<FieldTextCellPropsUsed> = {\n    innerClassName,\n    title,\n    titleClassName,\n    titleTextClassName,\n    titleExtra,\n    valueClassName,\n    valueExtra,\n    extra,\n    extraTextClassName,\n    contentClassName,\n    divider,\n    dividerLeftGap,\n    dividerRightGap,\n    isLink,\n    onPressLink,\n    center,\n    arrowDirection,\n    required,\n    vertical,\n    titleTextNumberOfLines,\n    style,\n    testID,\n  }\n\n  if (defaultProps && typeof defaultProps === 'object') {\n    Object.entries(defaultProps).forEach(([key, value]) => {\n      if (isUndefined(cellProps[key as keyof typeof cellProps])) {\n        cellProps[key as keyof typeof cellProps] = value\n      }\n    })\n  }\n\n  return {\n    cellProps,\n    otherProps,\n  }\n}\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/field/index.ts",
      "content": "import FieldButtonOption from './field-button-option'\nimport FieldCheckbox from './field-checkbox'\nimport FieldDate from './field-date'\nimport FieldDateRange from './field-date-range'\nimport FieldNumberInput from './field-number-input'\nimport FieldPasswordInput from './field-password'\nimport FieldSelector from './field-selector'\nimport FieldSwitch from './field-switch'\nimport FieldText from './field-text'\nimport FieldTextInput from './field-text-input'\n\nexport default {\n  Checkbox: FieldCheckbox,\n  Date: FieldDate,\n  DateRange: FieldDateRange,\n  NumberInput: FieldNumberInput,\n  Password: FieldPasswordInput,\n  Selector: FieldSelector,\n  Switch: FieldSwitch,\n  Text: FieldText,\n  TextInput: FieldTextInput,\n  ButtonOption: FieldButtonOption,\n}\n",
      "type": "registry:component"
    }
  ]
}