{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "uploader",
  "type": "registry:component",
  "title": "Example uploader",
  "author": "@gabimoncha",
  "description": "Displays a button which is always red.",
  "registryDependencies": [
    "http://localhost:3000/r/helpers.json",
    "http://localhost:3000/r/icons.json",
    "http://localhost:3000/r/loading.json",
    "http://localhost:3000/r/hooks.json"
  ],
  "files": [
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/uploader/index.ts",
      "content": "\nimport { attachPropertiesToComponent } from '../../helpers'\nimport Uploader from './uploader'\nimport UploaderRegular from './uploader-regular'\n\nexport default attachPropertiesToComponent(Uploader, {\n  Regular: UploaderRegular,\n})\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/uploader/interface.ts",
      "content": "import type { PropsWithChildren, ComponentType, ReactNode } from 'react'\nimport type { ImageSourcePropType, ViewProps } from 'react-native'\n\nexport type UploaderValue = {\n  /**\n   * 当前资源的唯一标识\n   */\n  key: string\n\n  /**\n   * 文件路径\n   */\n  filepath: string\n\n  /**\n   * 文件状态\n   * @default 'done'\n   */\n  status?: 'loading' | 'done' | 'error'\n\n  /**\n   * 是否展示删除按钮\n   * @default true\n   */\n  deletable?: boolean\n\n  [index: string]: any\n}\n\nexport interface UploaderProps<T extends UploaderValue> extends ViewProps {\n  /**\n   * 图片数组\n   */\n  list: T[]\n\n  /**\n   * 文件上传数量限制\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  maxCount?: number\n\n  /**\n   * 图片展示组件\n   * @default Image\n   */\n  imageComponent?: ComponentType<{\n    source?: ImageSourcePropType\n    [index: string]: any\n  }>\n\n  /**\n   * 是否展示删除按钮\n   * @default true\n   */\n  deletable?: boolean\n\n  /**\n   * 是否展示上传区域\n   * @default true\n   */\n  showUpload?: boolean\n\n  /**\n   * 上传区域文字提示\n   * @default '图片'\n   */\n  uploadText?: string\n\n  /**\n   * 上传图标\n   */\n  uploadIcon?: ReactNode\n\n  /**\n   * 点击选择按钮\n   */\n  onPressUpload?: () => void\n\n  /**\n   * 一行多少个列/图片\n   * @default 4\n   */\n  colCount?: number\n\n  /**\n   * 列/图片之间的间距\n   */\n  colGap?: number | 's' | 'm' | 'l'\n\n  /**\n   * 点击某一个图片\n   */\n  onPressImage?: (current: T, index: number, list: T[]) => void\n\n  /**\n   * 点击删除文件\n   */\n  onPressDelete?: (current: T, index: number, list: T[]) => void\n\n  /**\n   * 点击上传出错的文件\n   */\n  onPressError?: (current: T, index: number, list: T[]) => void\n}\n\nexport interface UploaderImageProps\n  extends Partial<Pick<UploaderValue, 'filepath' | 'status'>>,\n    Pick<UploaderProps<UploaderValue>, 'imageComponent' | 'deletable'>,\n    PropsWithChildren<{}> {\n  /**\n   * 缩略图尺寸\n   */\n  size?: number\n\n  /**\n   * 右边距\n   */\n  marginRight?: number\n\n  /**\n   * 下边距\n   */\n  marginBottom?: number\n\n  /**\n   * 点击图片\n   */\n  onPress?: () => void\n\n  /**\n   * 点击删除图片\n   */\n  onPressDelete?: () => void\n\n  /**\n   * 是否是上传按钮\n   */\n  isUpload?: boolean\n}\n\nexport interface RegularCount {\n  text?: string\n  icon?: ReactNode\n}\n\nexport interface UploaderRegularProps<T extends UploaderValue>\n  extends ViewProps,\n    Pick<\n      UploaderProps<T>,\n      'imageComponent' | 'colCount' | 'colGap' | 'deletable'\n    > {\n  list: (T | null)[]\n\n  /**\n   * 点击某一个图片\n   */\n  onPressImage?: (current: T, index: number, list: (T | null)[]) => void\n\n  /**\n   * 点击删除文件\n   */\n  onPressDelete?: (current: T, index: number, list: (T | null)[]) => void\n\n  /**\n   * 点击上传出错的文件\n   */\n  onPressError?: (current: T, index: number, list: (T | null)[]) => void\n\n  /**\n   * 共多少个上传，请保持数组引用不变\n   */\n  count: number | (RegularCount | null)[]\n\n  /**\n   * 点击某个按钮\n   */\n  onPressUpload?: (index: number) => void\n}\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/uploader/uploader-image.tsx",
      "content": "import isNil from 'lodash/isNil';\nimport React, { useMemo, memo } from 'react';\nimport { View, Text, Image, TouchableOpacity } from 'react-native';\n\nimport type { UploaderImageProps } from './interface';\nimport { CrossOutline, CrossCircleOutline } from '../icons';\nimport LoadingCircular from '../loading';\n\n/**\n * UploaderImage 文件上传的缩略图\n */\nconst UploaderImage: React.FC<UploaderImageProps> = ({\n  filepath,\n  status = 'done',\n  imageComponent: ImageComponent = Image,\n  deletable = true,\n  size,\n  marginRight,\n  marginBottom,\n  onPress,\n  onPressDelete,\n  isUpload,\n  children,\n}) => {\n  const customSizeStyle = useMemo(() => ({ width: size, height: size }), [size]);\n\n  const customStyle = useMemo(\n    () => ({\n      width: size,\n      height: size,\n      marginRight: marginRight,\n      marginBottom: marginBottom,\n    }),\n    [size, marginRight, marginBottom]\n  );\n  const canPress = isUpload || (!!filepath && (status === 'done' || status === 'error'));\n  return (\n    <TouchableOpacity\n      style={customStyle}\n      className='items-center justify-center overflow-hidden rounded bg-gray-200'\n      onPress={canPress ? onPress : undefined}\n      activeOpacity={canPress ? 0.8 : 1}\n    >\n      {!isNil(children) ? (\n        children\n      ) : (\n        <>\n          <ImageComponent style={customSizeStyle} source={{ uri: filepath }} />\n\n          {deletable && status !== 'loading' ? (\n            <CrossOutline\n              size={12}\n              color='#fff'\n              onPress={onPressDelete}\n              className='absolute right-0 top-0 w-4 h-4 rounded-bl bg-black/95 items-center justify-center z-[3]'\n            />\n          ) : null}\n\n          {status === 'loading' ? (\n            <View className='absolute top-0 left-0 right-0 bottom-0 bg-black/95 items-center justify-center z-[2]'>\n              <LoadingCircular color='#fff' size={20} />\n              <Text className='text-white text-lg mt-1'>上传中...</Text>\n            </View>\n          ) : null}\n\n          {status === 'error' ? (\n            <View className='absolute bg-black/95 top-0 left-0 right-0 bottom-0 items-center justify-center z-[2]'>\n              <CrossCircleOutline color='#fff' size={20} />\n              <Text className='text-white text-lg mt-1'>{`上传失败\\n点击重试`}</Text>\n            </View>\n          ) : null}\n        </>\n      )}\n    </TouchableOpacity>\n  );\n};\n\nexport default memo(UploaderImage);\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/uploader/uploader-regular.tsx",
      "content": "import isNil from 'lodash/isNil';\nimport { useMemo } from 'react';\nimport type { LayoutChangeEvent } from 'react-native';\nimport { View, Text, Image } from 'react-native';\n\nimport type { UploaderRegularProps, UploaderValue, RegularCount } from './interface';\nimport UploaderImage from './uploader-image';\nimport useImageLayout from './useImageLayout';\nimport { PlusOutline } from '../icons';\nimport { usePersistFn } from '../../hooks';\nimport { cn } from '../../lib/utils';\n\nconst uploader_image_gap = {\n  s: 6,\n  m: 10,\n  l: 14,\n};\n\nconst UploaderRegular = <T extends UploaderValue>({\n  list,\n  imageComponent = Image,\n  colCount = 4,\n  colGap = 'm',\n  onPressImage,\n  onPressDelete,\n  onPressError,\n  count,\n  onPressUpload,\n  deletable = true,\n\n  style,\n  onLayout,\n  ...restProps\n}: UploaderRegularProps<T>) => {\n  const [onLayoutWrapper, getSizeImage, getMarginImage] = useImageLayout();\n\n  const onLayoutView = usePersistFn((e: LayoutChangeEvent) => {\n    onLayoutWrapper(e);\n    onLayout?.(e);\n  });\n\n  const showList = useMemo(() => {\n    return (\n      (typeof count === 'number' ? new Array(count).fill(null) : count) as (RegularCount | null)[]\n    ).map((item, index) => {\n      const _i = item || {};\n      const text = _i.text ?? '图片';\n      const icon = _i.icon || <PlusOutline color={'#8C9199'} pointerEvents='none' />;\n      const data = list[index];\n\n      return {\n        text,\n        icon,\n        data,\n      };\n    });\n  }, [count, list]);\n\n  const genOnPressDelete = (item: T, index: number) => () => {\n    onPressDelete?.(item, index, list);\n  };\n  const genOnPressImage = (item: T, index: number) => () => {\n    const onPressCallback = item.status === 'error' ? onPressError : onPressImage;\n\n    onPressCallback?.(item, index, list);\n  };\n  const genOnPressUpload = (index: number) => () => {\n    onPressUpload?.(index);\n  };\n\n  const imageGap = typeof colGap === 'number' ? colGap : uploader_image_gap[colGap];\n  const imageSize = getSizeImage(colCount, imageGap);\n  const total = showList.length;\n\n  return (\n    <View\n      {...restProps}\n      style={style}\n      className={cn('flex-row flex-wrap', restProps.className)}\n      onLayout={onLayoutView}\n    >\n      {showList.map((item, index) => {\n        if (item.data) {\n          return (\n            <UploaderImage\n              key={item.data?.key || index}\n              filepath={item.data.filepath}\n              status={item.data.status}\n              imageComponent={imageComponent}\n              deletable={isNil(item.data?.deletable) ? deletable : item.data.deletable}\n              size={imageSize}\n              marginRight={\n                getMarginImage(total, colCount, index).marginRight ? imageGap : undefined\n              }\n              marginBottom={\n                getMarginImage(total, colCount, index).marginBottom ? imageGap : undefined\n              }\n              onPress={genOnPressImage(item.data, index)}\n              onPressDelete={genOnPressDelete(item.data, index)}\n            />\n          );\n        }\n\n        return (\n          <UploaderImage\n            isUpload\n            key={index}\n            size={imageSize}\n            marginRight={getMarginImage(total, colCount, index).marginRight ? imageGap : undefined}\n            marginBottom={\n              getMarginImage(total, colCount, index).marginBottom ? imageGap : undefined\n            }\n            onPress={genOnPressUpload(index)}\n          >\n            {item.icon}\n            <Text className='text-gray-600 text-lg mt-1 text-center'>{item.text}</Text>\n          </UploaderImage>\n        );\n      })}\n    </View>\n  );\n};\n\nexport default UploaderRegular;\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/uploader/uploader.tsx",
      "content": "import isNil from 'lodash/isNil';\nimport { isValidElement } from 'react';\nimport type { LayoutChangeEvent } from 'react-native';\nimport { View, Text, Image } from 'react-native';\n\nimport type { UploaderProps, UploaderValue } from './interface';\nimport UploaderImage from './uploader-image';\nimport useImageLayout from './useImageLayout';\nimport { usePersistFn } from '../../hooks';\nimport { PlusOutline } from '../icons';\nimport { cn } from '../../lib/utils';\n\nconst uploader_image_gap = {\n  s: 6,\n  m: 10,\n  l: 14,\n};\n\n/**\n * Uploader 文件上传\n */\nconst Uploader = <T extends UploaderValue>({\n  list,\n  maxCount = Number.MAX_SAFE_INTEGER,\n  imageComponent = Image,\n  deletable = true,\n  showUpload = true,\n  uploadText,\n  uploadIcon,\n  onPressUpload,\n  colCount = 4,\n  colGap = 'm',\n  onPressImage,\n  onPressDelete,\n  onPressError,\n\n  style,\n  onLayout,\n  ...restProps\n}: UploaderProps<T>) => {\n  const [onLayoutWrapper, getSizeImage, getMarginImage] = useImageLayout();\n  const onLayoutView = usePersistFn((e: LayoutChangeEvent) => {\n    onLayoutWrapper(e);\n    onLayout?.(e);\n  });\n  const onPressUploadPersistFn = usePersistFn(() => {\n    onPressUpload?.();\n  });\n\n  const genOnPressDelete = (item: T, index: number) => () => {\n    onPressDelete?.(item, index, list);\n  };\n  const genOnPressImage = (item: T, index: number) => () => {\n    const onPressCallback = item.status === 'error' ? onPressError : onPressImage;\n\n    onPressCallback?.(item, index, list);\n  };\n\n  const showUploadButton = showUpload && list.length < maxCount;\n  const imageGap = typeof colGap === 'number' ? colGap : uploader_image_gap[colGap];\n  const imageSize = getSizeImage(colCount, imageGap);\n  const total = (showUploadButton ? 1 : 0) + list.length;\n\n  return (\n    <View\n      {...restProps}\n      style={style}\n      className={cn('flex-row flex-wrap', restProps.className)}\n      onLayout={onLayoutView}\n    >\n      {list.map((item, index) => {\n        return (\n          <UploaderImage\n            key={item.key}\n            filepath={item.filepath}\n            status={item.status}\n            imageComponent={imageComponent}\n            deletable={isNil(item.deletable) ? deletable : item.deletable}\n            size={imageSize}\n            marginRight={getMarginImage(total, colCount, index).marginRight ? imageGap : undefined}\n            marginBottom={\n              getMarginImage(total, colCount, index).marginBottom ? imageGap : undefined\n            }\n            onPress={genOnPressImage(item, index)}\n            onPressDelete={genOnPressDelete(item, index)}\n          />\n        );\n      })}\n\n      {showUpload && list.length < maxCount ? (\n        <UploaderImage\n          isUpload\n          size={imageSize}\n          marginBottom={\n            getMarginImage(total, colCount, total - 1).marginBottom ? imageGap : undefined\n          }\n          onPress={onPressUploadPersistFn}\n        >\n          {isValidElement(uploadIcon) ? (\n            uploadIcon\n          ) : (\n            <PlusOutline color='#8C9199' pointerEvents='none' />\n          )}\n          <Text className='text-gray-600 text-lg mt-1 text-center'>{uploadText ?? '图片'}</Text>\n        </UploaderImage>\n      ) : null}\n    </View>\n  );\n};\n\nexport default Uploader;\n",
      "type": "registry:component"
    },
    {
      "path": "./node_modules/@tastien/react-native-component/src/components/uploader/useImageLayout.ts",
      "content": "import { useCallback, useState, useRef } from 'react'\nimport type { LayoutChangeEvent } from 'react-native'\n\ninterface CurrentMargin {\n  marginBottom: boolean\n  marginRight: boolean\n}\n\nconst isLastCol = (total: number, colCount: number, index: number) => {\n  const totalCol = Math.ceil(total / colCount)\n  const col = Math.ceil((index + 1) / colCount)\n\n  return totalCol === col\n}\n\nconst useImageLayout = () => {\n  const [width, setWidth] = useState(0)\n  const Size = useRef<Record<string, number>>({})\n  const Margin = useRef<Record<string, CurrentMargin>>({})\n\n  const onLayout = useCallback((e: LayoutChangeEvent) => {\n    setWidth(Math.floor(e.nativeEvent.layout.width))\n  }, [])\n\n  const getSize = useCallback(\n    (colCount: number, colGap: number) => {\n      const sizeKey = [width, colCount, colGap].join('_')\n\n      if (!Size.current[sizeKey]) {\n        Size.current[sizeKey] = (width - (colCount - 1) * colGap) / colCount\n      }\n\n      return Size.current[sizeKey]\n    },\n    [width],\n  )\n\n  /**\n   * 获取当前的尺寸、边距\n   */\n  const getMargin = useCallback(\n    (total: number, colCount: number, index: number): CurrentMargin => {\n      const cacheKey = [total, colCount, index].join('_')\n\n      if (!Margin.current[cacheKey]) {\n        const marginRight = (index + 1) % colCount === 0 ? false : true\n        const marginBottom = !isLastCol(total, colCount, index)\n\n        Margin.current[cacheKey] = {\n          marginRight,\n          marginBottom,\n        }\n      }\n\n      return Margin.current[cacheKey]\n    },\n    [],\n  )\n\n  return [onLayout, getSize, getMargin] as const\n}\n\nexport default useImageLayout\n",
      "type": "registry:component"
    }
  ]
}