{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "uploader",
  "type": "registry:component",
  "title": "Example uploader",
  "author": "@gabimoncha",
  "description": "Displays a button which is always red.",
  "files": [
    {
      "path": "./node_modules/@rnr/example-library/src/components/uploader/uploader.tsx",
      "content": "import isNil from 'lodash/isNil';\nimport { isValidElement } from 'react';\nimport type { LayoutChangeEvent } from 'react-native';\nimport { View, Text, Image } from 'react-native';\n\nimport type { UploaderProps, UploaderValue } from './interface';\nimport UploaderImage from './uploader-image';\nimport useImageLayout from './useImageLayout';\nimport { usePersistFn } from '../../hooks';\nimport { PlusOutline } from '../icons';\nimport { cn } from '../../lib/utils';\n\nconst uploader_image_gap = {\n  s: 6,\n  m: 10,\n  l: 14,\n};\n\n/**\n * Uploader 文件上传\n */\nconst Uploader = <T extends UploaderValue>({\n  list,\n  maxCount = Number.MAX_SAFE_INTEGER,\n  imageComponent = Image,\n  deletable = true,\n  showUpload = true,\n  uploadText,\n  uploadIcon,\n  onPressUpload,\n  colCount = 4,\n  colGap = 'm',\n  onPressImage,\n  onPressDelete,\n  onPressError,\n\n  style,\n  onLayout,\n  ...restProps\n}: UploaderProps<T>) => {\n  const [onLayoutWrapper, getSizeImage, getMarginImage] = useImageLayout();\n  const onLayoutView = usePersistFn((e: LayoutChangeEvent) => {\n    onLayoutWrapper(e);\n    onLayout?.(e);\n  });\n  const onPressUploadPersistFn = usePersistFn(() => {\n    onPressUpload?.();\n  });\n\n  const genOnPressDelete = (item: T, index: number) => () => {\n    onPressDelete?.(item, index, list);\n  };\n  const genOnPressImage = (item: T, index: number) => () => {\n    const onPressCallback = item.status === 'error' ? onPressError : onPressImage;\n\n    onPressCallback?.(item, index, list);\n  };\n\n  const showUploadButton = showUpload && list.length < maxCount;\n  const imageGap = typeof colGap === 'number' ? colGap : uploader_image_gap[colGap];\n  const imageSize = getSizeImage(colCount, imageGap);\n  const total = (showUploadButton ? 1 : 0) + list.length;\n\n  return (\n    <View\n      {...restProps}\n      style={style}\n      className={cn('flex-row flex-wrap', restProps.className)}\n      onLayout={onLayoutView}\n    >\n      {list.map((item, index) => {\n        return (\n          <UploaderImage\n            key={item.key}\n            filepath={item.filepath}\n            status={item.status}\n            imageComponent={imageComponent}\n            deletable={isNil(item.deletable) ? deletable : item.deletable}\n            size={imageSize}\n            marginRight={getMarginImage(total, colCount, index).marginRight ? imageGap : undefined}\n            marginBottom={\n              getMarginImage(total, colCount, index).marginBottom ? imageGap : undefined\n            }\n            onPress={genOnPressImage(item, index)}\n            onPressDelete={genOnPressDelete(item, index)}\n          />\n        );\n      })}\n\n      {showUpload && list.length < maxCount ? (\n        <UploaderImage\n          isUpload\n          size={imageSize}\n          marginBottom={\n            getMarginImage(total, colCount, total - 1).marginBottom ? imageGap : undefined\n          }\n          onPress={onPressUploadPersistFn}\n        >\n          {isValidElement(uploadIcon) ? (\n            uploadIcon\n          ) : (\n            <PlusOutline color='#8C9199' pointerEvents='none' />\n          )}\n          <Text className='text-gray-600 text-lg mt-1 text-center'>{uploadText ?? '图片'}</Text>\n        </UploaderImage>\n      ) : null}\n    </View>\n  );\n};\n\nexport default Uploader;\n",
      "type": "registry:component"
    }
  ]
}