{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "overlay",
  "type": "registry:component",
  "title": "Example overlay",
  "author": "@gabimoncha",
  "description": "Displays a button which is always red.",
  "files": [
    {
      "path": "./node_modules/@rnr/example-library/src/components/overlay/overlay.tsx",
      "content": "import React, { memo, useEffect, useRef, useState } from 'react';\nimport { Animated, BackHandler, TouchableOpacity } from 'react-native';\nimport type { OverlayProps } from './types';\nimport { cn } from '../../lib/utils';\n\n/**\n * Overlay 遮罩层\n * @description 创建一个遮罩层，用于强调特定的页面元素，并阻止用户进行其他操作。\n * TODO 统计遮罩层数量，动态控制状态栏的颜色，避免黑色遮罩层配合黑色文字的状态栏。\n */\nconst Overlay: React.FC<OverlayProps> = ({\n  testID,\n  children,\n  className,\n  overlayClassName,\n  visible = false,\n  duration = 300,\n  onPress,\n  onRequestClose,\n}) => {\n  const fadeAnim = useRef(new Animated.Value(0));\n  const fadeInstance = useRef<Animated.CompositeAnimation | null>(null);\n  const [localVisible, setLocalVisible] = useState(visible);\n\n  // 监听状态变化，执行动画\n  useEffect(() => {\n    if (visible) {\n      setLocalVisible(true);\n    }\n\n    fadeInstance.current = Animated.timing(\n      fadeAnim.current, // 动画中的变量值\n      {\n        toValue: visible ? 1 : 0,\n        duration,\n        useNativeDriver: true,\n      }\n    );\n\n    fadeInstance.current.start(({ finished }) => {\n      if (finished) {\n        fadeInstance.current = null;\n\n        if (!visible) {\n          setLocalVisible(false);\n        }\n      }\n    });\n\n    return () => {\n      // 停止动画\n      if (fadeInstance.current) {\n        fadeInstance.current.stop();\n        fadeInstance.current = null;\n      }\n    };\n  }, [visible, duration]);\n\n  // Android 返回按钮\n  useEffect(() => {\n    const backHandler = BackHandler.addEventListener('hardwareBackPress', () => {\n      if (typeof onRequestClose === 'function' && visible) {\n        return onRequestClose();\n      }\n\n      return false;\n    });\n\n    return () => backHandler.remove();\n  }, [visible, onRequestClose]);\n\n  if (!localVisible) {\n    // TODO 优化文档报错\n    // 直接返回 null dumi 报错 -、-\n\n    return <></>;\n  }\n\n  return (\n    <Animated.View\n      testID={testID}\n      style={{\n        opacity: fadeAnim.current,\n      }}\n      className={cn(\n        'relative left-0 right-0 bottom-0 top-0 bg-black/70',\n        localVisible ? 'absolute' : null,\n        overlayClassName\n      )}\n    >\n      <TouchableOpacity className={cn('flex-1', className)} activeOpacity={1} onPress={onPress}>\n        {children}\n      </TouchableOpacity>\n    </Animated.View>\n  );\n};\n\nexport default memo(Overlay);\n",
      "type": "registry:component"
    }
  ]
}